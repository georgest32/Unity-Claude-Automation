{
  "FailedTests": [],
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 44947,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T20:14:41.3635184-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:14:41.3635184Z",
            "LastWriteTime": "2025-08-28T20:13:11.8606092-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:13:11.8606092Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T20:12:54.9863661-04:00",
          "CreationTimeUtc": "2025-08-29T00:12:54.9863661Z",
          "LastAccessTime": "2025-08-28T20:13:52.8558296-04:00",
          "LastAccessTimeUtc": "2025-08-29T00:13:52.8558296Z",
          "LastWriteTime": "2025-08-28T20:12:54.9863661-04:00",
          "LastWriteTimeUtc": "2025-08-29T00:12:54.9863661Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Passed",
        "Duration": {
          "Ticks": 6050925,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 605,
          "Microseconds": 92,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.003385416666667E-06,
          "TotalHours": 0.00016808125,
          "TotalMilliseconds": 605.0925,
          "TotalMicroseconds": 605092.5,
          "TotalNanoseconds": 605092500.0,
          "TotalMinutes": 0.010084875,
          "TotalSeconds": 0.6050925
        },
        "FailedCount": 0,
        "PassedCount": 1,
        "SkippedCount": 27,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": true,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
        "DiscoveryDuration": {
          "Ticks": 1068040,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 106,
          "Microseconds": 804,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.2361574074074075E-06,
          "TotalHours": 2.9667777777777776E-05,
          "TotalMilliseconds": 106.804,
          "TotalMicroseconds": 106804.0,
          "TotalNanoseconds": 106804000.0,
          "TotalMinutes": 0.0017800666666666666,
          "TotalSeconds": 0.106804
        },
        "UserDuration": {
          "Ticks": 1748988,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 174,
          "Microseconds": 898,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0242916666666665E-06,
          "TotalHours": 4.8583E-05,
          "TotalMilliseconds": 174.8988,
          "TotalMicroseconds": 174898.8,
          "TotalNanoseconds": 174898800.0,
          "TotalMinutes": 0.00291498,
          "TotalSeconds": 0.1748988
        },
        "FrameworkDuration": {
          "Ticks": 3233897,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 323,
          "Microseconds": 389,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7429363425925924E-06,
          "TotalHours": 8.983047222222222E-05,
          "TotalMilliseconds": 323.3897,
          "TotalMicroseconds": 323389.7,
          "TotalNanoseconds": 323389700.0,
          "TotalMinutes": 0.005389828333333333,
          "TotalSeconds": 0.3233897
        },
        "StandardOutput": null
      }
    ],
    "Result": "Passed",
    "FailedCount": 0,
    "FailedBlocksCount": 0,
    "FailedContainersCount": 0,
    "PassedCount": 1,
    "SkippedCount": 27,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 6050925,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 605,
      "Microseconds": 92,
      "Nanoseconds": 500,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 7.003385416666667E-06,
      "TotalHours": 0.00016808125,
      "TotalMilliseconds": 605.0925,
      "TotalMicroseconds": 605092.5,
      "TotalNanoseconds": 605092500.0,
      "TotalMinutes": 0.010084875,
      "TotalSeconds": 0.6050925
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T20:14:40.5866942-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-201440.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-201440.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 1068040,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 106,
      "Microseconds": 804,
      "Nanoseconds": 0,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 1.2361574074074075E-06,
      "TotalHours": 2.9667777777777776E-05,
      "TotalMilliseconds": 106.804,
      "TotalMicroseconds": 106804.0,
      "TotalNanoseconds": 106804000.0,
      "TotalMinutes": 0.0017800666666666666,
      "TotalSeconds": 0.106804
    },
    "UserDuration": {
      "Ticks": 1748988,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 174,
      "Microseconds": 898,
      "Nanoseconds": 800,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 2.0242916666666665E-06,
      "TotalHours": 4.8583E-05,
      "TotalMilliseconds": 174.8988,
      "TotalMicroseconds": 174898.8,
      "TotalNanoseconds": 174898800.0,
      "TotalMinutes": 0.00291498,
      "TotalSeconds": 0.1748988
    },
    "FrameworkDuration": {
      "Ticks": 3233897,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 323,
      "Microseconds": 389,
      "Nanoseconds": 700,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 3.7429363425925924E-06,
      "TotalHours": 8.983047222222222E-05,
      "TotalMilliseconds": 323.3897,
      "TotalMicroseconds": 323389.7,
      "TotalNanoseconds": 323389700.0,
      "TotalMinutes": 0.005389828333333333,
      "TotalSeconds": 0.3233897
    },
    "Failed": [],
    "FailedBlocks": [],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 444126,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 412,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.140347222222222E-07,
          "TotalHours": 1.2336833333333334E-05,
          "TotalMilliseconds": 44.4126,
          "TotalMicroseconds": 44412.6,
          "TotalNanoseconds": 44412600.0,
          "TotalMinutes": 0.00074021,
          "TotalSeconds": 0.0444126
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 41197,
            "Length": 1019,
            "StartLine": 790,
            "StartColumn": 64,
            "EndLine": 809,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "76ce7f6c-4abc-4da2-90c6-a31108c4cb93",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 950362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 95,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0999560185185186E-06,
            "TotalHours": 2.6398944444444445E-05,
            "TotalMilliseconds": 95.0362,
            "TotalMicroseconds": 95036.2,
            "TotalNanoseconds": 95036200.0,
            "TotalMinutes": 0.0015839366666666667,
            "TotalSeconds": 0.0950362
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a2a35f3-7b49-49d9-9a02-8d580a469894",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0911283-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 147115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 711,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7027199074074074E-07,
            "TotalHours": 4.086527777777778E-06,
            "TotalMilliseconds": 14.7115,
            "TotalMicroseconds": 14711.5,
            "TotalNanoseconds": 14711500.0,
            "TotalMinutes": 0.00024519166666666666,
            "TotalSeconds": 0.0147115
          },
          "UserDuration": {
            "Ticks": 803247,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 324,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.296840277777778E-07,
            "TotalHours": 2.2312416666666667E-05,
            "TotalMilliseconds": 80.3247,
            "TotalMicroseconds": 80324.7,
            "TotalNanoseconds": 80324700.0,
            "TotalMinutes": 0.001338745,
            "TotalSeconds": 0.0803247
          },
          "OwnDuration": {
            "Ticks": 502431,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 50,
            "Microseconds": 243,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.815173611111111E-07,
            "TotalHours": 1.3956416666666667E-05,
            "TotalMilliseconds": 50.2431,
            "TotalMicroseconds": 50243.1,
            "TotalNanoseconds": 50243100.0,
            "TotalMinutes": 0.000837385,
            "TotalSeconds": 0.0502431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6519f860-8fc2-42bc-a828-ed3633c76f23",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 757,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 790,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1317093-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 402301,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 40,
          "Microseconds": 230,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.656261574074074E-07,
          "TotalHours": 1.1175027777777778E-05,
          "TotalMilliseconds": 40.2301,
          "TotalMicroseconds": 40230.1,
          "TotalNanoseconds": 40230100.0,
          "TotalMinutes": 0.0006705016666666666,
          "TotalSeconds": 0.0402301
        },
        "FrameworkDuration": {
          "Ticks": 41825,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 182,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.840856481481481E-08,
          "TotalHours": 1.1618055555555555E-06,
          "TotalMilliseconds": 4.1825,
          "TotalMicroseconds": 4182.5,
          "TotalNanoseconds": 4182500.0,
          "TotalMinutes": 6.970833333333334E-05,
          "TotalSeconds": 0.0041825
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 159865,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 986,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.8502893518518518E-07,
          "TotalHours": 4.440694444444444E-06,
          "TotalMilliseconds": 15.9865,
          "TotalMicroseconds": 15986.5,
          "TotalNanoseconds": 15986500.0,
          "TotalMinutes": 0.00026644166666666666,
          "TotalSeconds": 0.0159865
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 14793,
            "Length": 619,
            "StartLine": 265,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "df681134-3a3c-416e-9d9a-ebae91fd6173",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 265,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9094197-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 159865,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 986,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.8502893518518518E-07,
          "TotalHours": 4.440694444444444E-06,
          "TotalMilliseconds": 15.9865,
          "TotalMicroseconds": 15986.5,
          "TotalNanoseconds": 15986500.0,
          "TotalMinutes": 0.00026644166666666666,
          "TotalSeconds": 0.0159865
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4937,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 493,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.71412037037037E-09,
          "TotalHours": 1.3713888888888888E-07,
          "TotalMilliseconds": 0.4937,
          "TotalMicroseconds": 493.7,
          "TotalNanoseconds": 493700.0,
          "TotalMinutes": 8.228333333333334E-06,
          "TotalSeconds": 0.0004937
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 15557,
            "Length": 737,
            "StartLine": 274,
            "StartColumn": 130,
            "EndLine": 292,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "44aaf202-544b-4c39-aad9-b28dfefcbd71",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9250275-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4937,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 493,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.71412037037037E-09,
          "TotalHours": 1.3713888888888888E-07,
          "TotalMilliseconds": 0.4937,
          "TotalMicroseconds": 493.7,
          "TotalNanoseconds": 493700.0,
          "TotalMinutes": 8.228333333333334E-06,
          "TotalSeconds": 0.0004937
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 13193,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 319,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5269675925925926E-08,
          "TotalHours": 3.664722222222222E-07,
          "TotalMilliseconds": 1.3193,
          "TotalMicroseconds": 1319.3,
          "TotalNanoseconds": 1319300.0,
          "TotalMinutes": 2.1988333333333334E-05,
          "TotalSeconds": 0.0013193
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 16436,
            "Length": 311,
            "StartLine": 294,
            "StartColumn": 127,
            "EndLine": 300,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0d58a478-dc65-475f-987f-b4a95016c607",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 294,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9255164-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 13193,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 319,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5269675925925926E-08,
          "TotalHours": 3.664722222222222E-07,
          "TotalMilliseconds": 1.3193,
          "TotalMicroseconds": 1319.3,
          "TotalNanoseconds": 1319300.0,
          "TotalMinutes": 2.1988333333333334E-05,
          "TotalSeconds": 0.0013193
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5542,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4143518518518515E-09,
          "TotalHours": 1.5394444444444445E-07,
          "TotalMilliseconds": 0.5542,
          "TotalMicroseconds": 554.2,
          "TotalNanoseconds": 554200.0,
          "TotalMinutes": 9.236666666666667E-06,
          "TotalSeconds": 0.0005542
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17184,
            "Length": 665,
            "StartLine": 310,
            "StartColumn": 125,
            "EndLine": 330,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5a8916f8-469b-4f72-8821-eb245ac91174",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 415481,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 548,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.80880787037037E-07,
            "TotalHours": 1.1541138888888888E-05,
            "TotalMilliseconds": 41.5481,
            "TotalMicroseconds": 41548.1,
            "TotalNanoseconds": 41548100.0,
            "TotalMinutes": 0.0006924683333333334,
            "TotalSeconds": 0.0415481
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ee2ae517-f8c9-4c80-84aa-cf3466addd06",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9410188-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 412358,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 235,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.772662037037037E-07,
            "TotalHours": 1.145438888888889E-05,
            "TotalMilliseconds": 41.2358,
            "TotalMicroseconds": 41235.8,
            "TotalNanoseconds": 41235800.0,
            "TotalMinutes": 0.0006872633333333333,
            "TotalSeconds": 0.0412358
          },
          "UserDuration": {
            "Ticks": 3123,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 312,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6145833333333334E-09,
            "TotalHours": 8.675E-08,
            "TotalMilliseconds": 0.3123,
            "TotalMicroseconds": 312.3,
            "TotalNanoseconds": 312300.0,
            "TotalMinutes": 5.205E-06,
            "TotalSeconds": 0.0003123
          },
          "OwnDuration": {
            "Ticks": 405034,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 40,
            "Microseconds": 503,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.6878935185185186E-07,
            "TotalHours": 1.1250944444444445E-05,
            "TotalMilliseconds": 40.5034,
            "TotalMicroseconds": 40503.4,
            "TotalNanoseconds": 40503400.0,
            "TotalMinutes": 0.0006750566666666667,
            "TotalSeconds": 0.0405034
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b8d691f8-4fbb-40a7-91bc-1b7494f5efc7",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 303,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 310,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9418535-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5542,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4143518518518515E-09,
          "TotalHours": 1.5394444444444445E-07,
          "TotalMilliseconds": 0.5542,
          "TotalMicroseconds": 554.2,
          "TotalNanoseconds": 554200.0,
          "TotalMinutes": 9.236666666666667E-06,
          "TotalSeconds": 0.0005542
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4905,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 490,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.677083333333333E-09,
          "TotalHours": 1.3625E-07,
          "TotalMilliseconds": 0.4905,
          "TotalMicroseconds": 490.5,
          "TotalNanoseconds": 490500.0,
          "TotalMinutes": 8.175E-06,
          "TotalSeconds": 0.0004905
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17977,
            "Length": 589,
            "StartLine": 332,
            "StartColumn": 113,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d1638e8e-3530-4845-979e-07f951a38563",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 415481,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 548,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.80880787037037E-07,
            "TotalHours": 1.1541138888888888E-05,
            "TotalMilliseconds": 41.5481,
            "TotalMicroseconds": 41548.1,
            "TotalNanoseconds": 41548100.0,
            "TotalMinutes": 0.0006924683333333334,
            "TotalSeconds": 0.0415481
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ee2ae517-f8c9-4c80-84aa-cf3466addd06",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9410188-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 412358,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 235,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.772662037037037E-07,
            "TotalHours": 1.145438888888889E-05,
            "TotalMilliseconds": 41.2358,
            "TotalMicroseconds": 41235.8,
            "TotalNanoseconds": 41235800.0,
            "TotalMinutes": 0.0006872633333333333,
            "TotalSeconds": 0.0412358
          },
          "UserDuration": {
            "Ticks": 3123,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 312,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6145833333333334E-09,
            "TotalHours": 8.675E-08,
            "TotalMilliseconds": 0.3123,
            "TotalMicroseconds": 312.3,
            "TotalNanoseconds": 312300.0,
            "TotalMinutes": 5.205E-06,
            "TotalSeconds": 0.0003123
          },
          "OwnDuration": {
            "Ticks": 405034,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 40,
            "Microseconds": 503,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.6878935185185186E-07,
            "TotalHours": 1.1250944444444445E-05,
            "TotalMilliseconds": 40.5034,
            "TotalMicroseconds": 40503.4,
            "TotalNanoseconds": 40503400.0,
            "TotalMinutes": 0.0006750566666666667,
            "TotalSeconds": 0.0405034
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b8d691f8-4fbb-40a7-91bc-1b7494f5efc7",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 303,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 332,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.942425-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4905,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 490,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.677083333333333E-09,
          "TotalHours": 1.3625E-07,
          "TotalMilliseconds": 0.4905,
          "TotalMicroseconds": 490.5,
          "TotalNanoseconds": 490500.0,
          "TotalMinutes": 8.175E-06,
          "TotalSeconds": 0.0004905
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.91087962962963E-09,
          "TotalHours": 1.1786111111111111E-07,
          "TotalMilliseconds": 0.4243,
          "TotalMicroseconds": 424.3,
          "TotalNanoseconds": 424300.0,
          "TotalMinutes": 7.071666666666667E-06,
          "TotalSeconds": 0.0004243
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19000,
            "Length": 475,
            "StartLine": 357,
            "StartColumn": 125,
            "EndLine": 369,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "eb1bc059-1436-4f6a-a3f1-218fc7046377",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 478832,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 883,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.542037037037037E-07,
            "TotalHours": 1.330088888888889E-05,
            "TotalMilliseconds": 47.8832,
            "TotalMicroseconds": 47883.2,
            "TotalNanoseconds": 47883200.0,
            "TotalMinutes": 0.0007980533333333333,
            "TotalSeconds": 0.0478832
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a50dca85-9931-4740-9da0-0848a90b48b1",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9467305-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 474313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 431,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.489733796296296E-07,
            "TotalHours": 1.3175361111111111E-05,
            "TotalMilliseconds": 47.4313,
            "TotalMicroseconds": 47431.3,
            "TotalNanoseconds": 47431300.0,
            "TotalMinutes": 0.0007905216666666666,
            "TotalSeconds": 0.0474313
          },
          "UserDuration": {
            "Ticks": 4519,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 451,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.230324074074074E-09,
            "TotalHours": 1.2552777777777778E-07,
            "TotalMilliseconds": 0.4519,
            "TotalMicroseconds": 451.9,
            "TotalNanoseconds": 451900.0,
            "TotalMinutes": 7.531666666666667E-06,
            "TotalSeconds": 0.0004519
          },
          "OwnDuration": {
            "Ticks": 470573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 57,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.446446759259259E-07,
            "TotalHours": 1.3071472222222223E-05,
            "TotalMilliseconds": 47.0573,
            "TotalMicroseconds": 47057.3,
            "TotalNanoseconds": 47057300.0,
            "TotalMinutes": 0.0007842883333333333,
            "TotalSeconds": 0.0470573
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ed4ce64-c7fc-4c74-9055-4236be237491",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 350,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 357,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9474643-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.91087962962963E-09,
          "TotalHours": 1.1786111111111111E-07,
          "TotalMilliseconds": 0.4243,
          "TotalMicroseconds": 424.3,
          "TotalNanoseconds": 424300.0,
          "TotalMinutes": 7.071666666666667E-06,
          "TotalSeconds": 0.0004243
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4016,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 401,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.648148148148148E-09,
          "TotalHours": 1.1155555555555555E-07,
          "TotalMilliseconds": 0.4016,
          "TotalMicroseconds": 401.6,
          "TotalNanoseconds": 401600.0,
          "TotalMinutes": 6.693333333333333E-06,
          "TotalSeconds": 0.0004016
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19602,
            "Length": 563,
            "StartLine": 371,
            "StartColumn": 112,
            "EndLine": 383,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d5c7be41-5f62-48d7-94c3-c78c8aab0ba6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 478832,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 883,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.542037037037037E-07,
            "TotalHours": 1.330088888888889E-05,
            "TotalMilliseconds": 47.8832,
            "TotalMicroseconds": 47883.2,
            "TotalNanoseconds": 47883200.0,
            "TotalMinutes": 0.0007980533333333333,
            "TotalSeconds": 0.0478832
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a50dca85-9931-4740-9da0-0848a90b48b1",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9467305-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 474313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 431,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.489733796296296E-07,
            "TotalHours": 1.3175361111111111E-05,
            "TotalMilliseconds": 47.4313,
            "TotalMicroseconds": 47431.3,
            "TotalNanoseconds": 47431300.0,
            "TotalMinutes": 0.0007905216666666666,
            "TotalSeconds": 0.0474313
          },
          "UserDuration": {
            "Ticks": 4519,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 451,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.230324074074074E-09,
            "TotalHours": 1.2552777777777778E-07,
            "TotalMilliseconds": 0.4519,
            "TotalMicroseconds": 451.9,
            "TotalNanoseconds": 451900.0,
            "TotalMinutes": 7.531666666666667E-06,
            "TotalSeconds": 0.0004519
          },
          "OwnDuration": {
            "Ticks": 470573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 57,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.446446759259259E-07,
            "TotalHours": 1.3071472222222223E-05,
            "TotalMilliseconds": 47.0573,
            "TotalMicroseconds": 47057.3,
            "TotalNanoseconds": 47057300.0,
            "TotalMinutes": 0.0007842883333333333,
            "TotalSeconds": 0.0470573
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ed4ce64-c7fc-4c74-9055-4236be237491",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 350,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 371,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9479124-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4016,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 401,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.648148148148148E-09,
          "TotalHours": 1.1155555555555555E-07,
          "TotalMilliseconds": 0.4016,
          "TotalMicroseconds": 401.6,
          "TotalNanoseconds": 401600.0,
          "TotalMinutes": 6.693333333333333E-06,
          "TotalSeconds": 0.0004016
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5548,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4212962962962965E-09,
          "TotalHours": 1.541111111111111E-07,
          "TotalMilliseconds": 0.5548,
          "TotalMicroseconds": 554.8,
          "TotalNanoseconds": 554800.0,
          "TotalMinutes": 9.246666666666667E-06,
          "TotalSeconds": 0.0005548
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22453,
            "Length": 222,
            "StartLine": 432,
            "StartColumn": 88,
            "EndLine": 437,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "39f0ae86-4c79-46f4-bcbf-1be33effb0c7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 432,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9586276-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5548,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4212962962962965E-09,
          "TotalHours": 1.541111111111111E-07,
          "TotalMilliseconds": 0.5548,
          "TotalMicroseconds": 554.8,
          "TotalNanoseconds": 554800.0,
          "TotalMinutes": 9.246666666666667E-06,
          "TotalSeconds": 0.0005548
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4223,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 422,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.887731481481482E-09,
          "TotalHours": 1.1730555555555556E-07,
          "TotalMilliseconds": 0.4223,
          "TotalMicroseconds": 422.3,
          "TotalNanoseconds": 422300.0,
          "TotalMinutes": 7.0383333333333334E-06,
          "TotalSeconds": 0.0004223
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22774,
            "Length": 279,
            "StartLine": 439,
            "StartColumn": 84,
            "EndLine": 445,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "128fb403-5c51-43fb-9471-4f4b146b2873",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 439,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9592081-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4223,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 422,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.887731481481482E-09,
          "TotalHours": 1.1730555555555556E-07,
          "TotalMilliseconds": 0.4223,
          "TotalMicroseconds": 422.3,
          "TotalNanoseconds": 422300.0,
          "TotalMinutes": 7.0383333333333334E-06,
          "TotalSeconds": 0.0004223
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4884,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 488,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.652777777777778E-09,
          "TotalHours": 1.3566666666666668E-07,
          "TotalMilliseconds": 0.4884,
          "TotalMicroseconds": 488.4,
          "TotalNanoseconds": 488400.0,
          "TotalMinutes": 8.14E-06,
          "TotalSeconds": 0.0004884
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23167,
            "Length": 545,
            "StartLine": 447,
            "StartColumn": 99,
            "EndLine": 456,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "60c427f0-e90a-4134-9367-8064c9a8e2bb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 447,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9596584-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4884,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 488,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.652777777777778E-09,
          "TotalHours": 1.3566666666666668E-07,
          "TotalMilliseconds": 0.4884,
          "TotalMicroseconds": 488.4,
          "TotalNanoseconds": 488400.0,
          "TotalMinutes": 8.14E-06,
          "TotalSeconds": 0.0004884
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5807,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 580,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.721064814814815E-09,
          "TotalHours": 1.6130555555555555E-07,
          "TotalMilliseconds": 0.5807,
          "TotalMicroseconds": 580.7,
          "TotalNanoseconds": 580700.0,
          "TotalMinutes": 9.678333333333334E-06,
          "TotalSeconds": 0.0005807
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24147,
            "Length": 427,
            "StartLine": 466,
            "StartColumn": 127,
            "EndLine": 473,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "18ff11e0-2a67-4c88-b517-61a9e4f66683",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 466,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.965111-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5807,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 580,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.721064814814815E-09,
          "TotalHours": 1.6130555555555555E-07,
          "TotalMilliseconds": 0.5807,
          "TotalMicroseconds": 580.7,
          "TotalNanoseconds": 580700.0,
          "TotalMinutes": 9.678333333333334E-06,
          "TotalSeconds": 0.0005807
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 10984,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 98,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.2712962962962962E-08,
          "TotalHours": 3.051111111111111E-07,
          "TotalMilliseconds": 1.0984,
          "TotalMicroseconds": 1098.4,
          "TotalNanoseconds": 1098400.0,
          "TotalMinutes": 1.8306666666666665E-05,
          "TotalSeconds": 0.0010984
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24714,
            "Length": 411,
            "StartLine": 475,
            "StartColumn": 125,
            "EndLine": 482,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e6758b82-fb59-420c-80d2-4d98b43ff458",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 475,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9657989-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 10984,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 98,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.2712962962962962E-08,
          "TotalHours": 3.051111111111111E-07,
          "TotalMilliseconds": 1.0984,
          "TotalMicroseconds": 1098.4,
          "TotalNanoseconds": 1098400.0,
          "TotalMinutes": 1.8306666666666665E-05,
          "TotalSeconds": 0.0010984
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5210,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 521,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.0300925925925925E-09,
          "TotalHours": 1.4472222222222222E-07,
          "TotalMilliseconds": 0.521,
          "TotalMicroseconds": 521.0,
          "TotalNanoseconds": 521000.0,
          "TotalMinutes": 8.683333333333334E-06,
          "TotalSeconds": 0.000521
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25259,
            "Length": 542,
            "StartLine": 484,
            "StartColumn": 119,
            "EndLine": 494,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "36173d58-d893-446a-a8fa-a7d721956dd8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 484,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9668818-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5210,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 521,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.0300925925925925E-09,
          "TotalHours": 1.4472222222222222E-07,
          "TotalMilliseconds": 0.521,
          "TotalMicroseconds": 521.0,
          "TotalNanoseconds": 521000.0,
          "TotalMinutes": 8.683333333333334E-06,
          "TotalSeconds": 0.000521
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 94144,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 414,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0896296296296296E-07,
          "TotalHours": 2.615111111111111E-06,
          "TotalMilliseconds": 9.4144,
          "TotalMicroseconds": 9414.4,
          "TotalNanoseconds": 9414400.0,
          "TotalMinutes": 0.00015690666666666667,
          "TotalSeconds": 0.0094144
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26219,
            "Length": 485,
            "StartLine": 504,
            "StartColumn": 116,
            "EndLine": 514,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4eca800a-23b2-4bda-a627-97688878a3ee",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 504,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9726285-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 94144,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 414,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0896296296296296E-07,
          "TotalHours": 2.615111111111111E-06,
          "TotalMilliseconds": 9.4144,
          "TotalMicroseconds": 9414.4,
          "TotalNanoseconds": 9414400.0,
          "TotalMinutes": 0.00015690666666666667,
          "TotalSeconds": 0.0094144
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4824,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 482,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.583333333333334E-09,
          "TotalHours": 1.34E-07,
          "TotalMilliseconds": 0.4824,
          "TotalMicroseconds": 482.4,
          "TotalNanoseconds": 482400.0,
          "TotalMinutes": 8.04E-06,
          "TotalSeconds": 0.0004824
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26828,
            "Length": 522,
            "StartLine": 516,
            "StartColumn": 109,
            "EndLine": 527,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8025e746-b8c0-40a9-b465-98e0b5945ddb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 516,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.982073-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4824,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 482,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.583333333333334E-09,
          "TotalHours": 1.34E-07,
          "TotalMilliseconds": 0.4824,
          "TotalMicroseconds": 482.4,
          "TotalNanoseconds": 482400.0,
          "TotalMinutes": 8.04E-06,
          "TotalSeconds": 0.0004824
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 383,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4421296296296295E-09,
          "TotalHours": 1.0661111111111112E-07,
          "TotalMilliseconds": 0.3838,
          "TotalMicroseconds": 383.8,
          "TotalNanoseconds": 383800.0,
          "TotalMinutes": 6.396666666666667E-06,
          "TotalSeconds": 0.0003838
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27477,
            "Length": 402,
            "StartLine": 529,
            "StartColumn": 112,
            "EndLine": 537,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "910b14c5-6820-4c65-b236-fbce5a55284a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 529,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9825635-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 383,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4421296296296295E-09,
          "TotalHours": 1.0661111111111112E-07,
          "TotalMilliseconds": 0.3838,
          "TotalMicroseconds": 383.8,
          "TotalNanoseconds": 383800.0,
          "TotalMinutes": 6.396666666666667E-06,
          "TotalSeconds": 0.0003838
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5111,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 511,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.915509259259259E-09,
          "TotalHours": 1.4197222222222222E-07,
          "TotalMilliseconds": 0.5111,
          "TotalMicroseconds": 511.1,
          "TotalNanoseconds": 511100.0,
          "TotalMinutes": 8.518333333333333E-06,
          "TotalSeconds": 0.0005111
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30085,
            "Length": 523,
            "StartLine": 580,
            "StartColumn": 140,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "476668fc-20c8-485a-b230-669ce7ce6e7b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 580,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9942815-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5111,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 511,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.915509259259259E-09,
          "TotalHours": 1.4197222222222222E-07,
          "TotalMilliseconds": 0.5111,
          "TotalMicroseconds": 511.1,
          "TotalNanoseconds": 511100.0,
          "TotalMinutes": 8.518333333333333E-06,
          "TotalSeconds": 0.0005111
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3975,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 397,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.6006944444444444E-09,
          "TotalHours": 1.1041666666666667E-07,
          "TotalMilliseconds": 0.3975,
          "TotalMicroseconds": 397.5,
          "TotalNanoseconds": 397500.0,
          "TotalMinutes": 6.625E-06,
          "TotalSeconds": 0.0003975
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30759,
            "Length": 508,
            "StartLine": 590,
            "StartColumn": 136,
            "EndLine": 598,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "3986a2ae-d134-4a0f-aa56-7e710a19331b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 590,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9948499-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3975,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 397,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.6006944444444444E-09,
          "TotalHours": 1.1041666666666667E-07,
          "TotalMilliseconds": 0.3975,
          "TotalMicroseconds": 397.5,
          "TotalNanoseconds": 397500.0,
          "TotalMinutes": 6.625E-06,
          "TotalSeconds": 0.0003975
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3401,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 340,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.936342592592592E-09,
          "TotalHours": 9.447222222222222E-08,
          "TotalMilliseconds": 0.3401,
          "TotalMicroseconds": 340.1,
          "TotalNanoseconds": 340100.0,
          "TotalMinutes": 5.668333333333333E-06,
          "TotalSeconds": 0.0003401
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 31414,
            "Length": 523,
            "StartLine": 600,
            "StartColumn": 132,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "35f66032-ebab-4bf5-9414-2bd7b62119e8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 600,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9952531-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3401,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 340,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.936342592592592E-09,
          "TotalHours": 9.447222222222222E-08,
          "TotalMilliseconds": 0.3401,
          "TotalMicroseconds": 340.1,
          "TotalNanoseconds": 340100.0,
          "TotalMinutes": 5.668333333333333E-06,
          "TotalSeconds": 0.0003401
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3983,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 398,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.609953703703703E-09,
          "TotalHours": 1.1063888888888889E-07,
          "TotalMilliseconds": 0.3983,
          "TotalMicroseconds": 398.3,
          "TotalNanoseconds": 398300.0,
          "TotalMinutes": 6.638333333333333E-06,
          "TotalSeconds": 0.0003983
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 32092,
            "Length": 568,
            "StartLine": 610,
            "StartColumn": 140,
            "EndLine": 619,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b065716b-a8b1-4aaf-9775-9367d100edd2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9956449-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3983,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 398,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.609953703703703E-09,
          "TotalHours": 1.1063888888888889E-07,
          "TotalMilliseconds": 0.3983,
          "TotalMicroseconds": 398.3,
          "TotalNanoseconds": 398300.0,
          "TotalMinutes": 6.638333333333333E-06,
          "TotalSeconds": 0.0003983
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3322,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 332,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8449074074074075E-09,
          "TotalHours": 9.227777777777777E-08,
          "TotalMilliseconds": 0.3322,
          "TotalMicroseconds": 332.2,
          "TotalNanoseconds": 332200.0,
          "TotalMinutes": 5.5366666666666665E-06,
          "TotalSeconds": 0.0003322
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 32808,
            "Length": 581,
            "StartLine": 621,
            "StartColumn": 133,
            "EndLine": 629,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "05391790-a57b-4fb1-87d5-515a414e260b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 621,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9960285-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3322,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 332,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8449074074074075E-09,
          "TotalHours": 9.227777777777777E-08,
          "TotalMilliseconds": 0.3322,
          "TotalMicroseconds": 332.2,
          "TotalNanoseconds": 332200.0,
          "TotalMinutes": 5.5366666666666665E-06,
          "TotalSeconds": 0.0003322
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4864,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 486,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.629629629629629E-09,
          "TotalHours": 1.351111111111111E-07,
          "TotalMilliseconds": 0.4864,
          "TotalMicroseconds": 486.4,
          "TotalNanoseconds": 486400.0,
          "TotalMinutes": 8.106666666666666E-06,
          "TotalSeconds": 0.0004864
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 33842,
            "Length": 235,
            "StartLine": 639,
            "StartColumn": 131,
            "EndLine": 644,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7c324185-fc44-4fbf-8164-cf04d0eb54d4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 130709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.512835648148148E-07,
            "TotalHours": 3.6308055555555557E-06,
            "TotalMilliseconds": 13.0709,
            "TotalMicroseconds": 13070.9,
            "TotalNanoseconds": 13070900.0,
            "TotalMinutes": 0.00021784833333333333,
            "TotalSeconds": 0.0130709
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8524288e-3011-4e61-a45e-815b45d02f4e",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0007111-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 127964,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 796,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.481064814814815E-07,
            "TotalHours": 3.5545555555555554E-06,
            "TotalMilliseconds": 12.7964,
            "TotalMicroseconds": 12796.4,
            "TotalNanoseconds": 12796400.0,
            "TotalMinutes": 0.00021327333333333334,
            "TotalSeconds": 0.0127964
          },
          "UserDuration": {
            "Ticks": 2745,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 274,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1770833333333332E-09,
            "TotalHours": 7.625E-08,
            "TotalMilliseconds": 0.2745,
            "TotalMicroseconds": 274.5,
            "TotalNanoseconds": 274500.0,
            "TotalMinutes": 4.575E-06,
            "TotalSeconds": 0.0002745
          },
          "OwnDuration": {
            "Ticks": 121448,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 144,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.405648148148148E-07,
            "TotalHours": 3.3735555555555554E-06,
            "TotalMilliseconds": 12.1448,
            "TotalMicroseconds": 12144.8,
            "TotalNanoseconds": 12144800.0,
            "TotalMinutes": 0.00020241333333333332,
            "TotalSeconds": 0.0121448
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e826bcfa-69d1-4392-a697-94592dbaf8bd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 632,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 639,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0014673-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4864,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 486,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.629629629629629E-09,
          "TotalHours": 1.351111111111111E-07,
          "TotalMilliseconds": 0.4864,
          "TotalMicroseconds": 486.4,
          "TotalNanoseconds": 486400.0,
          "TotalMinutes": 8.106666666666666E-06,
          "TotalSeconds": 0.0004864
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4397,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 439,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.08912037037037E-09,
          "TotalHours": 1.221388888888889E-07,
          "TotalMilliseconds": 0.4397,
          "TotalMicroseconds": 439.7,
          "TotalNanoseconds": 439700.0,
          "TotalMinutes": 7.328333333333333E-06,
          "TotalSeconds": 0.0004397
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 34210,
            "Length": 710,
            "StartLine": 646,
            "StartColumn": 118,
            "EndLine": 661,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "35d1db94-55e8-44bb-97eb-e7de381a7082",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 130709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.512835648148148E-07,
            "TotalHours": 3.6308055555555557E-06,
            "TotalMilliseconds": 13.0709,
            "TotalMicroseconds": 13070.9,
            "TotalNanoseconds": 13070900.0,
            "TotalMinutes": 0.00021784833333333333,
            "TotalSeconds": 0.0130709
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8524288e-3011-4e61-a45e-815b45d02f4e",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0007111-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 127964,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 796,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.481064814814815E-07,
            "TotalHours": 3.5545555555555554E-06,
            "TotalMilliseconds": 12.7964,
            "TotalMicroseconds": 12796.4,
            "TotalNanoseconds": 12796400.0,
            "TotalMinutes": 0.00021327333333333334,
            "TotalSeconds": 0.0127964
          },
          "UserDuration": {
            "Ticks": 2745,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 274,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1770833333333332E-09,
            "TotalHours": 7.625E-08,
            "TotalMilliseconds": 0.2745,
            "TotalMicroseconds": 274.5,
            "TotalNanoseconds": 274500.0,
            "TotalMinutes": 4.575E-06,
            "TotalSeconds": 0.0002745
          },
          "OwnDuration": {
            "Ticks": 121448,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 144,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.405648148148148E-07,
            "TotalHours": 3.3735555555555554E-06,
            "TotalMilliseconds": 12.1448,
            "TotalMicroseconds": 12144.8,
            "TotalNanoseconds": 12144800.0,
            "TotalMinutes": 0.00020241333333333332,
            "TotalSeconds": 0.0121448
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e826bcfa-69d1-4392-a697-94592dbaf8bd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 632,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 646,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0019778-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4397,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 439,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.08912037037037E-09,
          "TotalHours": 1.221388888888889E-07,
          "TotalMilliseconds": 0.4397,
          "TotalMicroseconds": 439.7,
          "TotalNanoseconds": 439700.0,
          "TotalMinutes": 7.328333333333333E-06,
          "TotalSeconds": 0.0004397
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4366,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 436,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.053240740740741E-09,
          "TotalHours": 1.2127777777777778E-07,
          "TotalMilliseconds": 0.4366,
          "TotalMicroseconds": 436.6,
          "TotalNanoseconds": 436600.0,
          "TotalMinutes": 7.276666666666667E-06,
          "TotalSeconds": 0.0004366
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 37913,
            "Length": 1022,
            "StartLine": 717,
            "StartColumn": 122,
            "EndLine": 739,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8eae8944-f904-439e-9d1b-c5e6fe6dff6c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 56233,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 623,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.508449074074073E-08,
            "TotalHours": 1.5620277777777777E-06,
            "TotalMilliseconds": 5.6233,
            "TotalMicroseconds": 5623.3,
            "TotalNanoseconds": 5623300.0,
            "TotalMinutes": 9.372166666666666E-05,
            "TotalSeconds": 0.0056233
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ef197a79-1032-41c0-bf30-3f93bd5367bf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0855141-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 54965,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 496,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.361689814814815E-08,
            "TotalHours": 1.5268055555555556E-06,
            "TotalMilliseconds": 5.4965,
            "TotalMicroseconds": 5496.5,
            "TotalNanoseconds": 5496500.0,
            "TotalMinutes": 9.160833333333333E-05,
            "TotalSeconds": 0.0054965
          },
          "UserDuration": {
            "Ticks": 1268,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 126,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4675925925925925E-09,
            "TotalHours": 3.5222222222222224E-08,
            "TotalMilliseconds": 0.1268,
            "TotalMicroseconds": 126.8,
            "TotalNanoseconds": 126800.0,
            "TotalMinutes": 2.113333333333333E-06,
            "TotalSeconds": 0.0001268
          },
          "OwnDuration": {
            "Ticks": 48534,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 853,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.617361111111111E-08,
            "TotalHours": 1.3481666666666667E-06,
            "TotalMilliseconds": 4.8534,
            "TotalMicroseconds": 4853.4,
            "TotalNanoseconds": 4853400.0,
            "TotalMinutes": 8.089E-05,
            "TotalSeconds": 0.0048534
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "74c328bd-0131-448a-b565-7a8913676f0b",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 710,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 717,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0863002-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4366,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 436,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.053240740740741E-09,
          "TotalHours": 1.2127777777777778E-07,
          "TotalMilliseconds": 0.4366,
          "TotalMicroseconds": 436.6,
          "TotalNanoseconds": 436600.0,
          "TotalMinutes": 7.276666666666667E-06,
          "TotalSeconds": 0.0004366
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3333,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8576388888888886E-09,
          "TotalHours": 9.258333333333333E-08,
          "TotalMilliseconds": 0.3333,
          "TotalMicroseconds": 333.3,
          "TotalNanoseconds": 333300.0,
          "TotalMinutes": 5.555E-06,
          "TotalSeconds": 0.0003333
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39071,
            "Length": 781,
            "StartLine": 741,
            "StartColumn": 121,
            "EndLine": 754,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5f8f728e-defc-4583-9d23-866b1a533440",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 56233,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 623,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.508449074074073E-08,
            "TotalHours": 1.5620277777777777E-06,
            "TotalMilliseconds": 5.6233,
            "TotalMicroseconds": 5623.3,
            "TotalNanoseconds": 5623300.0,
            "TotalMinutes": 9.372166666666666E-05,
            "TotalSeconds": 0.0056233
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ef197a79-1032-41c0-bf30-3f93bd5367bf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0855141-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 54965,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 496,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.361689814814815E-08,
            "TotalHours": 1.5268055555555556E-06,
            "TotalMilliseconds": 5.4965,
            "TotalMicroseconds": 5496.5,
            "TotalNanoseconds": 5496500.0,
            "TotalMinutes": 9.160833333333333E-05,
            "TotalSeconds": 0.0054965
          },
          "UserDuration": {
            "Ticks": 1268,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 126,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4675925925925925E-09,
            "TotalHours": 3.5222222222222224E-08,
            "TotalMilliseconds": 0.1268,
            "TotalMicroseconds": 126.8,
            "TotalNanoseconds": 126800.0,
            "TotalMinutes": 2.113333333333333E-06,
            "TotalSeconds": 0.0001268
          },
          "OwnDuration": {
            "Ticks": 48534,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 853,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.617361111111111E-08,
            "TotalHours": 1.3481666666666667E-06,
            "TotalMilliseconds": 4.8534,
            "TotalMicroseconds": 4853.4,
            "TotalNanoseconds": 4853400.0,
            "TotalMinutes": 8.089E-05,
            "TotalSeconds": 0.0048534
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "74c328bd-0131-448a-b565-7a8913676f0b",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 710,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 741,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0867556-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3333,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8576388888888886E-09,
          "TotalHours": 9.258333333333333E-08,
          "TotalMilliseconds": 0.3333,
          "TotalMicroseconds": 333.3,
          "TotalNanoseconds": 333300.0,
          "TotalMinutes": 5.555E-06,
          "TotalSeconds": 0.0003333
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3805,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 380,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4039351851851854E-09,
          "TotalHours": 1.0569444444444445E-07,
          "TotalMilliseconds": 0.3805,
          "TotalMicroseconds": 380.5,
          "TotalNanoseconds": 380500.0,
          "TotalMinutes": 6.341666666666666E-06,
          "TotalSeconds": 0.0003805
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 42371,
            "Length": 725,
            "StartLine": 811,
            "StartColumn": 140,
            "EndLine": 827,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d663f81e-1529-4022-a553-7b07a6bcc563",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 950362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 95,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0999560185185186E-06,
            "TotalHours": 2.6398944444444445E-05,
            "TotalMilliseconds": 95.0362,
            "TotalMicroseconds": 95036.2,
            "TotalNanoseconds": 95036200.0,
            "TotalMinutes": 0.0015839366666666667,
            "TotalSeconds": 0.0950362
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a2a35f3-7b49-49d9-9a02-8d580a469894",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0911283-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 147115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 711,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7027199074074074E-07,
            "TotalHours": 4.086527777777778E-06,
            "TotalMilliseconds": 14.7115,
            "TotalMicroseconds": 14711.5,
            "TotalNanoseconds": 14711500.0,
            "TotalMinutes": 0.00024519166666666666,
            "TotalSeconds": 0.0147115
          },
          "UserDuration": {
            "Ticks": 803247,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 324,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.296840277777778E-07,
            "TotalHours": 2.2312416666666667E-05,
            "TotalMilliseconds": 80.3247,
            "TotalMicroseconds": 80324.7,
            "TotalNanoseconds": 80324700.0,
            "TotalMinutes": 0.001338745,
            "TotalSeconds": 0.0803247
          },
          "OwnDuration": {
            "Ticks": 502431,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 50,
            "Microseconds": 243,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.815173611111111E-07,
            "TotalHours": 1.3956416666666667E-05,
            "TotalMilliseconds": 50.2431,
            "TotalMicroseconds": 50243.1,
            "TotalNanoseconds": 50243100.0,
            "TotalMinutes": 0.000837385,
            "TotalSeconds": 0.0502431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6519f860-8fc2-42bc-a828-ed3633c76f23",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 757,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 811,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1761579-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3805,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 380,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4039351851851854E-09,
          "TotalHours": 1.0569444444444445E-07,
          "TotalMilliseconds": 0.3805,
          "TotalMicroseconds": 380.5,
          "TotalNanoseconds": 380500.0,
          "TotalMinutes": 6.341666666666666E-06,
          "TotalSeconds": 0.0003805
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5546,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.418981481481482E-09,
          "TotalHours": 1.5405555555555556E-07,
          "TotalMilliseconds": 0.5546,
          "TotalMicroseconds": 554.6,
          "TotalNanoseconds": 554600.0,
          "TotalMinutes": 9.243333333333333E-06,
          "TotalSeconds": 0.0005546
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 43548,
            "Length": 1070,
            "StartLine": 837,
            "StartColumn": 130,
            "EndLine": 857,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d67fcc72-774d-4754-9fce-c35e4a5ee562",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 998212,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 99,
            "Microseconds": 821,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.155337962962963E-06,
            "TotalHours": 2.7728111111111112E-05,
            "TotalMilliseconds": 99.8212,
            "TotalMicroseconds": 99821.2,
            "TotalNanoseconds": 99821200.0,
            "TotalMinutes": 0.0016636866666666667,
            "TotalSeconds": 0.0998212
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2abf8d6f-a99d-4fcf-b666-1588eea4f992",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.1805412-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 193680,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 368,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2416666666666666E-07,
            "TotalHours": 5.38E-06,
            "TotalMilliseconds": 19.368,
            "TotalMicroseconds": 19368.0,
            "TotalNanoseconds": 19368000.0,
            "TotalMinutes": 0.0003228,
            "TotalSeconds": 0.019368
          },
          "UserDuration": {
            "Ticks": 804532,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 453,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.311712962962963E-07,
            "TotalHours": 2.2348111111111113E-05,
            "TotalMilliseconds": 80.4532,
            "TotalMicroseconds": 80453.2,
            "TotalNanoseconds": 80453200.0,
            "TotalMinutes": 0.0013408866666666667,
            "TotalSeconds": 0.0804532
          },
          "OwnDuration": {
            "Ticks": 992666,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 99,
            "Microseconds": 266,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1489189814814815E-06,
            "TotalHours": 2.7574055555555555E-05,
            "TotalMilliseconds": 99.2666,
            "TotalMicroseconds": 99266.6,
            "TotalNanoseconds": 99266600.0,
            "TotalMinutes": 0.0016544433333333334,
            "TotalSeconds": 0.0992666
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "56e71b50-d1d8-4bff-bddb-1d0028857a41",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 830,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 837,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1813351-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5546,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.418981481481482E-09,
          "TotalHours": 1.5405555555555556E-07,
          "TotalMilliseconds": 0.5546,
          "TotalMicroseconds": 554.6,
          "TotalNanoseconds": 554600.0,
          "TotalMinutes": 9.243333333333333E-06,
          "TotalSeconds": 0.0005546
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 159865,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 986,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.8502893518518518E-07,
          "TotalHours": 4.440694444444444E-06,
          "TotalMilliseconds": 15.9865,
          "TotalMicroseconds": 15986.5,
          "TotalNanoseconds": 15986500.0,
          "TotalMinutes": 0.00026644166666666666,
          "TotalSeconds": 0.0159865
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 14793,
            "Length": 619,
            "StartLine": 265,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "df681134-3a3c-416e-9d9a-ebae91fd6173",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 265,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9094197-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 159865,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 986,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.8502893518518518E-07,
          "TotalHours": 4.440694444444444E-06,
          "TotalMilliseconds": 15.9865,
          "TotalMicroseconds": 15986.5,
          "TotalNanoseconds": 15986500.0,
          "TotalMinutes": 0.00026644166666666666,
          "TotalSeconds": 0.0159865
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4937,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 493,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.71412037037037E-09,
          "TotalHours": 1.3713888888888888E-07,
          "TotalMilliseconds": 0.4937,
          "TotalMicroseconds": 493.7,
          "TotalNanoseconds": 493700.0,
          "TotalMinutes": 8.228333333333334E-06,
          "TotalSeconds": 0.0004937
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 15557,
            "Length": 737,
            "StartLine": 274,
            "StartColumn": 130,
            "EndLine": 292,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "44aaf202-544b-4c39-aad9-b28dfefcbd71",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9250275-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4937,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 493,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.71412037037037E-09,
          "TotalHours": 1.3713888888888888E-07,
          "TotalMilliseconds": 0.4937,
          "TotalMicroseconds": 493.7,
          "TotalNanoseconds": 493700.0,
          "TotalMinutes": 8.228333333333334E-06,
          "TotalSeconds": 0.0004937
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 13193,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 319,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5269675925925926E-08,
          "TotalHours": 3.664722222222222E-07,
          "TotalMilliseconds": 1.3193,
          "TotalMicroseconds": 1319.3,
          "TotalNanoseconds": 1319300.0,
          "TotalMinutes": 2.1988333333333334E-05,
          "TotalSeconds": 0.0013193
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 16436,
            "Length": 311,
            "StartLine": 294,
            "StartColumn": 127,
            "EndLine": 300,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0d58a478-dc65-475f-987f-b4a95016c607",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 358357,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 835,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.147650462962963E-07,
            "TotalHours": 9.954361111111111E-06,
            "TotalMilliseconds": 35.8357,
            "TotalMicroseconds": 35835.7,
            "TotalNanoseconds": 35835700.0,
            "TotalMinutes": 0.0005972616666666666,
            "TotalSeconds": 0.0358357
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.905181-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 356728,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 672,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.128796296296296E-07,
            "TotalHours": 9.90911111111111E-06,
            "TotalMilliseconds": 35.6728,
            "TotalMicroseconds": 35672.8,
            "TotalNanoseconds": 35672800.0,
            "TotalMinutes": 0.0005945466666666667,
            "TotalSeconds": 0.0356728
          },
          "UserDuration": {
            "Ticks": 1629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 162,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8854166666666666E-09,
            "TotalHours": 4.525E-08,
            "TotalMilliseconds": 0.1629,
            "TotalMicroseconds": 162.9,
            "TotalNanoseconds": 162900.0,
            "TotalMinutes": 2.715E-06,
            "TotalSeconds": 0.0001629
          },
          "OwnDuration": {
            "Ticks": 180362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0875231481481482E-07,
            "TotalHours": 5.010055555555556E-06,
            "TotalMilliseconds": 18.0362,
            "TotalMicroseconds": 18036.2,
            "TotalNanoseconds": 18036200.0,
            "TotalMinutes": 0.00030060333333333336,
            "TotalSeconds": 0.0180362
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "940acba8-81e5-4aa1-8e7e-0533098678b2",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 263,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 294,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9255164-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 13193,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 319,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5269675925925926E-08,
          "TotalHours": 3.664722222222222E-07,
          "TotalMilliseconds": 1.3193,
          "TotalMicroseconds": 1319.3,
          "TotalNanoseconds": 1319300.0,
          "TotalMinutes": 2.1988333333333334E-05,
          "TotalSeconds": 0.0013193
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5542,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4143518518518515E-09,
          "TotalHours": 1.5394444444444445E-07,
          "TotalMilliseconds": 0.5542,
          "TotalMicroseconds": 554.2,
          "TotalNanoseconds": 554200.0,
          "TotalMinutes": 9.236666666666667E-06,
          "TotalSeconds": 0.0005542
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17184,
            "Length": 665,
            "StartLine": 310,
            "StartColumn": 125,
            "EndLine": 330,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5a8916f8-469b-4f72-8821-eb245ac91174",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 415481,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 548,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.80880787037037E-07,
            "TotalHours": 1.1541138888888888E-05,
            "TotalMilliseconds": 41.5481,
            "TotalMicroseconds": 41548.1,
            "TotalNanoseconds": 41548100.0,
            "TotalMinutes": 0.0006924683333333334,
            "TotalSeconds": 0.0415481
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ee2ae517-f8c9-4c80-84aa-cf3466addd06",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9410188-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 412358,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 235,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.772662037037037E-07,
            "TotalHours": 1.145438888888889E-05,
            "TotalMilliseconds": 41.2358,
            "TotalMicroseconds": 41235.8,
            "TotalNanoseconds": 41235800.0,
            "TotalMinutes": 0.0006872633333333333,
            "TotalSeconds": 0.0412358
          },
          "UserDuration": {
            "Ticks": 3123,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 312,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6145833333333334E-09,
            "TotalHours": 8.675E-08,
            "TotalMilliseconds": 0.3123,
            "TotalMicroseconds": 312.3,
            "TotalNanoseconds": 312300.0,
            "TotalMinutes": 5.205E-06,
            "TotalSeconds": 0.0003123
          },
          "OwnDuration": {
            "Ticks": 405034,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 40,
            "Microseconds": 503,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.6878935185185186E-07,
            "TotalHours": 1.1250944444444445E-05,
            "TotalMilliseconds": 40.5034,
            "TotalMicroseconds": 40503.4,
            "TotalNanoseconds": 40503400.0,
            "TotalMinutes": 0.0006750566666666667,
            "TotalSeconds": 0.0405034
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b8d691f8-4fbb-40a7-91bc-1b7494f5efc7",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 303,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 310,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9418535-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5542,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4143518518518515E-09,
          "TotalHours": 1.5394444444444445E-07,
          "TotalMilliseconds": 0.5542,
          "TotalMicroseconds": 554.2,
          "TotalNanoseconds": 554200.0,
          "TotalMinutes": 9.236666666666667E-06,
          "TotalSeconds": 0.0005542
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4905,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 490,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.677083333333333E-09,
          "TotalHours": 1.3625E-07,
          "TotalMilliseconds": 0.4905,
          "TotalMicroseconds": 490.5,
          "TotalNanoseconds": 490500.0,
          "TotalMinutes": 8.175E-06,
          "TotalSeconds": 0.0004905
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17977,
            "Length": 589,
            "StartLine": 332,
            "StartColumn": 113,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d1638e8e-3530-4845-979e-07f951a38563",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 415481,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 548,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.80880787037037E-07,
            "TotalHours": 1.1541138888888888E-05,
            "TotalMilliseconds": 41.5481,
            "TotalMicroseconds": 41548.1,
            "TotalNanoseconds": 41548100.0,
            "TotalMinutes": 0.0006924683333333334,
            "TotalSeconds": 0.0415481
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ee2ae517-f8c9-4c80-84aa-cf3466addd06",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9410188-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 412358,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 41,
            "Microseconds": 235,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.772662037037037E-07,
            "TotalHours": 1.145438888888889E-05,
            "TotalMilliseconds": 41.2358,
            "TotalMicroseconds": 41235.8,
            "TotalNanoseconds": 41235800.0,
            "TotalMinutes": 0.0006872633333333333,
            "TotalSeconds": 0.0412358
          },
          "UserDuration": {
            "Ticks": 3123,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 312,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6145833333333334E-09,
            "TotalHours": 8.675E-08,
            "TotalMilliseconds": 0.3123,
            "TotalMicroseconds": 312.3,
            "TotalNanoseconds": 312300.0,
            "TotalMinutes": 5.205E-06,
            "TotalSeconds": 0.0003123
          },
          "OwnDuration": {
            "Ticks": 405034,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 40,
            "Microseconds": 503,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.6878935185185186E-07,
            "TotalHours": 1.1250944444444445E-05,
            "TotalMilliseconds": 40.5034,
            "TotalMicroseconds": 40503.4,
            "TotalNanoseconds": 40503400.0,
            "TotalMinutes": 0.0006750566666666667,
            "TotalSeconds": 0.0405034
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b8d691f8-4fbb-40a7-91bc-1b7494f5efc7",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 303,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 332,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.942425-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4905,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 490,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.677083333333333E-09,
          "TotalHours": 1.3625E-07,
          "TotalMilliseconds": 0.4905,
          "TotalMicroseconds": 490.5,
          "TotalNanoseconds": 490500.0,
          "TotalMinutes": 8.175E-06,
          "TotalSeconds": 0.0004905
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.91087962962963E-09,
          "TotalHours": 1.1786111111111111E-07,
          "TotalMilliseconds": 0.4243,
          "TotalMicroseconds": 424.3,
          "TotalNanoseconds": 424300.0,
          "TotalMinutes": 7.071666666666667E-06,
          "TotalSeconds": 0.0004243
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19000,
            "Length": 475,
            "StartLine": 357,
            "StartColumn": 125,
            "EndLine": 369,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "eb1bc059-1436-4f6a-a3f1-218fc7046377",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 478832,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 883,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.542037037037037E-07,
            "TotalHours": 1.330088888888889E-05,
            "TotalMilliseconds": 47.8832,
            "TotalMicroseconds": 47883.2,
            "TotalNanoseconds": 47883200.0,
            "TotalMinutes": 0.0007980533333333333,
            "TotalSeconds": 0.0478832
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a50dca85-9931-4740-9da0-0848a90b48b1",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9467305-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 474313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 431,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.489733796296296E-07,
            "TotalHours": 1.3175361111111111E-05,
            "TotalMilliseconds": 47.4313,
            "TotalMicroseconds": 47431.3,
            "TotalNanoseconds": 47431300.0,
            "TotalMinutes": 0.0007905216666666666,
            "TotalSeconds": 0.0474313
          },
          "UserDuration": {
            "Ticks": 4519,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 451,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.230324074074074E-09,
            "TotalHours": 1.2552777777777778E-07,
            "TotalMilliseconds": 0.4519,
            "TotalMicroseconds": 451.9,
            "TotalNanoseconds": 451900.0,
            "TotalMinutes": 7.531666666666667E-06,
            "TotalSeconds": 0.0004519
          },
          "OwnDuration": {
            "Ticks": 470573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 57,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.446446759259259E-07,
            "TotalHours": 1.3071472222222223E-05,
            "TotalMilliseconds": 47.0573,
            "TotalMicroseconds": 47057.3,
            "TotalNanoseconds": 47057300.0,
            "TotalMinutes": 0.0007842883333333333,
            "TotalSeconds": 0.0470573
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ed4ce64-c7fc-4c74-9055-4236be237491",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 350,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 357,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9474643-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.91087962962963E-09,
          "TotalHours": 1.1786111111111111E-07,
          "TotalMilliseconds": 0.4243,
          "TotalMicroseconds": 424.3,
          "TotalNanoseconds": 424300.0,
          "TotalMinutes": 7.071666666666667E-06,
          "TotalSeconds": 0.0004243
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4016,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 401,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.648148148148148E-09,
          "TotalHours": 1.1155555555555555E-07,
          "TotalMilliseconds": 0.4016,
          "TotalMicroseconds": 401.6,
          "TotalNanoseconds": 401600.0,
          "TotalMinutes": 6.693333333333333E-06,
          "TotalSeconds": 0.0004016
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19602,
            "Length": 563,
            "StartLine": 371,
            "StartColumn": 112,
            "EndLine": 383,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d5c7be41-5f62-48d7-94c3-c78c8aab0ba6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 478832,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 883,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.542037037037037E-07,
            "TotalHours": 1.330088888888889E-05,
            "TotalMilliseconds": 47.8832,
            "TotalMicroseconds": 47883.2,
            "TotalNanoseconds": 47883200.0,
            "TotalMinutes": 0.0007980533333333333,
            "TotalSeconds": 0.0478832
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0569559",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8999651-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0557171",
            "UserDuration": "00:00:00.0012388",
            "OwnDuration": "-00:00:00.0683111",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n            Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 188,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a50dca85-9931-4740-9da0-0848a90b48b1",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9467305-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 474313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 431,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.489733796296296E-07,
            "TotalHours": 1.3175361111111111E-05,
            "TotalMilliseconds": 47.4313,
            "TotalMicroseconds": 47431.3,
            "TotalNanoseconds": 47431300.0,
            "TotalMinutes": 0.0007905216666666666,
            "TotalSeconds": 0.0474313
          },
          "UserDuration": {
            "Ticks": 4519,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 451,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.230324074074074E-09,
            "TotalHours": 1.2552777777777778E-07,
            "TotalMilliseconds": 0.4519,
            "TotalMicroseconds": 451.9,
            "TotalNanoseconds": 451900.0,
            "TotalMinutes": 7.531666666666667E-06,
            "TotalSeconds": 0.0004519
          },
          "OwnDuration": {
            "Ticks": 470573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 47,
            "Microseconds": 57,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.446446759259259E-07,
            "TotalHours": 1.3071472222222223E-05,
            "TotalMilliseconds": 47.0573,
            "TotalMicroseconds": 47057.3,
            "TotalNanoseconds": 47057300.0,
            "TotalMinutes": 0.0007842883333333333,
            "TotalSeconds": 0.0470573
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ed4ce64-c7fc-4c74-9055-4236be237491",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 350,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 371,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9479124-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4016,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 401,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.648148148148148E-09,
          "TotalHours": 1.1155555555555555E-07,
          "TotalMilliseconds": 0.4016,
          "TotalMicroseconds": 401.6,
          "TotalNanoseconds": 401600.0,
          "TotalMinutes": 6.693333333333333E-06,
          "TotalSeconds": 0.0004016
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5548,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4212962962962965E-09,
          "TotalHours": 1.541111111111111E-07,
          "TotalMilliseconds": 0.5548,
          "TotalMicroseconds": 554.8,
          "TotalNanoseconds": 554800.0,
          "TotalMinutes": 9.246666666666667E-06,
          "TotalSeconds": 0.0005548
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22453,
            "Length": 222,
            "StartLine": 432,
            "StartColumn": 88,
            "EndLine": 437,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "39f0ae86-4c79-46f4-bcbf-1be33effb0c7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 432,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9586276-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5548,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.4212962962962965E-09,
          "TotalHours": 1.541111111111111E-07,
          "TotalMilliseconds": 0.5548,
          "TotalMicroseconds": 554.8,
          "TotalNanoseconds": 554800.0,
          "TotalMinutes": 9.246666666666667E-06,
          "TotalSeconds": 0.0005548
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4223,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 422,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.887731481481482E-09,
          "TotalHours": 1.1730555555555556E-07,
          "TotalMilliseconds": 0.4223,
          "TotalMicroseconds": 422.3,
          "TotalNanoseconds": 422300.0,
          "TotalMinutes": 7.0383333333333334E-06,
          "TotalSeconds": 0.0004223
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22774,
            "Length": 279,
            "StartLine": 439,
            "StartColumn": 84,
            "EndLine": 445,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "128fb403-5c51-43fb-9471-4f4b146b2873",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 439,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9592081-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4223,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 422,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.887731481481482E-09,
          "TotalHours": 1.1730555555555556E-07,
          "TotalMilliseconds": 0.4223,
          "TotalMicroseconds": 422.3,
          "TotalNanoseconds": 422300.0,
          "TotalMinutes": 7.0383333333333334E-06,
          "TotalSeconds": 0.0004223
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4884,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 488,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.652777777777778E-09,
          "TotalHours": 1.3566666666666668E-07,
          "TotalMilliseconds": 0.4884,
          "TotalMicroseconds": 488.4,
          "TotalNanoseconds": 488400.0,
          "TotalMinutes": 8.14E-06,
          "TotalSeconds": 0.0004884
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23167,
            "Length": 545,
            "StartLine": 447,
            "StartColumn": 99,
            "EndLine": 456,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "60c427f0-e90a-4134-9367-8064c9a8e2bb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 65492,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 549,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.580092592592592E-08,
            "TotalHours": 1.8192222222222223E-06,
            "TotalMilliseconds": 6.5492,
            "TotalMicroseconds": 6549.2,
            "TotalNanoseconds": 6549200.0,
            "TotalMinutes": 0.00010915333333333334,
            "TotalSeconds": 0.0065492
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9576983-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 63932,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 393,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.399537037037037E-08,
            "TotalHours": 1.7758888888888888E-06,
            "TotalMilliseconds": 6.3932,
            "TotalMicroseconds": 6393.2,
            "TotalNanoseconds": 6393200.0,
            "TotalMinutes": 0.00010655333333333333,
            "TotalSeconds": 0.0063932
          },
          "UserDuration": {
            "Ticks": 1560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 156,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8055555555555555E-09,
            "TotalHours": 4.333333333333333E-08,
            "TotalMilliseconds": 0.156,
            "TotalMicroseconds": 156.0,
            "TotalNanoseconds": 156000.0,
            "TotalMinutes": 2.6E-06,
            "TotalSeconds": 0.000156
          },
          "OwnDuration": {
            "Ticks": 50837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 83,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.883912037037037E-08,
            "TotalHours": 1.412138888888889E-06,
            "TotalMilliseconds": 5.0837,
            "TotalMicroseconds": 5083.7,
            "TotalNanoseconds": 5083700.0,
            "TotalMinutes": 8.472833333333334E-05,
            "TotalSeconds": 0.0050837
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "23acca9b-fb87-42c2-a841-4a18c91ab95d",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 431,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 447,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9596584-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4884,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 488,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.652777777777778E-09,
          "TotalHours": 1.3566666666666668E-07,
          "TotalMilliseconds": 0.4884,
          "TotalMicroseconds": 488.4,
          "TotalNanoseconds": 488400.0,
          "TotalMinutes": 8.14E-06,
          "TotalSeconds": 0.0004884
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5807,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 580,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.721064814814815E-09,
          "TotalHours": 1.6130555555555555E-07,
          "TotalMilliseconds": 0.5807,
          "TotalMicroseconds": 580.7,
          "TotalNanoseconds": 580700.0,
          "TotalMinutes": 9.678333333333334E-06,
          "TotalSeconds": 0.0005807
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24147,
            "Length": 427,
            "StartLine": 466,
            "StartColumn": 127,
            "EndLine": 473,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "18ff11e0-2a67-4c88-b517-61a9e4f66683",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 466,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.965111-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5807,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 580,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.721064814814815E-09,
          "TotalHours": 1.6130555555555555E-07,
          "TotalMilliseconds": 0.5807,
          "TotalMicroseconds": 580.7,
          "TotalNanoseconds": 580700.0,
          "TotalMinutes": 9.678333333333334E-06,
          "TotalSeconds": 0.0005807
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 10984,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 98,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.2712962962962962E-08,
          "TotalHours": 3.051111111111111E-07,
          "TotalMilliseconds": 1.0984,
          "TotalMicroseconds": 1098.4,
          "TotalNanoseconds": 1098400.0,
          "TotalMinutes": 1.8306666666666665E-05,
          "TotalSeconds": 0.0010984
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24714,
            "Length": 411,
            "StartLine": 475,
            "StartColumn": 125,
            "EndLine": 482,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e6758b82-fb59-420c-80d2-4d98b43ff458",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 475,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9657989-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 10984,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 98,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.2712962962962962E-08,
          "TotalHours": 3.051111111111111E-07,
          "TotalMilliseconds": 1.0984,
          "TotalMicroseconds": 1098.4,
          "TotalNanoseconds": 1098400.0,
          "TotalMinutes": 1.8306666666666665E-05,
          "TotalSeconds": 0.0010984
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5210,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 521,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.0300925925925925E-09,
          "TotalHours": 1.4472222222222222E-07,
          "TotalMilliseconds": 0.521,
          "TotalMicroseconds": 521.0,
          "TotalNanoseconds": 521000.0,
          "TotalMinutes": 8.683333333333334E-06,
          "TotalSeconds": 0.000521
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25259,
            "Length": 542,
            "StartLine": 484,
            "StartColumn": 119,
            "EndLine": 494,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "36173d58-d893-446a-a8fa-a7d721956dd8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 140115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 11,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.621701388888889E-07,
            "TotalHours": 3.892083333333334E-06,
            "TotalMilliseconds": 14.0115,
            "TotalMicroseconds": 14011.5,
            "TotalNanoseconds": 14011500.0,
            "TotalMinutes": 0.000233525,
            "TotalSeconds": 0.0140115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "24d4ff35-0717-4a9c-82f8-56a6d2f288ed",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9642481-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 696,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5851851851851851E-07,
            "TotalHours": 3.8044444444444443E-06,
            "TotalMilliseconds": 13.696,
            "TotalMicroseconds": 13696.0,
            "TotalNanoseconds": 13696000.0,
            "TotalMinutes": 0.00022826666666666667,
            "TotalSeconds": 0.013696
          },
          "UserDuration": {
            "Ticks": 3155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 315,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.65162037037037E-09,
            "TotalHours": 8.76388888888889E-08,
            "TotalMilliseconds": 0.3155,
            "TotalMicroseconds": 315.5,
            "TotalNanoseconds": 315500.0,
            "TotalMinutes": 5.2583333333333335E-06,
            "TotalSeconds": 0.0003155
          },
          "OwnDuration": {
            "Ticks": 118114,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 811,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3670601851851852E-07,
            "TotalHours": 3.2809444444444446E-06,
            "TotalMilliseconds": 11.8114,
            "TotalMicroseconds": 11811.4,
            "TotalNanoseconds": 11811400.0,
            "TotalMinutes": 0.00019685666666666667,
            "TotalSeconds": 0.0118114
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "28227c1b-00a2-4d73-b8fc-838f1dbcb637",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 459,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 484,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9668818-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5210,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 521,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.0300925925925925E-09,
          "TotalHours": 1.4472222222222222E-07,
          "TotalMilliseconds": 0.521,
          "TotalMicroseconds": 521.0,
          "TotalNanoseconds": 521000.0,
          "TotalMinutes": 8.683333333333334E-06,
          "TotalSeconds": 0.000521
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 94144,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 414,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0896296296296296E-07,
          "TotalHours": 2.615111111111111E-06,
          "TotalMilliseconds": 9.4144,
          "TotalMicroseconds": 9414.4,
          "TotalNanoseconds": 9414400.0,
          "TotalMinutes": 0.00015690666666666667,
          "TotalSeconds": 0.0094144
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26219,
            "Length": 485,
            "StartLine": 504,
            "StartColumn": 116,
            "EndLine": 514,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4eca800a-23b2-4bda-a627-97688878a3ee",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 504,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9726285-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 94144,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 414,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0896296296296296E-07,
          "TotalHours": 2.615111111111111E-06,
          "TotalMilliseconds": 9.4144,
          "TotalMicroseconds": 9414.4,
          "TotalNanoseconds": 9414400.0,
          "TotalMinutes": 0.00015690666666666667,
          "TotalSeconds": 0.0094144
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4824,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 482,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.583333333333334E-09,
          "TotalHours": 1.34E-07,
          "TotalMilliseconds": 0.4824,
          "TotalMicroseconds": 482.4,
          "TotalNanoseconds": 482400.0,
          "TotalMinutes": 8.04E-06,
          "TotalSeconds": 0.0004824
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26828,
            "Length": 522,
            "StartLine": 516,
            "StartColumn": 109,
            "EndLine": 527,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8025e746-b8c0-40a9-b465-98e0b5945ddb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 516,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.982073-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4824,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 482,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.583333333333334E-09,
          "TotalHours": 1.34E-07,
          "TotalMilliseconds": 0.4824,
          "TotalMicroseconds": 482.4,
          "TotalNanoseconds": 482400.0,
          "TotalMinutes": 8.04E-06,
          "TotalSeconds": 0.0004824
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 383,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4421296296296295E-09,
          "TotalHours": 1.0661111111111112E-07,
          "TotalMilliseconds": 0.3838,
          "TotalMicroseconds": 383.8,
          "TotalNanoseconds": 383800.0,
          "TotalMinutes": 6.396666666666667E-06,
          "TotalSeconds": 0.0003838
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27477,
            "Length": 402,
            "StartLine": 529,
            "StartColumn": 112,
            "EndLine": 537,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "910b14c5-6820-4c65-b236-fbce5a55284a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 297193,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 719,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.439733796296296E-07,
            "TotalHours": 8.255361111111111E-06,
            "TotalMilliseconds": 29.7193,
            "TotalMicroseconds": 29719.3,
            "TotalNanoseconds": 29719300.0,
            "TotalMinutes": 0.0004953216666666667,
            "TotalSeconds": 0.0297193
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0915796",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9569323-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0896699",
            "UserDuration": "00:00:00.0019097",
            "OwnDuration": "00:00:00.0412996",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 391,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9f052e55-1f9b-407f-b76d-ae4b739a0f4c",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.97171-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 291924,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 29,
            "Microseconds": 192,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.37875E-07,
            "TotalHours": 8.109E-06,
            "TotalMilliseconds": 29.1924,
            "TotalMicroseconds": 29192.4,
            "TotalNanoseconds": 29192400.0,
            "TotalMinutes": 0.00048654,
            "TotalSeconds": 0.0291924
          },
          "UserDuration": {
            "Ticks": 5269,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 526,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.09837962962963E-09,
            "TotalHours": 1.463611111111111E-07,
            "TotalMilliseconds": 0.5269,
            "TotalMicroseconds": 526.9,
            "TotalNanoseconds": 526900.0,
            "TotalMinutes": 8.781666666666666E-06,
            "TotalSeconds": 0.0005269
          },
          "OwnDuration": {
            "Ticks": 194387,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 438,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.249849537037037E-07,
            "TotalHours": 5.399638888888889E-06,
            "TotalMilliseconds": 19.4387,
            "TotalMicroseconds": 19438.7,
            "TotalNanoseconds": 19438700.0,
            "TotalMinutes": 0.0003239783333333333,
            "TotalSeconds": 0.0194387
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5f2a1088-56f4-40f4-af7e-a9804328eff2",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 497,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 529,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9825635-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 383,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4421296296296295E-09,
          "TotalHours": 1.0661111111111112E-07,
          "TotalMilliseconds": 0.3838,
          "TotalMicroseconds": 383.8,
          "TotalNanoseconds": 383800.0,
          "TotalMinutes": 6.396666666666667E-06,
          "TotalSeconds": 0.0003838
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5111,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 511,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.915509259259259E-09,
          "TotalHours": 1.4197222222222222E-07,
          "TotalMilliseconds": 0.5111,
          "TotalMicroseconds": 511.1,
          "TotalNanoseconds": 511100.0,
          "TotalMinutes": 8.518333333333333E-06,
          "TotalSeconds": 0.0005111
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30085,
            "Length": 523,
            "StartLine": 580,
            "StartColumn": 140,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "476668fc-20c8-485a-b230-669ce7ce6e7b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 580,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9942815-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5111,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 511,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.915509259259259E-09,
          "TotalHours": 1.4197222222222222E-07,
          "TotalMilliseconds": 0.5111,
          "TotalMicroseconds": 511.1,
          "TotalNanoseconds": 511100.0,
          "TotalMinutes": 8.518333333333333E-06,
          "TotalSeconds": 0.0005111
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3975,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 397,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.6006944444444444E-09,
          "TotalHours": 1.1041666666666667E-07,
          "TotalMilliseconds": 0.3975,
          "TotalMicroseconds": 397.5,
          "TotalNanoseconds": 397500.0,
          "TotalMinutes": 6.625E-06,
          "TotalSeconds": 0.0003975
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30759,
            "Length": 508,
            "StartLine": 590,
            "StartColumn": 136,
            "EndLine": 598,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "3986a2ae-d134-4a0f-aa56-7e710a19331b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 590,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9948499-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3975,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 397,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.6006944444444444E-09,
          "TotalHours": 1.1041666666666667E-07,
          "TotalMilliseconds": 0.3975,
          "TotalMicroseconds": 397.5,
          "TotalNanoseconds": 397500.0,
          "TotalMinutes": 6.625E-06,
          "TotalSeconds": 0.0003975
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3401,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 340,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.936342592592592E-09,
          "TotalHours": 9.447222222222222E-08,
          "TotalMilliseconds": 0.3401,
          "TotalMicroseconds": 340.1,
          "TotalNanoseconds": 340100.0,
          "TotalMinutes": 5.668333333333333E-06,
          "TotalSeconds": 0.0003401
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 31414,
            "Length": 523,
            "StartLine": 600,
            "StartColumn": 132,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "35f66032-ebab-4bf5-9414-2bd7b62119e8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 600,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9952531-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3401,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 340,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.936342592592592E-09,
          "TotalHours": 9.447222222222222E-08,
          "TotalMilliseconds": 0.3401,
          "TotalMicroseconds": 340.1,
          "TotalNanoseconds": 340100.0,
          "TotalMinutes": 5.668333333333333E-06,
          "TotalSeconds": 0.0003401
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3983,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 398,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.609953703703703E-09,
          "TotalHours": 1.1063888888888889E-07,
          "TotalMilliseconds": 0.3983,
          "TotalMicroseconds": 398.3,
          "TotalNanoseconds": 398300.0,
          "TotalMinutes": 6.638333333333333E-06,
          "TotalSeconds": 0.0003983
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 32092,
            "Length": 568,
            "StartLine": 610,
            "StartColumn": 140,
            "EndLine": 619,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b065716b-a8b1-4aaf-9775-9367d100edd2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9956449-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3983,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 398,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.609953703703703E-09,
          "TotalHours": 1.1063888888888889E-07,
          "TotalMilliseconds": 0.3983,
          "TotalMicroseconds": 398.3,
          "TotalNanoseconds": 398300.0,
          "TotalMinutes": 6.638333333333333E-06,
          "TotalSeconds": 0.0003983
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3322,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 332,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8449074074074075E-09,
          "TotalHours": 9.227777777777777E-08,
          "TotalMilliseconds": 0.3322,
          "TotalMicroseconds": 332.2,
          "TotalNanoseconds": 332200.0,
          "TotalMinutes": 5.5366666666666665E-06,
          "TotalSeconds": 0.0003322
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 32808,
            "Length": 581,
            "StartLine": 621,
            "StartColumn": 133,
            "EndLine": 629,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "05391790-a57b-4fb1-87d5-515a414e260b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 71744,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 174,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.303703703703704E-08,
            "TotalHours": 1.992888888888889E-06,
            "TotalMilliseconds": 7.1744,
            "TotalMicroseconds": 7174.4,
            "TotalNanoseconds": 7174400.0,
            "TotalMinutes": 0.00011957333333333334,
            "TotalSeconds": 0.0071744
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "982c3f05-4457-4c4f-8275-c052eb0ba487",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:40.9935371-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 70361,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 36,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.143634259259259E-08,
            "TotalHours": 1.9544722222222224E-06,
            "TotalMilliseconds": 7.0361,
            "TotalMicroseconds": 7036.1,
            "TotalNanoseconds": 7036100.0,
            "TotalMinutes": 0.00011726833333333334,
            "TotalSeconds": 0.0070361
          },
          "UserDuration": {
            "Ticks": 1383,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 138,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6006944444444444E-09,
            "TotalHours": 3.841666666666667E-08,
            "TotalMilliseconds": 0.1383,
            "TotalMicroseconds": 138.3,
            "TotalNanoseconds": 138300.0,
            "TotalMinutes": 2.305E-06,
            "TotalSeconds": 0.0001383
          },
          "OwnDuration": {
            "Ticks": 51952,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 195,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.012962962962963E-08,
            "TotalHours": 1.4431111111111112E-06,
            "TotalMilliseconds": 5.1952,
            "TotalMicroseconds": 5195.2,
            "TotalNanoseconds": 5195200.0,
            "TotalMinutes": 8.658666666666667E-05,
            "TotalSeconds": 0.0051952
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e31d4c54-fe24-4b38-8ec8-ddffe80c9a2f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 573,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 621,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:40.9960285-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3322,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 332,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8449074074074075E-09,
          "TotalHours": 9.227777777777777E-08,
          "TotalMilliseconds": 0.3322,
          "TotalMicroseconds": 332.2,
          "TotalNanoseconds": 332200.0,
          "TotalMinutes": 5.5366666666666665E-06,
          "TotalSeconds": 0.0003322
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4864,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 486,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.629629629629629E-09,
          "TotalHours": 1.351111111111111E-07,
          "TotalMilliseconds": 0.4864,
          "TotalMicroseconds": 486.4,
          "TotalNanoseconds": 486400.0,
          "TotalMinutes": 8.106666666666666E-06,
          "TotalSeconds": 0.0004864
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 33842,
            "Length": 235,
            "StartLine": 639,
            "StartColumn": 131,
            "EndLine": 644,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7c324185-fc44-4fbf-8164-cf04d0eb54d4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 130709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.512835648148148E-07,
            "TotalHours": 3.6308055555555557E-06,
            "TotalMilliseconds": 13.0709,
            "TotalMicroseconds": 13070.9,
            "TotalNanoseconds": 13070900.0,
            "TotalMinutes": 0.00021784833333333333,
            "TotalSeconds": 0.0130709
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8524288e-3011-4e61-a45e-815b45d02f4e",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0007111-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 127964,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 796,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.481064814814815E-07,
            "TotalHours": 3.5545555555555554E-06,
            "TotalMilliseconds": 12.7964,
            "TotalMicroseconds": 12796.4,
            "TotalNanoseconds": 12796400.0,
            "TotalMinutes": 0.00021327333333333334,
            "TotalSeconds": 0.0127964
          },
          "UserDuration": {
            "Ticks": 2745,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 274,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1770833333333332E-09,
            "TotalHours": 7.625E-08,
            "TotalMilliseconds": 0.2745,
            "TotalMicroseconds": 274.5,
            "TotalNanoseconds": 274500.0,
            "TotalMinutes": 4.575E-06,
            "TotalSeconds": 0.0002745
          },
          "OwnDuration": {
            "Ticks": 121448,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 144,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.405648148148148E-07,
            "TotalHours": 3.3735555555555554E-06,
            "TotalMilliseconds": 12.1448,
            "TotalMicroseconds": 12144.8,
            "TotalNanoseconds": 12144800.0,
            "TotalMinutes": 0.00020241333333333332,
            "TotalSeconds": 0.0121448
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e826bcfa-69d1-4392-a697-94592dbaf8bd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 632,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 639,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0014673-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4864,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 486,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.629629629629629E-09,
          "TotalHours": 1.351111111111111E-07,
          "TotalMilliseconds": 0.4864,
          "TotalMicroseconds": 486.4,
          "TotalNanoseconds": 486400.0,
          "TotalMinutes": 8.106666666666666E-06,
          "TotalSeconds": 0.0004864
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4397,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 439,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.08912037037037E-09,
          "TotalHours": 1.221388888888889E-07,
          "TotalMilliseconds": 0.4397,
          "TotalMicroseconds": 439.7,
          "TotalNanoseconds": 439700.0,
          "TotalMinutes": 7.328333333333333E-06,
          "TotalSeconds": 0.0004397
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 34210,
            "Length": 710,
            "StartLine": 646,
            "StartColumn": 118,
            "EndLine": 661,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "35d1db94-55e8-44bb-97eb-e7de381a7082",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 130709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.512835648148148E-07,
            "TotalHours": 3.6308055555555557E-06,
            "TotalMilliseconds": 13.0709,
            "TotalMicroseconds": 13070.9,
            "TotalNanoseconds": 13070900.0,
            "TotalMinutes": 0.00021784833333333333,
            "TotalSeconds": 0.0130709
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1113015",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.9915511-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1089217",
            "UserDuration": "00:00:00.0023798",
            "OwnDuration": "00:00:00.0910562",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 545,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8524288e-3011-4e61-a45e-815b45d02f4e",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0007111-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 127964,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 796,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.481064814814815E-07,
            "TotalHours": 3.5545555555555554E-06,
            "TotalMilliseconds": 12.7964,
            "TotalMicroseconds": 12796.4,
            "TotalNanoseconds": 12796400.0,
            "TotalMinutes": 0.00021327333333333334,
            "TotalSeconds": 0.0127964
          },
          "UserDuration": {
            "Ticks": 2745,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 274,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1770833333333332E-09,
            "TotalHours": 7.625E-08,
            "TotalMilliseconds": 0.2745,
            "TotalMicroseconds": 274.5,
            "TotalNanoseconds": 274500.0,
            "TotalMinutes": 4.575E-06,
            "TotalSeconds": 0.0002745
          },
          "OwnDuration": {
            "Ticks": 121448,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 144,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.405648148148148E-07,
            "TotalHours": 3.3735555555555554E-06,
            "TotalMilliseconds": 12.1448,
            "TotalMicroseconds": 12144.8,
            "TotalNanoseconds": 12144800.0,
            "TotalMinutes": 0.00020241333333333332,
            "TotalSeconds": 0.0121448
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e826bcfa-69d1-4392-a697-94592dbaf8bd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 632,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 646,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0019778-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4397,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 439,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.08912037037037E-09,
          "TotalHours": 1.221388888888889E-07,
          "TotalMilliseconds": 0.4397,
          "TotalMicroseconds": 439.7,
          "TotalNanoseconds": 439700.0,
          "TotalMinutes": 7.328333333333333E-06,
          "TotalSeconds": 0.0004397
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4366,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 436,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.053240740740741E-09,
          "TotalHours": 1.2127777777777778E-07,
          "TotalMilliseconds": 0.4366,
          "TotalMicroseconds": 436.6,
          "TotalNanoseconds": 436600.0,
          "TotalMinutes": 7.276666666666667E-06,
          "TotalSeconds": 0.0004366
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 37913,
            "Length": 1022,
            "StartLine": 717,
            "StartColumn": 122,
            "EndLine": 739,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8eae8944-f904-439e-9d1b-c5e6fe6dff6c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 56233,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 623,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.508449074074073E-08,
            "TotalHours": 1.5620277777777777E-06,
            "TotalMilliseconds": 5.6233,
            "TotalMicroseconds": 5623.3,
            "TotalNanoseconds": 5623300.0,
            "TotalMinutes": 9.372166666666666E-05,
            "TotalSeconds": 0.0056233
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ef197a79-1032-41c0-bf30-3f93bd5367bf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0855141-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 54965,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 496,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.361689814814815E-08,
            "TotalHours": 1.5268055555555556E-06,
            "TotalMilliseconds": 5.4965,
            "TotalMicroseconds": 5496.5,
            "TotalNanoseconds": 5496500.0,
            "TotalMinutes": 9.160833333333333E-05,
            "TotalSeconds": 0.0054965
          },
          "UserDuration": {
            "Ticks": 1268,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 126,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4675925925925925E-09,
            "TotalHours": 3.5222222222222224E-08,
            "TotalMilliseconds": 0.1268,
            "TotalMicroseconds": 126.8,
            "TotalNanoseconds": 126800.0,
            "TotalMinutes": 2.113333333333333E-06,
            "TotalSeconds": 0.0001268
          },
          "OwnDuration": {
            "Ticks": 48534,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 853,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.617361111111111E-08,
            "TotalHours": 1.3481666666666667E-06,
            "TotalMilliseconds": 4.8534,
            "TotalMicroseconds": 4853.4,
            "TotalNanoseconds": 4853400.0,
            "TotalMinutes": 8.089E-05,
            "TotalSeconds": 0.0048534
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "74c328bd-0131-448a-b565-7a8913676f0b",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 710,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 717,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0863002-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4366,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 436,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.053240740740741E-09,
          "TotalHours": 1.2127777777777778E-07,
          "TotalMilliseconds": 0.4366,
          "TotalMicroseconds": 436.6,
          "TotalNanoseconds": 436600.0,
          "TotalMinutes": 7.276666666666667E-06,
          "TotalSeconds": 0.0004366
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3333,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8576388888888886E-09,
          "TotalHours": 9.258333333333333E-08,
          "TotalMilliseconds": 0.3333,
          "TotalMicroseconds": 333.3,
          "TotalNanoseconds": 333300.0,
          "TotalMinutes": 5.555E-06,
          "TotalSeconds": 0.0003333
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39071,
            "Length": 781,
            "StartLine": 741,
            "StartColumn": 121,
            "EndLine": 754,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5f8f728e-defc-4583-9d23-866b1a533440",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 56233,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 623,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.508449074074073E-08,
            "TotalHours": 1.5620277777777777E-06,
            "TotalMilliseconds": 5.6233,
            "TotalMicroseconds": 5623.3,
            "TotalNanoseconds": 5623300.0,
            "TotalMinutes": 9.372166666666666E-05,
            "TotalSeconds": 0.0056233
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ef197a79-1032-41c0-bf30-3f93bd5367bf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0855141-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 54965,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 496,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.361689814814815E-08,
            "TotalHours": 1.5268055555555556E-06,
            "TotalMilliseconds": 5.4965,
            "TotalMicroseconds": 5496.5,
            "TotalNanoseconds": 5496500.0,
            "TotalMinutes": 9.160833333333333E-05,
            "TotalSeconds": 0.0054965
          },
          "UserDuration": {
            "Ticks": 1268,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 126,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4675925925925925E-09,
            "TotalHours": 3.5222222222222224E-08,
            "TotalMilliseconds": 0.1268,
            "TotalMicroseconds": 126.8,
            "TotalNanoseconds": 126800.0,
            "TotalMinutes": 2.113333333333333E-06,
            "TotalSeconds": 0.0001268
          },
          "OwnDuration": {
            "Ticks": 48534,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 853,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.617361111111111E-08,
            "TotalHours": 1.3481666666666667E-06,
            "TotalMilliseconds": 4.8534,
            "TotalMicroseconds": 4853.4,
            "TotalNanoseconds": 4853400.0,
            "TotalMinutes": 8.089E-05,
            "TotalSeconds": 0.0048534
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "74c328bd-0131-448a-b565-7a8913676f0b",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 710,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 741,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.0867556-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3333,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.8576388888888886E-09,
          "TotalHours": 9.258333333333333E-08,
          "TotalMilliseconds": 0.3333,
          "TotalMicroseconds": 333.3,
          "TotalNanoseconds": 333300.0,
          "TotalMinutes": 5.555E-06,
          "TotalSeconds": 0.0003333
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 444126,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 412,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.140347222222222E-07,
          "TotalHours": 1.2336833333333334E-05,
          "TotalMilliseconds": 44.4126,
          "TotalMicroseconds": 44412.6,
          "TotalNanoseconds": 44412600.0,
          "TotalMinutes": 0.00074021,
          "TotalSeconds": 0.0444126
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 41197,
            "Length": 1019,
            "StartLine": 790,
            "StartColumn": 64,
            "EndLine": 809,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "76ce7f6c-4abc-4da2-90c6-a31108c4cb93",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 950362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 95,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0999560185185186E-06,
            "TotalHours": 2.6398944444444445E-05,
            "TotalMilliseconds": 95.0362,
            "TotalMicroseconds": 95036.2,
            "TotalNanoseconds": 95036200.0,
            "TotalMinutes": 0.0015839366666666667,
            "TotalSeconds": 0.0950362
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a2a35f3-7b49-49d9-9a02-8d580a469894",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0911283-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 147115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 711,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7027199074074074E-07,
            "TotalHours": 4.086527777777778E-06,
            "TotalMilliseconds": 14.7115,
            "TotalMicroseconds": 14711.5,
            "TotalNanoseconds": 14711500.0,
            "TotalMinutes": 0.00024519166666666666,
            "TotalSeconds": 0.0147115
          },
          "UserDuration": {
            "Ticks": 803247,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 324,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.296840277777778E-07,
            "TotalHours": 2.2312416666666667E-05,
            "TotalMilliseconds": 80.3247,
            "TotalMicroseconds": 80324.7,
            "TotalNanoseconds": 80324700.0,
            "TotalMinutes": 0.001338745,
            "TotalSeconds": 0.0803247
          },
          "OwnDuration": {
            "Ticks": 502431,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 50,
            "Microseconds": 243,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.815173611111111E-07,
            "TotalHours": 1.3956416666666667E-05,
            "TotalMilliseconds": 50.2431,
            "TotalMicroseconds": 50243.1,
            "TotalNanoseconds": 50243100.0,
            "TotalMinutes": 0.000837385,
            "TotalSeconds": 0.0502431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6519f860-8fc2-42bc-a828-ed3633c76f23",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 757,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 790,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1317093-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 402301,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 40,
          "Microseconds": 230,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.656261574074074E-07,
          "TotalHours": 1.1175027777777778E-05,
          "TotalMilliseconds": 40.2301,
          "TotalMicroseconds": 40230.1,
          "TotalNanoseconds": 40230100.0,
          "TotalMinutes": 0.0006705016666666666,
          "TotalSeconds": 0.0402301
        },
        "FrameworkDuration": {
          "Ticks": 41825,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 182,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.840856481481481E-08,
          "TotalHours": 1.1618055555555555E-06,
          "TotalMilliseconds": 4.1825,
          "TotalMicroseconds": 4182.5,
          "TotalNanoseconds": 4182500.0,
          "TotalMinutes": 6.970833333333334E-05,
          "TotalSeconds": 0.0041825
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3805,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 380,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4039351851851854E-09,
          "TotalHours": 1.0569444444444445E-07,
          "TotalMilliseconds": 0.3805,
          "TotalMicroseconds": 380.5,
          "TotalNanoseconds": 380500.0,
          "TotalMinutes": 6.341666666666666E-06,
          "TotalSeconds": 0.0003805
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 42371,
            "Length": 725,
            "StartLine": 811,
            "StartColumn": 140,
            "EndLine": 827,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d663f81e-1529-4022-a553-7b07a6bcc563",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 950362,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 95,
            "Microseconds": 36,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0999560185185186E-06,
            "TotalHours": 2.6398944444444445E-05,
            "TotalMilliseconds": 95.0362,
            "TotalMicroseconds": 95036.2,
            "TotalNanoseconds": 95036200.0,
            "TotalMinutes": 0.0015839366666666667,
            "TotalSeconds": 0.0950362
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a2a35f3-7b49-49d9-9a02-8d580a469894",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.0911283-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 147115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 711,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7027199074074074E-07,
            "TotalHours": 4.086527777777778E-06,
            "TotalMilliseconds": 14.7115,
            "TotalMicroseconds": 14711.5,
            "TotalNanoseconds": 14711500.0,
            "TotalMinutes": 0.00024519166666666666,
            "TotalSeconds": 0.0147115
          },
          "UserDuration": {
            "Ticks": 803247,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 324,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.296840277777778E-07,
            "TotalHours": 2.2312416666666667E-05,
            "TotalMilliseconds": 80.3247,
            "TotalMicroseconds": 80324.7,
            "TotalNanoseconds": 80324700.0,
            "TotalMinutes": 0.001338745,
            "TotalSeconds": 0.0803247
          },
          "OwnDuration": {
            "Ticks": 502431,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 50,
            "Microseconds": 243,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.815173611111111E-07,
            "TotalHours": 1.3956416666666667E-05,
            "TotalMilliseconds": 50.2431,
            "TotalMicroseconds": 50243.1,
            "TotalNanoseconds": 50243100.0,
            "TotalMinutes": 0.000837385,
            "TotalSeconds": 0.0502431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6519f860-8fc2-42bc-a828-ed3633c76f23",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 757,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 811,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1761579-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3805,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 380,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4039351851851854E-09,
          "TotalHours": 1.0569444444444445E-07,
          "TotalMilliseconds": 0.3805,
          "TotalMicroseconds": 380.5,
          "TotalNanoseconds": 380500.0,
          "TotalMinutes": 6.341666666666666E-06,
          "TotalSeconds": 0.0003805
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5546,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.418981481481482E-09,
          "TotalHours": 1.5405555555555556E-07,
          "TotalMilliseconds": 0.5546,
          "TotalMicroseconds": 554.6,
          "TotalNanoseconds": 554600.0,
          "TotalMinutes": 9.243333333333333E-06,
          "TotalSeconds": 0.0005546
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 43548,
            "Length": 1070,
            "StartLine": 837,
            "StartColumn": 130,
            "EndLine": 857,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d67fcc72-774d-4754-9fce-c35e4a5ee562",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 998212,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 99,
            "Microseconds": 821,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.155337962962963E-06,
            "TotalHours": 2.7728111111111112E-05,
            "TotalMilliseconds": 99.8212,
            "TotalMicroseconds": 99821.2,
            "TotalNanoseconds": 99821200.0,
            "TotalMinutes": 0.0016636866666666667,
            "TotalSeconds": 0.0998212
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5476802",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:40.8291071-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1068040",
            "FrameworkDuration": "00:00:00.2659774",
            "UserDuration": "00:00:00.1748988",
            "OwnDuration": "-00:00:00.0166814",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3045246",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:14:41.0112686-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1326698",
            "UserDuration": "00:00:00.1718548",
            "OwnDuration": "00:00:00.1040439",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 669,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2abf8d6f-a99d-4fcf-b666-1588eea4f992",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:14:41.1805412-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 193680,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 368,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2416666666666666E-07,
            "TotalHours": 5.38E-06,
            "TotalMilliseconds": 19.368,
            "TotalMicroseconds": 19368.0,
            "TotalNanoseconds": 19368000.0,
            "TotalMinutes": 0.0003228,
            "TotalSeconds": 0.019368
          },
          "UserDuration": {
            "Ticks": 804532,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 80,
            "Microseconds": 453,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.311712962962963E-07,
            "TotalHours": 2.2348111111111113E-05,
            "TotalMilliseconds": 80.4532,
            "TotalMicroseconds": 80453.2,
            "TotalNanoseconds": 80453200.0,
            "TotalMinutes": 0.0013408866666666667,
            "TotalSeconds": 0.0804532
          },
          "OwnDuration": {
            "Ticks": 992666,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 99,
            "Microseconds": 266,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1489189814814815E-06,
            "TotalHours": 2.7574055555555555E-05,
            "TotalMilliseconds": 99.2666,
            "TotalMicroseconds": 99266.6,
            "TotalNanoseconds": 99266600.0,
            "TotalMinutes": 0.0016544433333333334,
            "TotalSeconds": 0.0992666
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "56e71b50-d1d8-4bff-bddb-1d0028857a41",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 830,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 837,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:14:41.1813351-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5546,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 554,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.418981481481482E-09,
          "TotalHours": 1.5405555555555556E-07,
          "TotalMilliseconds": 0.5546,
          "TotalMicroseconds": 554.6,
          "TotalNanoseconds": 554600.0,
          "TotalMinutes": 9.243333333333333E-06,
          "TotalSeconds": 0.0005546
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  },
  "Summary": {
    "SuccessRate": 3.6,
    "Skipped": 27,
    "Duration": 0.6050925,
    "Passed": 1,
    "Failed": 0,
    "TestScope": "All",
    "TestScript": "Test-EnhancedDocumentationSystem.ps1",
    "StartTime": "2025-08-28T20:14:41.7762081-04:00",
    "TotalTests": 28
  }
}
