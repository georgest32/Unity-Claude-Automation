{
  "FailedTests": [],
  "Summary": {
    "Duration": 0.6039581,
    "TestScript": "Test-EnhancedDocumentationSystem.ps1",
    "TestScope": "All",
    "Skipped": 27,
    "SuccessRate": 3.6,
    "Failed": 0,
    "StartTime": "2025-08-28T19:57:34.0730103-04:00",
    "TotalTests": 28,
    "Passed": 1
  },
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 36156,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T19:57:33.5826184-04:00",
            "LastAccessTimeUtc": "2025-08-28T23:57:33.5826184Z",
            "LastWriteTime": "2025-08-28T19:30:50.560646-04:00",
            "LastWriteTimeUtc": "2025-08-28T23:30:50.560646Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T19:30:10.2339054-04:00",
          "CreationTimeUtc": "2025-08-28T23:30:10.2339054Z",
          "LastAccessTime": "2025-08-28T19:57:21.6987724-04:00",
          "LastAccessTimeUtc": "2025-08-28T23:57:21.6987724Z",
          "LastWriteTime": "2025-08-28T19:30:10.2339054-04:00",
          "LastWriteTimeUtc": "2025-08-28T23:30:10.2339054Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Passed",
        "Duration": {
          "Ticks": 6039581,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 603,
          "Microseconds": 958,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.990255787037037E-06,
          "TotalHours": 0.00016776613888888888,
          "TotalMilliseconds": 603.9581,
          "TotalMicroseconds": 603958.1,
          "TotalNanoseconds": 603958100.0,
          "TotalMinutes": 0.010065968333333333,
          "TotalSeconds": 0.6039581
        },
        "FailedCount": 0,
        "PassedCount": 1,
        "SkippedCount": 27,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": true,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
        "DiscoveryDuration": {
          "Ticks": 1012029,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 101,
          "Microseconds": 202,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.1713298611111112E-06,
          "TotalHours": 2.8111916666666668E-05,
          "TotalMilliseconds": 101.2029,
          "TotalMicroseconds": 101202.9,
          "TotalNanoseconds": 101202900.0,
          "TotalMinutes": 0.001686715,
          "TotalSeconds": 0.1012029
        },
        "UserDuration": {
          "Ticks": 1763501,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 176,
          "Microseconds": 350,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0410891203703704E-06,
          "TotalHours": 4.898613888888889E-05,
          "TotalMilliseconds": 176.3501,
          "TotalMicroseconds": 176350.1,
          "TotalNanoseconds": 176350100.0,
          "TotalMinutes": 0.0029391683333333334,
          "TotalSeconds": 0.1763501
        },
        "FrameworkDuration": {
          "Ticks": 3264051,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 326,
          "Microseconds": 405,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7778368055555554E-06,
          "TotalHours": 9.066808333333334E-05,
          "TotalMilliseconds": 326.4051,
          "TotalMicroseconds": 326405.1,
          "TotalNanoseconds": 326405100.0,
          "TotalMinutes": 0.005440085,
          "TotalSeconds": 0.3264051
        },
        "StandardOutput": null
      }
    ],
    "Result": "Passed",
    "FailedCount": 0,
    "FailedBlocksCount": 0,
    "FailedContainersCount": 0,
    "PassedCount": 1,
    "SkippedCount": 27,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 6039581,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 603,
      "Microseconds": 958,
      "Nanoseconds": 100,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 6.990255787037037E-06,
      "TotalHours": 0.00016776613888888888,
      "TotalMilliseconds": 603.9581,
      "TotalMicroseconds": 603958.1,
      "TotalNanoseconds": 603958100.0,
      "TotalMinutes": 0.010065968333333333,
      "TotalSeconds": 0.6039581
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T19:57:32.8130272-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-195732.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-195732.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 1012029,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 101,
      "Microseconds": 202,
      "Nanoseconds": 900,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 1.1713298611111112E-06,
      "TotalHours": 2.8111916666666668E-05,
      "TotalMilliseconds": 101.2029,
      "TotalMicroseconds": 101202.9,
      "TotalNanoseconds": 101202900.0,
      "TotalMinutes": 0.001686715,
      "TotalSeconds": 0.1012029
    },
    "UserDuration": {
      "Ticks": 1763501,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 176,
      "Microseconds": 350,
      "Nanoseconds": 100,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 2.0410891203703704E-06,
      "TotalHours": 4.898613888888889E-05,
      "TotalMilliseconds": 176.3501,
      "TotalMicroseconds": 176350.1,
      "TotalNanoseconds": 176350100.0,
      "TotalMinutes": 0.0029391683333333334,
      "TotalSeconds": 0.1763501
    },
    "FrameworkDuration": {
      "Ticks": 3264051,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 326,
      "Microseconds": 405,
      "Nanoseconds": 100,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 3.7778368055555554E-06,
      "TotalHours": 9.066808333333334E-05,
      "TotalMilliseconds": 326.4051,
      "TotalMicroseconds": 326405.1,
      "TotalNanoseconds": 326405100.0,
      "TotalMinutes": 0.005440085,
      "TotalSeconds": 0.3264051
    },
    "Failed": [],
    "FailedBlocks": [],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 465332,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 533,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.385787037037037E-07,
          "TotalHours": 1.2925888888888889E-05,
          "TotalMilliseconds": 46.5332,
          "TotalMicroseconds": 46533.2,
          "TotalNanoseconds": 46533200.0,
          "TotalMinutes": 0.0007755533333333334,
          "TotalSeconds": 0.0465332
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 32406,
            "Length": 1019,
            "StartLine": 690,
            "StartColumn": 64,
            "EndLine": 709,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a25e1947-552e-4517-9f94-838abc739a73",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1025107,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 102,
            "Microseconds": 510,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1864664351851852E-06,
            "TotalHours": 2.8475194444444444E-05,
            "TotalMilliseconds": 102.5107,
            "TotalMicroseconds": 102510.7,
            "TotalNanoseconds": 102510700.0,
            "TotalMinutes": 0.0017085116666666668,
            "TotalSeconds": 0.1025107
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8fac6794-3fcc-45b3-a38f-71460e3f8b6a",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.3113812-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136764,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 676,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5829166666666666E-07,
            "TotalHours": 3.799E-06,
            "TotalMilliseconds": 13.6764,
            "TotalMicroseconds": 13676.4,
            "TotalNanoseconds": 13676400.0,
            "TotalMinutes": 0.00022794,
            "TotalSeconds": 0.0136764
          },
          "UserDuration": {
            "Ticks": 888343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 834,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0281747685185185E-06,
            "TotalHours": 2.4676194444444445E-05,
            "TotalMilliseconds": 88.8343,
            "TotalMicroseconds": 88834.3,
            "TotalNanoseconds": 88834300.0,
            "TotalMinutes": 0.0014805716666666667,
            "TotalSeconds": 0.0888343
          },
          "OwnDuration": {
            "Ticks": 556043,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 604,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.435682870370371E-07,
            "TotalHours": 1.5445638888888888E-05,
            "TotalMilliseconds": 55.6043,
            "TotalMicroseconds": 55604.3,
            "TotalNanoseconds": 55604300.0,
            "TotalMinutes": 0.0009267383333333334,
            "TotalSeconds": 0.0556043
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a168d61-e698-4c98-9d41-65aa63a1b190",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3581113-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 425758,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 42,
          "Microseconds": 575,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.92775462962963E-07,
          "TotalHours": 1.1826611111111112E-05,
          "TotalMilliseconds": 42.5758,
          "TotalMicroseconds": 42575.8,
          "TotalNanoseconds": 42575800.0,
          "TotalMinutes": 0.0007095966666666667,
          "TotalSeconds": 0.0425758
        },
        "FrameworkDuration": {
          "Ticks": 39574,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 957,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.580324074074074E-08,
          "TotalHours": 1.0992777777777778E-06,
          "TotalMilliseconds": 3.9574,
          "TotalMicroseconds": 3957.4,
          "TotalNanoseconds": 3957400.0,
          "TotalMinutes": 6.595666666666667E-05,
          "TotalSeconds": 0.0039574
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 178368,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 17,
          "Microseconds": 836,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0644444444444445E-07,
          "TotalHours": 4.954666666666667E-06,
          "TotalMilliseconds": 17.8368,
          "TotalMicroseconds": 17836.8,
          "TotalNanoseconds": 17836800.0,
          "TotalMinutes": 0.00029728,
          "TotalSeconds": 0.0178368
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 6783,
            "Length": 175,
            "StartLine": 171,
            "StartColumn": 125,
            "EndLine": 175,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "75750767-75f8-461e-9c13-da76d72055cd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 171,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1392059-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 178368,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 17,
          "Microseconds": 836,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0644444444444445E-07,
          "TotalHours": 4.954666666666667E-06,
          "TotalMilliseconds": 17.8368,
          "TotalMicroseconds": 17836.8,
          "TotalNanoseconds": 17836800.0,
          "TotalMinutes": 0.00029728,
          "TotalSeconds": 0.0178368
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4715,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 471,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.457175925925926E-09,
          "TotalHours": 1.3097222222222222E-07,
          "TotalMilliseconds": 0.4715,
          "TotalMicroseconds": 471.5,
          "TotalNanoseconds": 471500.0,
          "TotalMinutes": 7.858333333333334E-06,
          "TotalSeconds": 0.0004715
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 7103,
            "Length": 737,
            "StartLine": 177,
            "StartColumn": 130,
            "EndLine": 195,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "de81f76b-bbda-4b26-8b35-74ffac9b32ed",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 177,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1566227-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4715,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 471,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.457175925925926E-09,
          "TotalHours": 1.3097222222222222E-07,
          "TotalMilliseconds": 0.4715,
          "TotalMicroseconds": 471.5,
          "TotalNanoseconds": 471500.0,
          "TotalMinutes": 7.858333333333334E-06,
          "TotalSeconds": 0.0004715
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 12879,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 287,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.490625E-08,
          "TotalHours": 3.5775E-07,
          "TotalMilliseconds": 1.2879,
          "TotalMicroseconds": 1287.9,
          "TotalNanoseconds": 1287900.0,
          "TotalMinutes": 2.1465E-05,
          "TotalSeconds": 0.0012879
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 7982,
            "Length": 311,
            "StartLine": 197,
            "StartColumn": 127,
            "EndLine": 203,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2a82f7f5-86d8-4bdb-9f95-d78fa3332876",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 197,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1570972-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 12879,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 287,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.490625E-08,
          "TotalHours": 3.5775E-07,
          "TotalMilliseconds": 1.2879,
          "TotalMicroseconds": 1287.9,
          "TotalNanoseconds": 1287900.0,
          "TotalMinutes": 2.1465E-05,
          "TotalSeconds": 0.0012879
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4573,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 457,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.292824074074074E-09,
          "TotalHours": 1.270277777777778E-07,
          "TotalMilliseconds": 0.4573,
          "TotalMicroseconds": 457.3,
          "TotalNanoseconds": 457300.0,
          "TotalMinutes": 7.621666666666667E-06,
          "TotalSeconds": 0.0004573
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 8730,
            "Length": 665,
            "StartLine": 213,
            "StartColumn": 125,
            "EndLine": 233,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0b42595a-ba88-4a79-b35c-431dcf9a2f0f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 430223,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 22,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.979432870370371E-07,
            "TotalHours": 1.1950638888888888E-05,
            "TotalMilliseconds": 43.0223,
            "TotalMicroseconds": 43022.3,
            "TotalNanoseconds": 43022300.0,
            "TotalMinutes": 0.0007170383333333333,
            "TotalSeconds": 0.0430223
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "07db29d3-e165-40cd-a853-b25e21387d28",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1730693-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 427155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 715,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.943923611111111E-07,
            "TotalHours": 1.1865416666666667E-05,
            "TotalMilliseconds": 42.7155,
            "TotalMicroseconds": 42715.5,
            "TotalNanoseconds": 42715500.0,
            "TotalMinutes": 0.000711925,
            "TotalSeconds": 0.0427155
          },
          "UserDuration": {
            "Ticks": 3068,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 306,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.550925925925926E-09,
            "TotalHours": 8.522222222222222E-08,
            "TotalMilliseconds": 0.3068,
            "TotalMicroseconds": 306.8,
            "TotalNanoseconds": 306800.0,
            "TotalMinutes": 5.113333333333333E-06,
            "TotalSeconds": 0.0003068
          },
          "OwnDuration": {
            "Ticks": 421880,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 188,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.882870370370371E-07,
            "TotalHours": 1.1718888888888888E-05,
            "TotalMilliseconds": 42.188,
            "TotalMicroseconds": 42188.0,
            "TotalNanoseconds": 42188000.0,
            "TotalMinutes": 0.0007031333333333334,
            "TotalSeconds": 0.042188
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "64343aa4-47df-4883-ac65-31e910cc2375",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 213,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1738138-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4573,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 457,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.292824074074074E-09,
          "TotalHours": 1.270277777777778E-07,
          "TotalMilliseconds": 0.4573,
          "TotalMicroseconds": 457.3,
          "TotalNanoseconds": 457300.0,
          "TotalMinutes": 7.621666666666667E-06,
          "TotalSeconds": 0.0004573
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3770,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 377,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.363425925925926E-09,
          "TotalHours": 1.0472222222222222E-07,
          "TotalMilliseconds": 0.377,
          "TotalMicroseconds": 377.0,
          "TotalNanoseconds": 377000.0,
          "TotalMinutes": 6.283333333333333E-06,
          "TotalSeconds": 0.000377
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 9523,
            "Length": 589,
            "StartLine": 235,
            "StartColumn": 113,
            "EndLine": 250,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2f5455ea-f3b3-46ef-9152-36a6c2b75ea7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 430223,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 22,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.979432870370371E-07,
            "TotalHours": 1.1950638888888888E-05,
            "TotalMilliseconds": 43.0223,
            "TotalMicroseconds": 43022.3,
            "TotalNanoseconds": 43022300.0,
            "TotalMinutes": 0.0007170383333333333,
            "TotalSeconds": 0.0430223
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "07db29d3-e165-40cd-a853-b25e21387d28",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1730693-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 427155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 715,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.943923611111111E-07,
            "TotalHours": 1.1865416666666667E-05,
            "TotalMilliseconds": 42.7155,
            "TotalMicroseconds": 42715.5,
            "TotalNanoseconds": 42715500.0,
            "TotalMinutes": 0.000711925,
            "TotalSeconds": 0.0427155
          },
          "UserDuration": {
            "Ticks": 3068,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 306,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.550925925925926E-09,
            "TotalHours": 8.522222222222222E-08,
            "TotalMilliseconds": 0.3068,
            "TotalMicroseconds": 306.8,
            "TotalNanoseconds": 306800.0,
            "TotalMinutes": 5.113333333333333E-06,
            "TotalSeconds": 0.0003068
          },
          "OwnDuration": {
            "Ticks": 421880,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 188,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.882870370370371E-07,
            "TotalHours": 1.1718888888888888E-05,
            "TotalMilliseconds": 42.188,
            "TotalMicroseconds": 42188.0,
            "TotalNanoseconds": 42188000.0,
            "TotalMinutes": 0.0007031333333333334,
            "TotalSeconds": 0.042188
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "64343aa4-47df-4883-ac65-31e910cc2375",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 235,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1742811-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3770,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 377,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.363425925925926E-09,
          "TotalHours": 1.0472222222222222E-07,
          "TotalMilliseconds": 0.377,
          "TotalMicroseconds": 377.0,
          "TotalNanoseconds": 377000.0,
          "TotalMinutes": 6.283333333333333E-06,
          "TotalSeconds": 0.000377
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 364,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.22337962962963E-09,
          "TotalHours": 1.0136111111111112E-07,
          "TotalMilliseconds": 0.3649,
          "TotalMicroseconds": 364.9,
          "TotalNanoseconds": 364900.0,
          "TotalMinutes": 6.081666666666666E-06,
          "TotalSeconds": 0.0003649
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 10546,
            "Length": 475,
            "StartLine": 260,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "816d0ad3-5a0d-4bc9-88e2-3f2dbc7d2bf1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 490716,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 49,
            "Microseconds": 71,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.679583333333334E-07,
            "TotalHours": 1.3631E-05,
            "TotalMilliseconds": 49.0716,
            "TotalMicroseconds": 49071.6,
            "TotalNanoseconds": 49071600.0,
            "TotalMinutes": 0.00081786,
            "TotalSeconds": 0.0490716
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "05b34240-d9dd-486e-acd8-0d1adf7bd884",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1783939-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 486518,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 651,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.63099537037037E-07,
            "TotalHours": 1.3514388888888888E-05,
            "TotalMilliseconds": 48.6518,
            "TotalMicroseconds": 48651.8,
            "TotalNanoseconds": 48651800.0,
            "TotalMinutes": 0.0008108633333333334,
            "TotalSeconds": 0.0486518
          },
          "UserDuration": {
            "Ticks": 4198,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 419,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.858796296296297E-09,
            "TotalHours": 1.1661111111111111E-07,
            "TotalMilliseconds": 0.4198,
            "TotalMicroseconds": 419.8,
            "TotalNanoseconds": 419800.0,
            "TotalMinutes": 6.996666666666667E-06,
            "TotalSeconds": 0.0004198
          },
          "OwnDuration": {
            "Ticks": 483730,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 373,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.598726851851852E-07,
            "TotalHours": 1.3436944444444444E-05,
            "TotalMilliseconds": 48.373,
            "TotalMicroseconds": 48373.0,
            "TotalNanoseconds": 48373000.0,
            "TotalMinutes": 0.0008062166666666666,
            "TotalSeconds": 0.048373
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "57be614f-d6ed-4991-86e1-d73f3fec75dd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 260,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1790055-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 364,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.22337962962963E-09,
          "TotalHours": 1.0136111111111112E-07,
          "TotalMilliseconds": 0.3649,
          "TotalMicroseconds": 364.9,
          "TotalNanoseconds": 364900.0,
          "TotalMinutes": 6.081666666666666E-06,
          "TotalSeconds": 0.0003649
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3337,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.862268518518519E-09,
          "TotalHours": 9.269444444444444E-08,
          "TotalMilliseconds": 0.3337,
          "TotalMicroseconds": 333.7,
          "TotalNanoseconds": 333700.0,
          "TotalMinutes": 5.561666666666667E-06,
          "TotalSeconds": 0.0003337
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 11148,
            "Length": 563,
            "StartLine": 274,
            "StartColumn": 112,
            "EndLine": 286,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e831fc2a-ef97-45e6-8f53-b28b0860f394",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 490716,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 49,
            "Microseconds": 71,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.679583333333334E-07,
            "TotalHours": 1.3631E-05,
            "TotalMilliseconds": 49.0716,
            "TotalMicroseconds": 49071.6,
            "TotalNanoseconds": 49071600.0,
            "TotalMinutes": 0.00081786,
            "TotalSeconds": 0.0490716
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "05b34240-d9dd-486e-acd8-0d1adf7bd884",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1783939-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 486518,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 651,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.63099537037037E-07,
            "TotalHours": 1.3514388888888888E-05,
            "TotalMilliseconds": 48.6518,
            "TotalMicroseconds": 48651.8,
            "TotalNanoseconds": 48651800.0,
            "TotalMinutes": 0.0008108633333333334,
            "TotalSeconds": 0.0486518
          },
          "UserDuration": {
            "Ticks": 4198,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 419,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.858796296296297E-09,
            "TotalHours": 1.1661111111111111E-07,
            "TotalMilliseconds": 0.4198,
            "TotalMicroseconds": 419.8,
            "TotalNanoseconds": 419800.0,
            "TotalMinutes": 6.996666666666667E-06,
            "TotalSeconds": 0.0004198
          },
          "OwnDuration": {
            "Ticks": 483730,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 373,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.598726851851852E-07,
            "TotalHours": 1.3436944444444444E-05,
            "TotalMilliseconds": 48.373,
            "TotalMicroseconds": 48373.0,
            "TotalNanoseconds": 48373000.0,
            "TotalMinutes": 0.0008062166666666666,
            "TotalSeconds": 0.048373
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "57be614f-d6ed-4991-86e1-d73f3fec75dd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1793882-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3337,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.862268518518519E-09,
          "TotalHours": 9.269444444444444E-08,
          "TotalMilliseconds": 0.3337,
          "TotalMicroseconds": 333.7,
          "TotalNanoseconds": 333700.0,
          "TotalMinutes": 5.561666666666667E-06,
          "TotalSeconds": 0.0003337
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4995,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 499,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.78125E-09,
          "TotalHours": 1.3875E-07,
          "TotalMilliseconds": 0.4995,
          "TotalMicroseconds": 499.5,
          "TotalNanoseconds": 499500.0,
          "TotalMinutes": 8.325E-06,
          "TotalSeconds": 0.0004995
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 13896,
            "Length": 222,
            "StartLine": 334,
            "StartColumn": 88,
            "EndLine": 339,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "018b0735-44fb-4351-8cbb-103a5080ddec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 334,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1892888-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4995,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 499,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.78125E-09,
          "TotalHours": 1.3875E-07,
          "TotalMilliseconds": 0.4995,
          "TotalMicroseconds": 499.5,
          "TotalNanoseconds": 499500.0,
          "TotalMinutes": 8.325E-06,
          "TotalSeconds": 0.0004995
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3929,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 392,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.547453703703704E-09,
          "TotalHours": 1.091388888888889E-07,
          "TotalMilliseconds": 0.3929,
          "TotalMicroseconds": 392.9,
          "TotalNanoseconds": 392900.0,
          "TotalMinutes": 6.548333333333333E-06,
          "TotalSeconds": 0.0003929
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14217,
            "Length": 279,
            "StartLine": 341,
            "StartColumn": 84,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b8545ecd-ca05-45ba-a02a-77be600d15d2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 341,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1898101-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3929,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 392,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.547453703703704E-09,
          "TotalHours": 1.091388888888889E-07,
          "TotalMilliseconds": 0.3929,
          "TotalMicroseconds": 392.9,
          "TotalNanoseconds": 392900.0,
          "TotalMinutes": 6.548333333333333E-06,
          "TotalSeconds": 0.0003929
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3822,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 382,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.423611111111111E-09,
          "TotalHours": 1.0616666666666667E-07,
          "TotalMilliseconds": 0.3822,
          "TotalMicroseconds": 382.2,
          "TotalNanoseconds": 382200.0,
          "TotalMinutes": 6.37E-06,
          "TotalSeconds": 0.0003822
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14610,
            "Length": 545,
            "StartLine": 349,
            "StartColumn": 99,
            "EndLine": 358,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6ceb7190-f5e1-4029-b4a8-414804e6bcec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 349,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1902214-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3822,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 382,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.423611111111111E-09,
          "TotalHours": 1.0616666666666667E-07,
          "TotalMilliseconds": 0.3822,
          "TotalMicroseconds": 382.2,
          "TotalNanoseconds": 382200.0,
          "TotalMinutes": 6.37E-06,
          "TotalSeconds": 0.0003822
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4646,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 464,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.377314814814815E-09,
          "TotalHours": 1.2905555555555556E-07,
          "TotalMilliseconds": 0.4646,
          "TotalMicroseconds": 464.6,
          "TotalNanoseconds": 464600.0,
          "TotalMinutes": 7.743333333333333E-06,
          "TotalSeconds": 0.0004646
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 15590,
            "Length": 427,
            "StartLine": 368,
            "StartColumn": 127,
            "EndLine": 375,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "249692be-ef5e-4cd0-888d-6226a78c3fd8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 368,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1951182-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4646,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 464,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.377314814814815E-09,
          "TotalHours": 1.2905555555555556E-07,
          "TotalMilliseconds": 0.4646,
          "TotalMicroseconds": 464.6,
          "TotalNanoseconds": 464600.0,
          "TotalMinutes": 7.743333333333333E-06,
          "TotalSeconds": 0.0004646
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4425,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 442,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.1215277777777775E-09,
          "TotalHours": 1.2291666666666667E-07,
          "TotalMilliseconds": 0.4425,
          "TotalMicroseconds": 442.5,
          "TotalNanoseconds": 442500.0,
          "TotalMinutes": 7.375E-06,
          "TotalSeconds": 0.0004425
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16157,
            "Length": 411,
            "StartLine": 377,
            "StartColumn": 125,
            "EndLine": 384,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1d33fd1e-5346-410c-ba01-8579120cdca4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 377,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1956067-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4425,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 442,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.1215277777777775E-09,
          "TotalHours": 1.2291666666666667E-07,
          "TotalMilliseconds": 0.4425,
          "TotalMicroseconds": 442.5,
          "TotalNanoseconds": 442500.0,
          "TotalMinutes": 7.375E-06,
          "TotalSeconds": 0.0004425
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5477,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 547,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.339120370370371E-09,
          "TotalHours": 1.521388888888889E-07,
          "TotalMilliseconds": 0.5477,
          "TotalMicroseconds": 547.7,
          "TotalNanoseconds": 547700.0,
          "TotalMinutes": 9.128333333333334E-06,
          "TotalSeconds": 0.0005477
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16702,
            "Length": 542,
            "StartLine": 386,
            "StartColumn": 119,
            "EndLine": 396,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0c9a7a08-6819-48ac-8d14-af5221f5bede",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 386,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1960684-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5477,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 547,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.339120370370371E-09,
          "TotalHours": 1.521388888888889E-07,
          "TotalMilliseconds": 0.5477,
          "TotalMicroseconds": 547.7,
          "TotalNanoseconds": 547700.0,
          "TotalMinutes": 9.128333333333334E-06,
          "TotalSeconds": 0.0005477
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4858,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 485,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.622685185185185E-09,
          "TotalHours": 1.3494444444444445E-07,
          "TotalMilliseconds": 0.4858,
          "TotalMicroseconds": 485.8,
          "TotalNanoseconds": 485800.0,
          "TotalMinutes": 8.096666666666667E-06,
          "TotalSeconds": 0.0004858
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17662,
            "Length": 485,
            "StartLine": 406,
            "StartColumn": 116,
            "EndLine": 416,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c2f3526-ec58-4af3-ae90-4ea615b53f44",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 406,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2014178-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4858,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 485,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.622685185185185E-09,
          "TotalHours": 1.3494444444444445E-07,
          "TotalMilliseconds": 0.4858,
          "TotalMicroseconds": 485.8,
          "TotalNanoseconds": 485800.0,
          "TotalMinutes": 8.096666666666667E-06,
          "TotalSeconds": 0.0004858
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4502,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.210648148148148E-09,
          "TotalHours": 1.2505555555555555E-07,
          "TotalMilliseconds": 0.4502,
          "TotalMicroseconds": 450.2,
          "TotalNanoseconds": 450200.0,
          "TotalMinutes": 7.503333333333333E-06,
          "TotalSeconds": 0.0004502
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18271,
            "Length": 522,
            "StartLine": 418,
            "StartColumn": 109,
            "EndLine": 429,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d32fe7a7-185d-4054-9eeb-c495da8764fa",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 418,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2019287-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4502,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.210648148148148E-09,
          "TotalHours": 1.2505555555555555E-07,
          "TotalMilliseconds": 0.4502,
          "TotalMicroseconds": 450.2,
          "TotalNanoseconds": 450200.0,
          "TotalMinutes": 7.503333333333333E-06,
          "TotalSeconds": 0.0004502
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4526,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 452,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.238425925925926E-09,
          "TotalHours": 1.2572222222222222E-07,
          "TotalMilliseconds": 0.4526,
          "TotalMicroseconds": 452.6,
          "TotalNanoseconds": 452600.0,
          "TotalMinutes": 7.543333333333334E-06,
          "TotalSeconds": 0.0004526
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18920,
            "Length": 402,
            "StartLine": 431,
            "StartColumn": 112,
            "EndLine": 439,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b11f8d81-a1f4-4ce8-ba36-c6f32a0adc46",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 431,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2024-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4526,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 452,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.238425925925926E-09,
          "TotalHours": 1.2572222222222222E-07,
          "TotalMilliseconds": 0.4526,
          "TotalMicroseconds": 452.6,
          "TotalNanoseconds": 452600.0,
          "TotalMinutes": 7.543333333333334E-06,
          "TotalSeconds": 0.0004526
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 497,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.762731481481481E-09,
          "TotalHours": 1.3830555555555556E-07,
          "TotalMilliseconds": 0.4979,
          "TotalMicroseconds": 497.9,
          "TotalNanoseconds": 497900.0,
          "TotalMinutes": 8.298333333333333E-06,
          "TotalSeconds": 0.0004979
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21413,
            "Length": 523,
            "StartLine": 481,
            "StartColumn": 140,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "742e0908-f7bc-4373-9aa8-1b5b34352b5e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 481,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2226557-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 497,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.762731481481481E-09,
          "TotalHours": 1.3830555555555556E-07,
          "TotalMilliseconds": 0.4979,
          "TotalMicroseconds": 497.9,
          "TotalNanoseconds": 497900.0,
          "TotalMinutes": 8.298333333333333E-06,
          "TotalSeconds": 0.0004979
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3931,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 393,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.549768518518518E-09,
          "TotalHours": 1.0919444444444445E-07,
          "TotalMilliseconds": 0.3931,
          "TotalMicroseconds": 393.1,
          "TotalNanoseconds": 393100.0,
          "TotalMinutes": 6.551666666666667E-06,
          "TotalSeconds": 0.0003931
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22087,
            "Length": 508,
            "StartLine": 491,
            "StartColumn": 136,
            "EndLine": 499,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f5dc0758-80df-4350-a8c8-ff39668c35e6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2231988-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3931,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 393,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.549768518518518E-09,
          "TotalHours": 1.0919444444444445E-07,
          "TotalMilliseconds": 0.3931,
          "TotalMicroseconds": 393.1,
          "TotalNanoseconds": 393100.0,
          "TotalMinutes": 6.551666666666667E-06,
          "TotalSeconds": 0.0003931
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3374,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 337,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9050925925925925E-09,
          "TotalHours": 9.372222222222223E-08,
          "TotalMilliseconds": 0.3374,
          "TotalMicroseconds": 337.4,
          "TotalNanoseconds": 337400.0,
          "TotalMinutes": 5.623333333333333E-06,
          "TotalSeconds": 0.0003374
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22742,
            "Length": 523,
            "StartLine": 501,
            "StartColumn": 132,
            "EndLine": 509,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "56d76c46-1ebd-4a04-975a-240984d654cf",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 501,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2235984-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3374,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 337,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9050925925925925E-09,
          "TotalHours": 9.372222222222223E-08,
          "TotalMilliseconds": 0.3374,
          "TotalMicroseconds": 337.4,
          "TotalNanoseconds": 337400.0,
          "TotalMinutes": 5.623333333333333E-06,
          "TotalSeconds": 0.0003374
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4023,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.65625E-09,
          "TotalHours": 1.1175E-07,
          "TotalMilliseconds": 0.4023,
          "TotalMicroseconds": 402.3,
          "TotalNanoseconds": 402300.0,
          "TotalMinutes": 6.705E-06,
          "TotalSeconds": 0.0004023
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23420,
            "Length": 568,
            "StartLine": 511,
            "StartColumn": 140,
            "EndLine": 520,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "72ff6a4c-2ad7-4b5c-8d12-1dccf2cb732f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 511,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2239853-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4023,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.65625E-09,
          "TotalHours": 1.1175E-07,
          "TotalMilliseconds": 0.4023,
          "TotalMicroseconds": 402.3,
          "TotalNanoseconds": 402300.0,
          "TotalMinutes": 6.705E-06,
          "TotalSeconds": 0.0004023
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 341,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.953703703703704E-09,
          "TotalHours": 9.488888888888888E-08,
          "TotalMilliseconds": 0.3416,
          "TotalMicroseconds": 341.6,
          "TotalNanoseconds": 341600.0,
          "TotalMinutes": 5.693333333333334E-06,
          "TotalSeconds": 0.0003416
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24136,
            "Length": 581,
            "StartLine": 522,
            "StartColumn": 133,
            "EndLine": 530,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1f1a4ac4-f22c-4a81-b5af-c39fb6c8529d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 522,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.224376-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 341,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.953703703703704E-09,
          "TotalHours": 9.488888888888888E-08,
          "TotalMilliseconds": 0.3416,
          "TotalMicroseconds": 341.6,
          "TotalNanoseconds": 341600.0,
          "TotalMinutes": 5.693333333333334E-06,
          "TotalSeconds": 0.0003416
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4508,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.217592592592593E-09,
          "TotalHours": 1.252222222222222E-07,
          "TotalMilliseconds": 0.4508,
          "TotalMicroseconds": 450.8,
          "TotalNanoseconds": 450800.0,
          "TotalMinutes": 7.513333333333333E-06,
          "TotalSeconds": 0.0004508
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25170,
            "Length": 235,
            "StartLine": 540,
            "StartColumn": 131,
            "EndLine": 545,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ea83cf0a-fca9-4ec5-a0f7-52a9d3842ac6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 129560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 956,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.499537037037037E-07,
            "TotalHours": 3.598888888888889E-06,
            "TotalMilliseconds": 12.956,
            "TotalMicroseconds": 12956.0,
            "TotalNanoseconds": 12956000.0,
            "TotalMinutes": 0.00021593333333333334,
            "TotalSeconds": 0.012956
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a6a54935-2a62-4b8d-8fa9-b6caf6208660",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2288965-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 126831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 683,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4679513888888888E-07,
            "TotalHours": 3.5230833333333335E-06,
            "TotalMilliseconds": 12.6831,
            "TotalMicroseconds": 12683.1,
            "TotalNanoseconds": 12683100.0,
            "TotalMinutes": 0.000211385,
            "TotalSeconds": 0.0126831
          },
          "UserDuration": {
            "Ticks": 2729,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 272,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.158564814814815E-09,
            "TotalHours": 7.580555555555555E-08,
            "TotalMilliseconds": 0.2729,
            "TotalMicroseconds": 272.9,
            "TotalNanoseconds": 272900.0,
            "TotalMinutes": 4.5483333333333335E-06,
            "TotalSeconds": 0.0002729
          },
          "OwnDuration": {
            "Ticks": 120634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 63,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3962268518518517E-07,
            "TotalHours": 3.3509444444444444E-06,
            "TotalMilliseconds": 12.0634,
            "TotalMicroseconds": 12063.4,
            "TotalNanoseconds": 12063400.0,
            "TotalMinutes": 0.00020105666666666666,
            "TotalSeconds": 0.0120634
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c5750ee0-ab21-4214-8787-6c07688211d6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 540,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2296836-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4508,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.217592592592593E-09,
          "TotalHours": 1.252222222222222E-07,
          "TotalMilliseconds": 0.4508,
          "TotalMicroseconds": 450.8,
          "TotalNanoseconds": 450800.0,
          "TotalMinutes": 7.513333333333333E-06,
          "TotalSeconds": 0.0004508
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4418,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 441,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.113425925925926E-09,
          "TotalHours": 1.2272222222222223E-07,
          "TotalMilliseconds": 0.4418,
          "TotalMicroseconds": 441.8,
          "TotalNanoseconds": 441800.0,
          "TotalMinutes": 7.363333333333334E-06,
          "TotalSeconds": 0.0004418
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25538,
            "Length": 710,
            "StartLine": 547,
            "StartColumn": 118,
            "EndLine": 562,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "63419307-30e8-473f-93cb-1bc9aea8c209",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 129560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 956,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.499537037037037E-07,
            "TotalHours": 3.598888888888889E-06,
            "TotalMilliseconds": 12.956,
            "TotalMicroseconds": 12956.0,
            "TotalNanoseconds": 12956000.0,
            "TotalMinutes": 0.00021593333333333334,
            "TotalSeconds": 0.012956
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a6a54935-2a62-4b8d-8fa9-b6caf6208660",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2288965-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 126831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 683,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4679513888888888E-07,
            "TotalHours": 3.5230833333333335E-06,
            "TotalMilliseconds": 12.6831,
            "TotalMicroseconds": 12683.1,
            "TotalNanoseconds": 12683100.0,
            "TotalMinutes": 0.000211385,
            "TotalSeconds": 0.0126831
          },
          "UserDuration": {
            "Ticks": 2729,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 272,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.158564814814815E-09,
            "TotalHours": 7.580555555555555E-08,
            "TotalMilliseconds": 0.2729,
            "TotalMicroseconds": 272.9,
            "TotalNanoseconds": 272900.0,
            "TotalMinutes": 4.5483333333333335E-06,
            "TotalSeconds": 0.0002729
          },
          "OwnDuration": {
            "Ticks": 120634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 63,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3962268518518517E-07,
            "TotalHours": 3.3509444444444444E-06,
            "TotalMilliseconds": 12.0634,
            "TotalMicroseconds": 12063.4,
            "TotalNanoseconds": 12063400.0,
            "TotalMinutes": 0.00020105666666666666,
            "TotalSeconds": 0.0120634
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c5750ee0-ab21-4214-8787-6c07688211d6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 547,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.230157-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4418,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 441,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.113425925925926E-09,
          "TotalHours": 1.2272222222222223E-07,
          "TotalMilliseconds": 0.4418,
          "TotalMicroseconds": 441.8,
          "TotalNanoseconds": 441800.0,
          "TotalMinutes": 7.363333333333334E-06,
          "TotalSeconds": 0.0004418
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4156,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 415,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.810185185185185E-09,
          "TotalHours": 1.1544444444444444E-07,
          "TotalMilliseconds": 0.4156,
          "TotalMicroseconds": 415.6,
          "TotalNanoseconds": 415600.0,
          "TotalMinutes": 6.926666666666667E-06,
          "TotalSeconds": 0.0004156
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29122,
            "Length": 1022,
            "StartLine": 617,
            "StartColumn": 122,
            "EndLine": 639,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f767bffc-c82f-4145-8c6f-0739f5bb3eb4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 52497,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 249,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.076041666666666E-08,
            "TotalHours": 1.45825E-06,
            "TotalMilliseconds": 5.2497,
            "TotalMicroseconds": 5249.7,
            "TotalNanoseconds": 5249700.0,
            "TotalMinutes": 8.7495E-05,
            "TotalSeconds": 0.0052497
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dec18ed3-b40d-4b0c-86e0-f4bac9c2618f",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.306144-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 51382,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 138,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.9469907407407405E-08,
            "TotalHours": 1.4272777777777779E-06,
            "TotalMilliseconds": 5.1382,
            "TotalMicroseconds": 5138.2,
            "TotalNanoseconds": 5138200.0,
            "TotalMinutes": 8.563666666666667E-05,
            "TotalSeconds": 0.0051382
          },
          "UserDuration": {
            "Ticks": 1115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 111,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2905092592592593E-09,
            "TotalHours": 3.097222222222222E-08,
            "TotalMilliseconds": 0.1115,
            "TotalMicroseconds": 111.5,
            "TotalNanoseconds": 111500.0,
            "TotalMinutes": 1.8583333333333333E-06,
            "TotalSeconds": 0.0001115
          },
          "OwnDuration": {
            "Ticks": 45141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 514,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2246527777777776E-08,
            "TotalHours": 1.2539166666666667E-06,
            "TotalMilliseconds": 4.5141,
            "TotalMicroseconds": 4514.1,
            "TotalNanoseconds": 4514100.0,
            "TotalMinutes": 7.5235E-05,
            "TotalSeconds": 0.0045141
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3e72d4b8-7691-4655-9996-1565d9c8bde9",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 617,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3069381-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4156,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 415,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.810185185185185E-09,
          "TotalHours": 1.1544444444444444E-07,
          "TotalMilliseconds": 0.4156,
          "TotalMicroseconds": 415.6,
          "TotalNanoseconds": 415600.0,
          "TotalMinutes": 6.926666666666667E-06,
          "TotalSeconds": 0.0004156
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3200,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 320,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7037037037037036E-09,
          "TotalHours": 8.88888888888889E-08,
          "TotalMilliseconds": 0.32,
          "TotalMicroseconds": 320.0,
          "TotalNanoseconds": 320000.0,
          "TotalMinutes": 5.333333333333334E-06,
          "TotalSeconds": 0.00032
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30280,
            "Length": 781,
            "StartLine": 641,
            "StartColumn": 121,
            "EndLine": 654,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8e0d766a-8bd2-496a-9d84-ae9deed4bbbd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 52497,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 249,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.076041666666666E-08,
            "TotalHours": 1.45825E-06,
            "TotalMilliseconds": 5.2497,
            "TotalMicroseconds": 5249.7,
            "TotalNanoseconds": 5249700.0,
            "TotalMinutes": 8.7495E-05,
            "TotalSeconds": 0.0052497
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dec18ed3-b40d-4b0c-86e0-f4bac9c2618f",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.306144-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 51382,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 138,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.9469907407407405E-08,
            "TotalHours": 1.4272777777777779E-06,
            "TotalMilliseconds": 5.1382,
            "TotalMicroseconds": 5138.2,
            "TotalNanoseconds": 5138200.0,
            "TotalMinutes": 8.563666666666667E-05,
            "TotalSeconds": 0.0051382
          },
          "UserDuration": {
            "Ticks": 1115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 111,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2905092592592593E-09,
            "TotalHours": 3.097222222222222E-08,
            "TotalMilliseconds": 0.1115,
            "TotalMicroseconds": 111.5,
            "TotalNanoseconds": 111500.0,
            "TotalMinutes": 1.8583333333333333E-06,
            "TotalSeconds": 0.0001115
          },
          "OwnDuration": {
            "Ticks": 45141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 514,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2246527777777776E-08,
            "TotalHours": 1.2539166666666667E-06,
            "TotalMilliseconds": 4.5141,
            "TotalMicroseconds": 4514.1,
            "TotalNanoseconds": 4514100.0,
            "TotalMinutes": 7.5235E-05,
            "TotalSeconds": 0.0045141
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3e72d4b8-7691-4655-9996-1565d9c8bde9",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 641,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3073708-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3200,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 320,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7037037037037036E-09,
          "TotalHours": 8.88888888888889E-08,
          "TotalMilliseconds": 0.32,
          "TotalMicroseconds": 320.0,
          "TotalNanoseconds": 320000.0,
          "TotalMinutes": 5.333333333333334E-06,
          "TotalSeconds": 0.00032
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3732,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 373,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.319444444444445E-09,
          "TotalHours": 1.0366666666666667E-07,
          "TotalMilliseconds": 0.3732,
          "TotalMicroseconds": 373.2,
          "TotalNanoseconds": 373200.0,
          "TotalMinutes": 6.22E-06,
          "TotalSeconds": 0.0003732
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 33580,
            "Length": 725,
            "StartLine": 711,
            "StartColumn": 140,
            "EndLine": 727,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ca33f120-a420-484b-9f77-aef5aedc45e3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1025107,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 102,
            "Microseconds": 510,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1864664351851852E-06,
            "TotalHours": 2.8475194444444444E-05,
            "TotalMilliseconds": 102.5107,
            "TotalMicroseconds": 102510.7,
            "TotalNanoseconds": 102510700.0,
            "TotalMinutes": 0.0017085116666666668,
            "TotalSeconds": 0.1025107
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8fac6794-3fcc-45b3-a38f-71460e3f8b6a",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.3113812-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136764,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 676,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5829166666666666E-07,
            "TotalHours": 3.799E-06,
            "TotalMilliseconds": 13.6764,
            "TotalMicroseconds": 13676.4,
            "TotalNanoseconds": 13676400.0,
            "TotalMinutes": 0.00022794,
            "TotalSeconds": 0.0136764
          },
          "UserDuration": {
            "Ticks": 888343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 834,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0281747685185185E-06,
            "TotalHours": 2.4676194444444445E-05,
            "TotalMilliseconds": 88.8343,
            "TotalMicroseconds": 88834.3,
            "TotalNanoseconds": 88834300.0,
            "TotalMinutes": 0.0014805716666666667,
            "TotalSeconds": 0.0888343
          },
          "OwnDuration": {
            "Ticks": 556043,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 604,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.435682870370371E-07,
            "TotalHours": 1.5445638888888888E-05,
            "TotalMilliseconds": 55.6043,
            "TotalMicroseconds": 55604.3,
            "TotalNanoseconds": 55604300.0,
            "TotalMinutes": 0.0009267383333333334,
            "TotalSeconds": 0.0556043
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a168d61-e698-4c98-9d41-65aa63a1b190",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 711,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.4046726-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3732,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 373,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.319444444444445E-09,
          "TotalHours": 1.0366666666666667E-07,
          "TotalMilliseconds": 0.3732,
          "TotalMicroseconds": 373.2,
          "TotalNanoseconds": 373200.0,
          "TotalMinutes": 6.22E-06,
          "TotalSeconds": 0.0003732
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3448,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 344,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9907407407407404E-09,
          "TotalHours": 9.577777777777778E-08,
          "TotalMilliseconds": 0.3448,
          "TotalMicroseconds": 344.8,
          "TotalNanoseconds": 344800.0,
          "TotalMinutes": 5.746666666666667E-06,
          "TotalSeconds": 0.0003448
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 34757,
            "Length": 1070,
            "StartLine": 737,
            "StartColumn": 130,
            "EndLine": 757,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e140c90d-c424-40d0-bae7-2a2b3348fec2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1068903,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 106,
            "Microseconds": 890,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.23715625E-06,
            "TotalHours": 2.969175E-05,
            "TotalMilliseconds": 106.8903,
            "TotalMicroseconds": 106890.3,
            "TotalNanoseconds": 106890300.0,
            "TotalMinutes": 0.001781505,
            "TotalSeconds": 0.1068903
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "79bcd28f-e66b-4cfe-9c04-ba2a88d3f2ff",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.4086402-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 179432,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 943,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0767592592592592E-07,
            "TotalHours": 4.9842222222222225E-06,
            "TotalMilliseconds": 17.9432,
            "TotalMicroseconds": 17943.2,
            "TotalNanoseconds": 17943200.0,
            "TotalMinutes": 0.00029905333333333335,
            "TotalSeconds": 0.0179432
          },
          "UserDuration": {
            "Ticks": 889471,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 947,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0294803240740741E-06,
            "TotalHours": 2.470752777777778E-05,
            "TotalMilliseconds": 88.9471,
            "TotalMicroseconds": 88947.1,
            "TotalNanoseconds": 88947100.0,
            "TotalMinutes": 0.0014824516666666666,
            "TotalSeconds": 0.0889471
          },
          "OwnDuration": {
            "Ticks": 1065455,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 106,
            "Microseconds": 545,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2331655092592592E-06,
            "TotalHours": 2.9595972222222224E-05,
            "TotalMilliseconds": 106.5455,
            "TotalMicroseconds": 106545.5,
            "TotalNanoseconds": 106545500.0,
            "TotalMinutes": 0.0017757583333333333,
            "TotalSeconds": 0.1065455
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "894a0d10-4025-49c3-a93c-76379ab889be",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 730,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 737,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.4092557-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3448,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 344,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9907407407407404E-09,
          "TotalHours": 9.577777777777778E-08,
          "TotalMilliseconds": 0.3448,
          "TotalMicroseconds": 344.8,
          "TotalNanoseconds": 344800.0,
          "TotalMinutes": 5.746666666666667E-06,
          "TotalSeconds": 0.0003448
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 178368,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 17,
          "Microseconds": 836,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0644444444444445E-07,
          "TotalHours": 4.954666666666667E-06,
          "TotalMilliseconds": 17.8368,
          "TotalMicroseconds": 17836.8,
          "TotalNanoseconds": 17836800.0,
          "TotalMinutes": 0.00029728,
          "TotalSeconds": 0.0178368
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 6783,
            "Length": 175,
            "StartLine": 171,
            "StartColumn": 125,
            "EndLine": 175,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "75750767-75f8-461e-9c13-da76d72055cd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 171,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1392059-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 178368,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 17,
          "Microseconds": 836,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.0644444444444445E-07,
          "TotalHours": 4.954666666666667E-06,
          "TotalMilliseconds": 17.8368,
          "TotalMicroseconds": 17836.8,
          "TotalNanoseconds": 17836800.0,
          "TotalMinutes": 0.00029728,
          "TotalSeconds": 0.0178368
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4715,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 471,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.457175925925926E-09,
          "TotalHours": 1.3097222222222222E-07,
          "TotalMilliseconds": 0.4715,
          "TotalMicroseconds": 471.5,
          "TotalNanoseconds": 471500.0,
          "TotalMinutes": 7.858333333333334E-06,
          "TotalSeconds": 0.0004715
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 7103,
            "Length": 737,
            "StartLine": 177,
            "StartColumn": 130,
            "EndLine": 195,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "de81f76b-bbda-4b26-8b35-74ffac9b32ed",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 177,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1566227-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4715,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 471,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.457175925925926E-09,
          "TotalHours": 1.3097222222222222E-07,
          "TotalMilliseconds": 0.4715,
          "TotalMicroseconds": 471.5,
          "TotalNanoseconds": 471500.0,
          "TotalMinutes": 7.858333333333334E-06,
          "TotalSeconds": 0.0004715
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 12879,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 287,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.490625E-08,
          "TotalHours": 3.5775E-07,
          "TotalMilliseconds": 1.2879,
          "TotalMicroseconds": 1287.9,
          "TotalNanoseconds": 1287900.0,
          "TotalMinutes": 2.1465E-05,
          "TotalSeconds": 0.0012879
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 7982,
            "Length": 311,
            "StartLine": 197,
            "StartColumn": 127,
            "EndLine": 203,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2a82f7f5-86d8-4bdb-9f95-d78fa3332876",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 376959,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 695,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3629513888888887E-07,
            "TotalHours": 1.0471083333333334E-05,
            "TotalMilliseconds": 37.6959,
            "TotalMicroseconds": 37695.9,
            "TotalNanoseconds": 37695900.0,
            "TotalMinutes": 0.000628265,
            "TotalSeconds": 0.0376959
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1353701-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 375213,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 521,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.3427430555555555E-07,
            "TotalHours": 1.0422583333333334E-05,
            "TotalMilliseconds": 37.5213,
            "TotalMicroseconds": 37521.3,
            "TotalNanoseconds": 37521300.0,
            "TotalMinutes": 0.000625355,
            "TotalSeconds": 0.0375213
          },
          "UserDuration": {
            "Ticks": 1746,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 174,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0208333333333332E-09,
            "TotalHours": 4.85E-08,
            "TotalMilliseconds": 0.1746,
            "TotalMicroseconds": 174.6,
            "TotalNanoseconds": 174600.0,
            "TotalMinutes": 2.91E-06,
            "TotalSeconds": 0.0001746
          },
          "OwnDuration": {
            "Ticks": 180997,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 99,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0948726851851852E-07,
            "TotalHours": 5.027694444444444E-06,
            "TotalMilliseconds": 18.0997,
            "TotalMicroseconds": 18099.7,
            "TotalNanoseconds": 18099700.0,
            "TotalMinutes": 0.0003016616666666667,
            "TotalSeconds": 0.0180997
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "aac1037b-02df-4d26-827a-cf8e636e7946",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 197,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1570972-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 12879,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 287,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.490625E-08,
          "TotalHours": 3.5775E-07,
          "TotalMilliseconds": 1.2879,
          "TotalMicroseconds": 1287.9,
          "TotalNanoseconds": 1287900.0,
          "TotalMinutes": 2.1465E-05,
          "TotalSeconds": 0.0012879
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4573,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 457,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.292824074074074E-09,
          "TotalHours": 1.270277777777778E-07,
          "TotalMilliseconds": 0.4573,
          "TotalMicroseconds": 457.3,
          "TotalNanoseconds": 457300.0,
          "TotalMinutes": 7.621666666666667E-06,
          "TotalSeconds": 0.0004573
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 8730,
            "Length": 665,
            "StartLine": 213,
            "StartColumn": 125,
            "EndLine": 233,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0b42595a-ba88-4a79-b35c-431dcf9a2f0f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 430223,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 22,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.979432870370371E-07,
            "TotalHours": 1.1950638888888888E-05,
            "TotalMilliseconds": 43.0223,
            "TotalMicroseconds": 43022.3,
            "TotalNanoseconds": 43022300.0,
            "TotalMinutes": 0.0007170383333333333,
            "TotalSeconds": 0.0430223
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "07db29d3-e165-40cd-a853-b25e21387d28",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1730693-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 427155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 715,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.943923611111111E-07,
            "TotalHours": 1.1865416666666667E-05,
            "TotalMilliseconds": 42.7155,
            "TotalMicroseconds": 42715.5,
            "TotalNanoseconds": 42715500.0,
            "TotalMinutes": 0.000711925,
            "TotalSeconds": 0.0427155
          },
          "UserDuration": {
            "Ticks": 3068,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 306,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.550925925925926E-09,
            "TotalHours": 8.522222222222222E-08,
            "TotalMilliseconds": 0.3068,
            "TotalMicroseconds": 306.8,
            "TotalNanoseconds": 306800.0,
            "TotalMinutes": 5.113333333333333E-06,
            "TotalSeconds": 0.0003068
          },
          "OwnDuration": {
            "Ticks": 421880,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 188,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.882870370370371E-07,
            "TotalHours": 1.1718888888888888E-05,
            "TotalMilliseconds": 42.188,
            "TotalMicroseconds": 42188.0,
            "TotalNanoseconds": 42188000.0,
            "TotalMinutes": 0.0007031333333333334,
            "TotalSeconds": 0.042188
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "64343aa4-47df-4883-ac65-31e910cc2375",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 213,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1738138-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4573,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 457,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.292824074074074E-09,
          "TotalHours": 1.270277777777778E-07,
          "TotalMilliseconds": 0.4573,
          "TotalMicroseconds": 457.3,
          "TotalNanoseconds": 457300.0,
          "TotalMinutes": 7.621666666666667E-06,
          "TotalSeconds": 0.0004573
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3770,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 377,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.363425925925926E-09,
          "TotalHours": 1.0472222222222222E-07,
          "TotalMilliseconds": 0.377,
          "TotalMicroseconds": 377.0,
          "TotalNanoseconds": 377000.0,
          "TotalMinutes": 6.283333333333333E-06,
          "TotalSeconds": 0.000377
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 9523,
            "Length": 589,
            "StartLine": 235,
            "StartColumn": 113,
            "EndLine": 250,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2f5455ea-f3b3-46ef-9152-36a6c2b75ea7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 430223,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 22,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.979432870370371E-07,
            "TotalHours": 1.1950638888888888E-05,
            "TotalMilliseconds": 43.0223,
            "TotalMicroseconds": 43022.3,
            "TotalNanoseconds": 43022300.0,
            "TotalMinutes": 0.0007170383333333333,
            "TotalSeconds": 0.0430223
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "07db29d3-e165-40cd-a853-b25e21387d28",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1730693-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 427155,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 715,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.943923611111111E-07,
            "TotalHours": 1.1865416666666667E-05,
            "TotalMilliseconds": 42.7155,
            "TotalMicroseconds": 42715.5,
            "TotalNanoseconds": 42715500.0,
            "TotalMinutes": 0.000711925,
            "TotalSeconds": 0.0427155
          },
          "UserDuration": {
            "Ticks": 3068,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 306,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.550925925925926E-09,
            "TotalHours": 8.522222222222222E-08,
            "TotalMilliseconds": 0.3068,
            "TotalMicroseconds": 306.8,
            "TotalNanoseconds": 306800.0,
            "TotalMinutes": 5.113333333333333E-06,
            "TotalSeconds": 0.0003068
          },
          "OwnDuration": {
            "Ticks": 421880,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 42,
            "Microseconds": 188,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.882870370370371E-07,
            "TotalHours": 1.1718888888888888E-05,
            "TotalMilliseconds": 42.188,
            "TotalMicroseconds": 42188.0,
            "TotalNanoseconds": 42188000.0,
            "TotalMinutes": 0.0007031333333333334,
            "TotalSeconds": 0.042188
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "64343aa4-47df-4883-ac65-31e910cc2375",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 235,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1742811-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3770,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 377,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.363425925925926E-09,
          "TotalHours": 1.0472222222222222E-07,
          "TotalMilliseconds": 0.377,
          "TotalMicroseconds": 377.0,
          "TotalNanoseconds": 377000.0,
          "TotalMinutes": 6.283333333333333E-06,
          "TotalSeconds": 0.000377
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 364,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.22337962962963E-09,
          "TotalHours": 1.0136111111111112E-07,
          "TotalMilliseconds": 0.3649,
          "TotalMicroseconds": 364.9,
          "TotalNanoseconds": 364900.0,
          "TotalMinutes": 6.081666666666666E-06,
          "TotalSeconds": 0.0003649
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 10546,
            "Length": 475,
            "StartLine": 260,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "816d0ad3-5a0d-4bc9-88e2-3f2dbc7d2bf1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 490716,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 49,
            "Microseconds": 71,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.679583333333334E-07,
            "TotalHours": 1.3631E-05,
            "TotalMilliseconds": 49.0716,
            "TotalMicroseconds": 49071.6,
            "TotalNanoseconds": 49071600.0,
            "TotalMinutes": 0.00081786,
            "TotalSeconds": 0.0490716
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "05b34240-d9dd-486e-acd8-0d1adf7bd884",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1783939-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 486518,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 651,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.63099537037037E-07,
            "TotalHours": 1.3514388888888888E-05,
            "TotalMilliseconds": 48.6518,
            "TotalMicroseconds": 48651.8,
            "TotalNanoseconds": 48651800.0,
            "TotalMinutes": 0.0008108633333333334,
            "TotalSeconds": 0.0486518
          },
          "UserDuration": {
            "Ticks": 4198,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 419,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.858796296296297E-09,
            "TotalHours": 1.1661111111111111E-07,
            "TotalMilliseconds": 0.4198,
            "TotalMicroseconds": 419.8,
            "TotalNanoseconds": 419800.0,
            "TotalMinutes": 6.996666666666667E-06,
            "TotalSeconds": 0.0004198
          },
          "OwnDuration": {
            "Ticks": 483730,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 373,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.598726851851852E-07,
            "TotalHours": 1.3436944444444444E-05,
            "TotalMilliseconds": 48.373,
            "TotalMicroseconds": 48373.0,
            "TotalNanoseconds": 48373000.0,
            "TotalMinutes": 0.0008062166666666666,
            "TotalSeconds": 0.048373
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "57be614f-d6ed-4991-86e1-d73f3fec75dd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 260,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1790055-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 364,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.22337962962963E-09,
          "TotalHours": 1.0136111111111112E-07,
          "TotalMilliseconds": 0.3649,
          "TotalMicroseconds": 364.9,
          "TotalNanoseconds": 364900.0,
          "TotalMinutes": 6.081666666666666E-06,
          "TotalSeconds": 0.0003649
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3337,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.862268518518519E-09,
          "TotalHours": 9.269444444444444E-08,
          "TotalMilliseconds": 0.3337,
          "TotalMicroseconds": 333.7,
          "TotalNanoseconds": 333700.0,
          "TotalMinutes": 5.561666666666667E-06,
          "TotalSeconds": 0.0003337
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 11148,
            "Length": 563,
            "StartLine": 274,
            "StartColumn": 112,
            "EndLine": 286,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e831fc2a-ef97-45e6-8f53-b28b0860f394",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 490716,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 49,
            "Microseconds": 71,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.679583333333334E-07,
            "TotalHours": 1.3631E-05,
            "TotalMilliseconds": 49.0716,
            "TotalMicroseconds": 49071.6,
            "TotalNanoseconds": 49071600.0,
            "TotalMinutes": 0.00081786,
            "TotalSeconds": 0.0490716
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0578957",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1299583-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0567153",
            "UserDuration": "00:00:00.0011804",
            "OwnDuration": "-00:00:00.0718941",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "05b34240-d9dd-486e-acd8-0d1adf7bd884",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1783939-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 486518,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 651,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.63099537037037E-07,
            "TotalHours": 1.3514388888888888E-05,
            "TotalMilliseconds": 48.6518,
            "TotalMicroseconds": 48651.8,
            "TotalNanoseconds": 48651800.0,
            "TotalMinutes": 0.0008108633333333334,
            "TotalSeconds": 0.0486518
          },
          "UserDuration": {
            "Ticks": 4198,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 419,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.858796296296297E-09,
            "TotalHours": 1.1661111111111111E-07,
            "TotalMilliseconds": 0.4198,
            "TotalMicroseconds": 419.8,
            "TotalNanoseconds": 419800.0,
            "TotalMinutes": 6.996666666666667E-06,
            "TotalSeconds": 0.0004198
          },
          "OwnDuration": {
            "Ticks": 483730,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 48,
            "Microseconds": 373,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.598726851851852E-07,
            "TotalHours": 1.3436944444444444E-05,
            "TotalMilliseconds": 48.373,
            "TotalMicroseconds": 48373.0,
            "TotalNanoseconds": 48373000.0,
            "TotalMinutes": 0.0008062166666666666,
            "TotalSeconds": 0.048373
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "57be614f-d6ed-4991-86e1-d73f3fec75dd",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1793882-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3337,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 333,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.862268518518519E-09,
          "TotalHours": 9.269444444444444E-08,
          "TotalMilliseconds": 0.3337,
          "TotalMicroseconds": 333.7,
          "TotalNanoseconds": 333700.0,
          "TotalMinutes": 5.561666666666667E-06,
          "TotalSeconds": 0.0003337
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4995,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 499,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.78125E-09,
          "TotalHours": 1.3875E-07,
          "TotalMilliseconds": 0.4995,
          "TotalMicroseconds": 499.5,
          "TotalNanoseconds": 499500.0,
          "TotalMinutes": 8.325E-06,
          "TotalSeconds": 0.0004995
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 13896,
            "Length": 222,
            "StartLine": 334,
            "StartColumn": 88,
            "EndLine": 339,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "018b0735-44fb-4351-8cbb-103a5080ddec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 334,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1892888-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4995,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 499,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.78125E-09,
          "TotalHours": 1.3875E-07,
          "TotalMilliseconds": 0.4995,
          "TotalMicroseconds": 499.5,
          "TotalNanoseconds": 499500.0,
          "TotalMinutes": 8.325E-06,
          "TotalSeconds": 0.0004995
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3929,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 392,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.547453703703704E-09,
          "TotalHours": 1.091388888888889E-07,
          "TotalMilliseconds": 0.3929,
          "TotalMicroseconds": 392.9,
          "TotalNanoseconds": 392900.0,
          "TotalMinutes": 6.548333333333333E-06,
          "TotalSeconds": 0.0003929
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14217,
            "Length": 279,
            "StartLine": 341,
            "StartColumn": 84,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b8545ecd-ca05-45ba-a02a-77be600d15d2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 341,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1898101-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3929,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 392,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.547453703703704E-09,
          "TotalHours": 1.091388888888889E-07,
          "TotalMilliseconds": 0.3929,
          "TotalMicroseconds": 392.9,
          "TotalNanoseconds": 392900.0,
          "TotalMinutes": 6.548333333333333E-06,
          "TotalSeconds": 0.0003929
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3822,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 382,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.423611111111111E-09,
          "TotalHours": 1.0616666666666667E-07,
          "TotalMilliseconds": 0.3822,
          "TotalMicroseconds": 382.2,
          "TotalNanoseconds": 382200.0,
          "TotalMinutes": 6.37E-06,
          "TotalSeconds": 0.0003822
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14610,
            "Length": 545,
            "StartLine": 349,
            "StartColumn": 99,
            "EndLine": 358,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6ceb7190-f5e1-4029-b4a8-414804e6bcec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 57634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 763,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.670601851851851E-08,
            "TotalHours": 1.6009444444444444E-06,
            "TotalMilliseconds": 5.7634,
            "TotalMicroseconds": 5763.4,
            "TotalNanoseconds": 5763400.0,
            "TotalMinutes": 9.605666666666667E-05,
            "TotalSeconds": 0.0057634
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1886095-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 56412,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 641,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.529166666666667E-08,
            "TotalHours": 1.567E-06,
            "TotalMilliseconds": 5.6412,
            "TotalMicroseconds": 5641.2,
            "TotalNanoseconds": 5641200.0,
            "TotalMinutes": 9.402E-05,
            "TotalSeconds": 0.0056412
          },
          "UserDuration": {
            "Ticks": 1222,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4143518518518518E-09,
            "TotalHours": 3.3944444444444446E-08,
            "TotalMilliseconds": 0.1222,
            "TotalMicroseconds": 122.2,
            "TotalNanoseconds": 122200.0,
            "TotalMinutes": 2.0366666666666665E-06,
            "TotalSeconds": 0.0001222
          },
          "OwnDuration": {
            "Ticks": 44888,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 488,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.19537037037037E-08,
            "TotalHours": 1.2468888888888889E-06,
            "TotalMilliseconds": 4.4888,
            "TotalMicroseconds": 4488.8,
            "TotalNanoseconds": 4488800.0,
            "TotalMinutes": 7.481333333333334E-05,
            "TotalSeconds": 0.0044888
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7ac3ec32-5db5-4777-8445-46798b8c6693",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 349,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1902214-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3822,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 382,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.423611111111111E-09,
          "TotalHours": 1.0616666666666667E-07,
          "TotalMilliseconds": 0.3822,
          "TotalMicroseconds": 382.2,
          "TotalNanoseconds": 382200.0,
          "TotalMinutes": 6.37E-06,
          "TotalSeconds": 0.0003822
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4646,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 464,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.377314814814815E-09,
          "TotalHours": 1.2905555555555556E-07,
          "TotalMilliseconds": 0.4646,
          "TotalMicroseconds": 464.6,
          "TotalNanoseconds": 464600.0,
          "TotalMinutes": 7.743333333333333E-06,
          "TotalSeconds": 0.0004646
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 15590,
            "Length": 427,
            "StartLine": 368,
            "StartColumn": 127,
            "EndLine": 375,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "249692be-ef5e-4cd0-888d-6226a78c3fd8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 368,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1951182-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4646,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 464,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.377314814814815E-09,
          "TotalHours": 1.2905555555555556E-07,
          "TotalMilliseconds": 0.4646,
          "TotalMicroseconds": 464.6,
          "TotalNanoseconds": 464600.0,
          "TotalMinutes": 7.743333333333333E-06,
          "TotalSeconds": 0.0004646
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4425,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 442,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.1215277777777775E-09,
          "TotalHours": 1.2291666666666667E-07,
          "TotalMilliseconds": 0.4425,
          "TotalMicroseconds": 442.5,
          "TotalNanoseconds": 442500.0,
          "TotalMinutes": 7.375E-06,
          "TotalSeconds": 0.0004425
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16157,
            "Length": 411,
            "StartLine": 377,
            "StartColumn": 125,
            "EndLine": 384,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1d33fd1e-5346-410c-ba01-8579120cdca4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 377,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1956067-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4425,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 442,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.1215277777777775E-09,
          "TotalHours": 1.2291666666666667E-07,
          "TotalMilliseconds": 0.4425,
          "TotalMicroseconds": 442.5,
          "TotalNanoseconds": 442500.0,
          "TotalMinutes": 7.375E-06,
          "TotalSeconds": 0.0004425
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5477,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 547,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.339120370370371E-09,
          "TotalHours": 1.521388888888889E-07,
          "TotalMilliseconds": 0.5477,
          "TotalMicroseconds": 547.7,
          "TotalNanoseconds": 547700.0,
          "TotalMinutes": 9.128333333333334E-06,
          "TotalSeconds": 0.0005477
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16702,
            "Length": 542,
            "StartLine": 386,
            "StartColumn": 119,
            "EndLine": 396,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0c9a7a08-6819-48ac-8d14-af5221f5bede",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 120177,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 17,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3909375E-07,
            "TotalHours": 3.33825E-06,
            "TotalMilliseconds": 12.0177,
            "TotalMicroseconds": 12017.7,
            "TotalNanoseconds": 12017700.0,
            "TotalMinutes": 0.000200295,
            "TotalSeconds": 0.0120177
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1b16ae1d-1e44-472d-9bb0-bc1a3efeee81",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.1943736-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 117612,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 761,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.36125E-07,
            "TotalHours": 3.267E-06,
            "TotalMilliseconds": 11.7612,
            "TotalMicroseconds": 11761.2,
            "TotalNanoseconds": 11761200.0,
            "TotalMinutes": 0.00019602,
            "TotalSeconds": 0.0117612
          },
          "UserDuration": {
            "Ticks": 2565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 256,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.96875E-09,
            "TotalHours": 7.125E-08,
            "TotalMilliseconds": 0.2565,
            "TotalMicroseconds": 256.5,
            "TotalNanoseconds": 256500.0,
            "TotalMinutes": 4.275E-06,
            "TotalSeconds": 0.0002565
          },
          "OwnDuration": {
            "Ticks": 105629,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 562,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2225578703703705E-07,
            "TotalHours": 2.9341388888888887E-06,
            "TotalMilliseconds": 10.5629,
            "TotalMicroseconds": 10562.9,
            "TotalNanoseconds": 10562900.0,
            "TotalMinutes": 0.00017604833333333334,
            "TotalSeconds": 0.0105629
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "773412ef-911e-421a-b08a-89b0c90263ac",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 386,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.1960684-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5477,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 547,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.339120370370371E-09,
          "TotalHours": 1.521388888888889E-07,
          "TotalMilliseconds": 0.5477,
          "TotalMicroseconds": 547.7,
          "TotalNanoseconds": 547700.0,
          "TotalMinutes": 9.128333333333334E-06,
          "TotalSeconds": 0.0005477
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4858,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 485,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.622685185185185E-09,
          "TotalHours": 1.3494444444444445E-07,
          "TotalMilliseconds": 0.4858,
          "TotalMicroseconds": 485.8,
          "TotalNanoseconds": 485800.0,
          "TotalMinutes": 8.096666666666667E-06,
          "TotalSeconds": 0.0004858
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17662,
            "Length": 485,
            "StartLine": 406,
            "StartColumn": 116,
            "EndLine": 416,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c2f3526-ec58-4af3-ae90-4ea615b53f44",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 406,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2014178-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4858,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 485,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.622685185185185E-09,
          "TotalHours": 1.3494444444444445E-07,
          "TotalMilliseconds": 0.4858,
          "TotalMicroseconds": 485.8,
          "TotalNanoseconds": 485800.0,
          "TotalMinutes": 8.096666666666667E-06,
          "TotalSeconds": 0.0004858
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4502,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.210648148148148E-09,
          "TotalHours": 1.2505555555555555E-07,
          "TotalMilliseconds": 0.4502,
          "TotalMicroseconds": 450.2,
          "TotalNanoseconds": 450200.0,
          "TotalMinutes": 7.503333333333333E-06,
          "TotalSeconds": 0.0004502
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18271,
            "Length": 522,
            "StartLine": 418,
            "StartColumn": 109,
            "EndLine": 429,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d32fe7a7-185d-4054-9eeb-c495da8764fa",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 418,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2019287-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4502,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.210648148148148E-09,
          "TotalHours": 1.2505555555555555E-07,
          "TotalMilliseconds": 0.4502,
          "TotalMicroseconds": 450.2,
          "TotalNanoseconds": 450200.0,
          "TotalMinutes": 7.503333333333333E-06,
          "TotalSeconds": 0.0004502
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4526,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 452,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.238425925925926E-09,
          "TotalHours": 1.2572222222222222E-07,
          "TotalMilliseconds": 0.4526,
          "TotalMicroseconds": 452.6,
          "TotalNanoseconds": 452600.0,
          "TotalMinutes": 7.543333333333334E-06,
          "TotalSeconds": 0.0004526
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18920,
            "Length": 402,
            "StartLine": 431,
            "StartColumn": 112,
            "EndLine": 439,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b11f8d81-a1f4-4ce8-ba36-c6f32a0adc46",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 277876,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 787,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2161574074074074E-07,
            "TotalHours": 7.718777777777779E-06,
            "TotalMilliseconds": 27.7876,
            "TotalMicroseconds": 27787.6,
            "TotalNanoseconds": 27787600.0,
            "TotalMinutes": 0.00046312666666666665,
            "TotalSeconds": 0.0277876
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0911911",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.1878645-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0893942",
            "UserDuration": "00:00:00.0017969",
            "OwnDuration": "00:00:00.0456224",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1729cdd1-7d5f-4778-b231-904b6cb5767b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.200628-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273837,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 383,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1694097222222223E-07,
            "TotalHours": 7.6065833333333334E-06,
            "TotalMilliseconds": 27.3837,
            "TotalMicroseconds": 27383.7,
            "TotalNanoseconds": 27383700.0,
            "TotalMinutes": 0.000456395,
            "TotalSeconds": 0.0273837
          },
          "UserDuration": {
            "Ticks": 4039,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 403,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.674768518518519E-09,
            "TotalHours": 1.1219444444444445E-07,
            "TotalMilliseconds": 0.4039,
            "TotalMicroseconds": 403.9,
            "TotalNanoseconds": 403900.0,
            "TotalMinutes": 6.731666666666667E-06,
            "TotalSeconds": 0.0004039
          },
          "OwnDuration": {
            "Ticks": 263990,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 399,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.055439814814815E-07,
            "TotalHours": 7.333055555555555E-06,
            "TotalMilliseconds": 26.399,
            "TotalMicroseconds": 26399.0,
            "TotalNanoseconds": 26399000.0,
            "TotalMinutes": 0.00043998333333333334,
            "TotalSeconds": 0.026399
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93f0dadb-f0b0-4856-b633-7373c6a6720e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 431,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2024-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4526,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 452,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.238425925925926E-09,
          "TotalHours": 1.2572222222222222E-07,
          "TotalMilliseconds": 0.4526,
          "TotalMicroseconds": 452.6,
          "TotalNanoseconds": 452600.0,
          "TotalMinutes": 7.543333333333334E-06,
          "TotalSeconds": 0.0004526
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 497,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.762731481481481E-09,
          "TotalHours": 1.3830555555555556E-07,
          "TotalMilliseconds": 0.4979,
          "TotalMicroseconds": 497.9,
          "TotalNanoseconds": 497900.0,
          "TotalMinutes": 8.298333333333333E-06,
          "TotalSeconds": 0.0004979
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21413,
            "Length": 523,
            "StartLine": 481,
            "StartColumn": 140,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "742e0908-f7bc-4373-9aa8-1b5b34352b5e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 481,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2226557-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 497,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.762731481481481E-09,
          "TotalHours": 1.3830555555555556E-07,
          "TotalMilliseconds": 0.4979,
          "TotalMicroseconds": 497.9,
          "TotalNanoseconds": 497900.0,
          "TotalMinutes": 8.298333333333333E-06,
          "TotalSeconds": 0.0004979
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3931,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 393,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.549768518518518E-09,
          "TotalHours": 1.0919444444444445E-07,
          "TotalMilliseconds": 0.3931,
          "TotalMicroseconds": 393.1,
          "TotalNanoseconds": 393100.0,
          "TotalMinutes": 6.551666666666667E-06,
          "TotalSeconds": 0.0003931
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22087,
            "Length": 508,
            "StartLine": 491,
            "StartColumn": 136,
            "EndLine": 499,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f5dc0758-80df-4350-a8c8-ff39668c35e6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2231988-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3931,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 393,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.549768518518518E-09,
          "TotalHours": 1.0919444444444445E-07,
          "TotalMilliseconds": 0.3931,
          "TotalMicroseconds": 393.1,
          "TotalNanoseconds": 393100.0,
          "TotalMinutes": 6.551666666666667E-06,
          "TotalSeconds": 0.0003931
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3374,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 337,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9050925925925925E-09,
          "TotalHours": 9.372222222222223E-08,
          "TotalMilliseconds": 0.3374,
          "TotalMicroseconds": 337.4,
          "TotalNanoseconds": 337400.0,
          "TotalMinutes": 5.623333333333333E-06,
          "TotalSeconds": 0.0003374
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22742,
            "Length": 523,
            "StartLine": 501,
            "StartColumn": 132,
            "EndLine": 509,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "56d76c46-1ebd-4a04-975a-240984d654cf",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 501,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2235984-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3374,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 337,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9050925925925925E-09,
          "TotalHours": 9.372222222222223E-08,
          "TotalMilliseconds": 0.3374,
          "TotalMicroseconds": 337.4,
          "TotalNanoseconds": 337400.0,
          "TotalMinutes": 5.623333333333333E-06,
          "TotalSeconds": 0.0003374
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4023,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.65625E-09,
          "TotalHours": 1.1175E-07,
          "TotalMilliseconds": 0.4023,
          "TotalMicroseconds": 402.3,
          "TotalNanoseconds": 402300.0,
          "TotalMinutes": 6.705E-06,
          "TotalSeconds": 0.0004023
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23420,
            "Length": 568,
            "StartLine": 511,
            "StartColumn": 140,
            "EndLine": 520,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "72ff6a4c-2ad7-4b5c-8d12-1dccf2cb732f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 511,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2239853-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4023,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.65625E-09,
          "TotalHours": 1.1175E-07,
          "TotalMilliseconds": 0.4023,
          "TotalMicroseconds": 402.3,
          "TotalNanoseconds": 402300.0,
          "TotalMinutes": 6.705E-06,
          "TotalSeconds": 0.0004023
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 341,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.953703703703704E-09,
          "TotalHours": 9.488888888888888E-08,
          "TotalMilliseconds": 0.3416,
          "TotalMicroseconds": 341.6,
          "TotalNanoseconds": 341600.0,
          "TotalMinutes": 5.693333333333334E-06,
          "TotalSeconds": 0.0003416
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24136,
            "Length": 581,
            "StartLine": 522,
            "StartColumn": 133,
            "EndLine": 530,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1f1a4ac4-f22c-4a81-b5af-c39fb6c8529d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 69317,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 931,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.022800925925926E-08,
            "TotalHours": 1.9254722222222223E-06,
            "TotalMilliseconds": 6.9317,
            "TotalMicroseconds": 6931.7,
            "TotalNanoseconds": 6931700.0,
            "TotalMinutes": 0.00011552833333333333,
            "TotalSeconds": 0.0069317
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5b4f4263-9af0-4081-962f-7e009a972731",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2219647-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 68092,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 809,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.881018518518518E-08,
            "TotalHours": 1.8914444444444444E-06,
            "TotalMilliseconds": 6.8092,
            "TotalMicroseconds": 6809.2,
            "TotalNanoseconds": 6809200.0,
            "TotalMinutes": 0.00011348666666666667,
            "TotalSeconds": 0.0068092
          },
          "UserDuration": {
            "Ticks": 1225,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 122,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4178240740740741E-09,
            "TotalHours": 3.402777777777778E-08,
            "TotalMilliseconds": 0.1225,
            "TotalMicroseconds": 122.5,
            "TotalNanoseconds": 122500.0,
            "TotalMinutes": 2.0416666666666665E-06,
            "TotalSeconds": 0.0001225
          },
          "OwnDuration": {
            "Ticks": 49594,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 959,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.7400462962962965E-08,
            "TotalHours": 1.3776111111111112E-06,
            "TotalMilliseconds": 4.9594,
            "TotalMicroseconds": 4959.4,
            "TotalNanoseconds": 4959400.0,
            "TotalMinutes": 8.265666666666667E-05,
            "TotalSeconds": 0.0049594
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6b21cddd-cf0d-45b4-adc4-10fb09fb2c16",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 522,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.224376-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 341,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.953703703703704E-09,
          "TotalHours": 9.488888888888888E-08,
          "TotalMilliseconds": 0.3416,
          "TotalMicroseconds": 341.6,
          "TotalNanoseconds": 341600.0,
          "TotalMinutes": 5.693333333333334E-06,
          "TotalSeconds": 0.0003416
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4508,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.217592592592593E-09,
          "TotalHours": 1.252222222222222E-07,
          "TotalMilliseconds": 0.4508,
          "TotalMicroseconds": 450.8,
          "TotalNanoseconds": 450800.0,
          "TotalMinutes": 7.513333333333333E-06,
          "TotalSeconds": 0.0004508
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25170,
            "Length": 235,
            "StartLine": 540,
            "StartColumn": 131,
            "EndLine": 545,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ea83cf0a-fca9-4ec5-a0f7-52a9d3842ac6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 129560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 956,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.499537037037037E-07,
            "TotalHours": 3.598888888888889E-06,
            "TotalMilliseconds": 12.956,
            "TotalMicroseconds": 12956.0,
            "TotalNanoseconds": 12956000.0,
            "TotalMinutes": 0.00021593333333333334,
            "TotalSeconds": 0.012956
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a6a54935-2a62-4b8d-8fa9-b6caf6208660",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2288965-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 126831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 683,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4679513888888888E-07,
            "TotalHours": 3.5230833333333335E-06,
            "TotalMilliseconds": 12.6831,
            "TotalMicroseconds": 12683.1,
            "TotalNanoseconds": 12683100.0,
            "TotalMinutes": 0.000211385,
            "TotalSeconds": 0.0126831
          },
          "UserDuration": {
            "Ticks": 2729,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 272,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.158564814814815E-09,
            "TotalHours": 7.580555555555555E-08,
            "TotalMilliseconds": 0.2729,
            "TotalMicroseconds": 272.9,
            "TotalNanoseconds": 272900.0,
            "TotalMinutes": 4.5483333333333335E-06,
            "TotalSeconds": 0.0002729
          },
          "OwnDuration": {
            "Ticks": 120634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 63,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3962268518518517E-07,
            "TotalHours": 3.3509444444444444E-06,
            "TotalMilliseconds": 12.0634,
            "TotalMicroseconds": 12063.4,
            "TotalNanoseconds": 12063400.0,
            "TotalMinutes": 0.00020105666666666666,
            "TotalSeconds": 0.0120634
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c5750ee0-ab21-4214-8787-6c07688211d6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 540,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.2296836-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4508,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 450,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.217592592592593E-09,
          "TotalHours": 1.252222222222222E-07,
          "TotalMilliseconds": 0.4508,
          "TotalMicroseconds": 450.8,
          "TotalNanoseconds": 450800.0,
          "TotalMinutes": 7.513333333333333E-06,
          "TotalSeconds": 0.0004508
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4418,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 441,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.113425925925926E-09,
          "TotalHours": 1.2272222222222223E-07,
          "TotalMilliseconds": 0.4418,
          "TotalMicroseconds": 441.8,
          "TotalNanoseconds": 441800.0,
          "TotalMinutes": 7.363333333333334E-06,
          "TotalSeconds": 0.0004418
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25538,
            "Length": 710,
            "StartLine": 547,
            "StartColumn": 118,
            "EndLine": 562,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "63419307-30e8-473f-93cb-1bc9aea8c209",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 129560,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 956,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.499537037037037E-07,
            "TotalHours": 3.598888888888889E-06,
            "TotalMilliseconds": 12.956,
            "TotalMicroseconds": 12956.0,
            "TotalNanoseconds": 12956000.0,
            "TotalMinutes": 0.00021593333333333334,
            "TotalSeconds": 0.012956
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1092168",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2211543-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1069881",
            "UserDuration": "00:00:00.0022287",
            "OwnDuration": "00:00:00.0893291",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a6a54935-2a62-4b8d-8fa9-b6caf6208660",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.2288965-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 126831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 683,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4679513888888888E-07,
            "TotalHours": 3.5230833333333335E-06,
            "TotalMilliseconds": 12.6831,
            "TotalMicroseconds": 12683.1,
            "TotalNanoseconds": 12683100.0,
            "TotalMinutes": 0.000211385,
            "TotalSeconds": 0.0126831
          },
          "UserDuration": {
            "Ticks": 2729,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 272,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.158564814814815E-09,
            "TotalHours": 7.580555555555555E-08,
            "TotalMilliseconds": 0.2729,
            "TotalMicroseconds": 272.9,
            "TotalNanoseconds": 272900.0,
            "TotalMinutes": 4.5483333333333335E-06,
            "TotalSeconds": 0.0002729
          },
          "OwnDuration": {
            "Ticks": 120634,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 12,
            "Microseconds": 63,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3962268518518517E-07,
            "TotalHours": 3.3509444444444444E-06,
            "TotalMilliseconds": 12.0634,
            "TotalMicroseconds": 12063.4,
            "TotalNanoseconds": 12063400.0,
            "TotalMinutes": 0.00020105666666666666,
            "TotalSeconds": 0.0120634
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c5750ee0-ab21-4214-8787-6c07688211d6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 547,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.230157-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4418,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 441,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.113425925925926E-09,
          "TotalHours": 1.2272222222222223E-07,
          "TotalMilliseconds": 0.4418,
          "TotalMicroseconds": 441.8,
          "TotalNanoseconds": 441800.0,
          "TotalMinutes": 7.363333333333334E-06,
          "TotalSeconds": 0.0004418
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4156,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 415,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.810185185185185E-09,
          "TotalHours": 1.1544444444444444E-07,
          "TotalMilliseconds": 0.4156,
          "TotalMicroseconds": 415.6,
          "TotalNanoseconds": 415600.0,
          "TotalMinutes": 6.926666666666667E-06,
          "TotalSeconds": 0.0004156
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29122,
            "Length": 1022,
            "StartLine": 617,
            "StartColumn": 122,
            "EndLine": 639,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f767bffc-c82f-4145-8c6f-0739f5bb3eb4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 52497,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 249,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.076041666666666E-08,
            "TotalHours": 1.45825E-06,
            "TotalMilliseconds": 5.2497,
            "TotalMicroseconds": 5249.7,
            "TotalNanoseconds": 5249700.0,
            "TotalMinutes": 8.7495E-05,
            "TotalSeconds": 0.0052497
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dec18ed3-b40d-4b0c-86e0-f4bac9c2618f",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.306144-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 51382,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 138,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.9469907407407405E-08,
            "TotalHours": 1.4272777777777779E-06,
            "TotalMilliseconds": 5.1382,
            "TotalMicroseconds": 5138.2,
            "TotalNanoseconds": 5138200.0,
            "TotalMinutes": 8.563666666666667E-05,
            "TotalSeconds": 0.0051382
          },
          "UserDuration": {
            "Ticks": 1115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 111,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2905092592592593E-09,
            "TotalHours": 3.097222222222222E-08,
            "TotalMilliseconds": 0.1115,
            "TotalMicroseconds": 111.5,
            "TotalNanoseconds": 111500.0,
            "TotalMinutes": 1.8583333333333333E-06,
            "TotalSeconds": 0.0001115
          },
          "OwnDuration": {
            "Ticks": 45141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 514,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2246527777777776E-08,
            "TotalHours": 1.2539166666666667E-06,
            "TotalMilliseconds": 4.5141,
            "TotalMicroseconds": 4514.1,
            "TotalNanoseconds": 4514100.0,
            "TotalMinutes": 7.5235E-05,
            "TotalSeconds": 0.0045141
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3e72d4b8-7691-4655-9996-1565d9c8bde9",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 617,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3069381-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4156,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 415,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.810185185185185E-09,
          "TotalHours": 1.1544444444444444E-07,
          "TotalMilliseconds": 0.4156,
          "TotalMicroseconds": 415.6,
          "TotalNanoseconds": 415600.0,
          "TotalMinutes": 6.926666666666667E-06,
          "TotalSeconds": 0.0004156
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3200,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 320,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7037037037037036E-09,
          "TotalHours": 8.88888888888889E-08,
          "TotalMilliseconds": 0.32,
          "TotalMicroseconds": 320.0,
          "TotalNanoseconds": 320000.0,
          "TotalMinutes": 5.333333333333334E-06,
          "TotalSeconds": 0.00032
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30280,
            "Length": 781,
            "StartLine": 641,
            "StartColumn": 121,
            "EndLine": 654,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8e0d766a-8bd2-496a-9d84-ae9deed4bbbd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 52497,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 249,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.076041666666666E-08,
            "TotalHours": 1.45825E-06,
            "TotalMilliseconds": 5.2497,
            "TotalMicroseconds": 5249.7,
            "TotalNanoseconds": 5249700.0,
            "TotalMinutes": 8.7495E-05,
            "TotalSeconds": 0.0052497
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dec18ed3-b40d-4b0c-86e0-f4bac9c2618f",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.306144-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 51382,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 138,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.9469907407407405E-08,
            "TotalHours": 1.4272777777777779E-06,
            "TotalMilliseconds": 5.1382,
            "TotalMicroseconds": 5138.2,
            "TotalNanoseconds": 5138200.0,
            "TotalMinutes": 8.563666666666667E-05,
            "TotalSeconds": 0.0051382
          },
          "UserDuration": {
            "Ticks": 1115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 111,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2905092592592593E-09,
            "TotalHours": 3.097222222222222E-08,
            "TotalMilliseconds": 0.1115,
            "TotalMicroseconds": 111.5,
            "TotalNanoseconds": 111500.0,
            "TotalMinutes": 1.8583333333333333E-06,
            "TotalSeconds": 0.0001115
          },
          "OwnDuration": {
            "Ticks": 45141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 514,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2246527777777776E-08,
            "TotalHours": 1.2539166666666667E-06,
            "TotalMilliseconds": 4.5141,
            "TotalMicroseconds": 4514.1,
            "TotalNanoseconds": 4514100.0,
            "TotalMinutes": 7.5235E-05,
            "TotalSeconds": 0.0045141
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3e72d4b8-7691-4655-9996-1565d9c8bde9",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 641,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3073708-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3200,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 320,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7037037037037036E-09,
          "TotalHours": 8.88888888888889E-08,
          "TotalMilliseconds": 0.32,
          "TotalMicroseconds": 320.0,
          "TotalNanoseconds": 320000.0,
          "TotalMinutes": 5.333333333333334E-06,
          "TotalSeconds": 0.00032
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 465332,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 533,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.385787037037037E-07,
          "TotalHours": 1.2925888888888889E-05,
          "TotalMilliseconds": 46.5332,
          "TotalMicroseconds": 46533.2,
          "TotalNanoseconds": 46533200.0,
          "TotalMinutes": 0.0007755533333333334,
          "TotalSeconds": 0.0465332
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 32406,
            "Length": 1019,
            "StartLine": 690,
            "StartColumn": 64,
            "EndLine": 709,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a25e1947-552e-4517-9f94-838abc739a73",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1025107,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 102,
            "Microseconds": 510,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1864664351851852E-06,
            "TotalHours": 2.8475194444444444E-05,
            "TotalMilliseconds": 102.5107,
            "TotalMicroseconds": 102510.7,
            "TotalNanoseconds": 102510700.0,
            "TotalMinutes": 0.0017085116666666668,
            "TotalSeconds": 0.1025107
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8fac6794-3fcc-45b3-a38f-71460e3f8b6a",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.3113812-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136764,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 676,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5829166666666666E-07,
            "TotalHours": 3.799E-06,
            "TotalMilliseconds": 13.6764,
            "TotalMicroseconds": 13676.4,
            "TotalNanoseconds": 13676400.0,
            "TotalMinutes": 0.00022794,
            "TotalSeconds": 0.0136764
          },
          "UserDuration": {
            "Ticks": 888343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 834,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0281747685185185E-06,
            "TotalHours": 2.4676194444444445E-05,
            "TotalMilliseconds": 88.8343,
            "TotalMicroseconds": 88834.3,
            "TotalNanoseconds": 88834300.0,
            "TotalMinutes": 0.0014805716666666667,
            "TotalSeconds": 0.0888343
          },
          "OwnDuration": {
            "Ticks": 556043,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 604,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.435682870370371E-07,
            "TotalHours": 1.5445638888888888E-05,
            "TotalMilliseconds": 55.6043,
            "TotalMicroseconds": 55604.3,
            "TotalNanoseconds": 55604300.0,
            "TotalMinutes": 0.0009267383333333334,
            "TotalSeconds": 0.0556043
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a168d61-e698-4c98-9d41-65aa63a1b190",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.3581113-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 425758,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 42,
          "Microseconds": 575,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.92775462962963E-07,
          "TotalHours": 1.1826611111111112E-05,
          "TotalMilliseconds": 42.5758,
          "TotalMicroseconds": 42575.8,
          "TotalNanoseconds": 42575800.0,
          "TotalMinutes": 0.0007095966666666667,
          "TotalSeconds": 0.0425758
        },
        "FrameworkDuration": {
          "Ticks": 39574,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 957,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.580324074074074E-08,
          "TotalHours": 1.0992777777777778E-06,
          "TotalMilliseconds": 3.9574,
          "TotalMicroseconds": 3957.4,
          "TotalNanoseconds": 3957400.0,
          "TotalMinutes": 6.595666666666667E-05,
          "TotalSeconds": 0.0039574
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3732,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 373,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.319444444444445E-09,
          "TotalHours": 1.0366666666666667E-07,
          "TotalMilliseconds": 0.3732,
          "TotalMicroseconds": 373.2,
          "TotalNanoseconds": 373200.0,
          "TotalMinutes": 6.22E-06,
          "TotalSeconds": 0.0003732
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 33580,
            "Length": 725,
            "StartLine": 711,
            "StartColumn": 140,
            "EndLine": 727,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ca33f120-a420-484b-9f77-aef5aedc45e3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1025107,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 102,
            "Microseconds": 510,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1864664351851852E-06,
            "TotalHours": 2.8475194444444444E-05,
            "TotalMilliseconds": 102.5107,
            "TotalMicroseconds": 102510.7,
            "TotalNanoseconds": 102510700.0,
            "TotalMinutes": 0.0017085116666666668,
            "TotalSeconds": 0.1025107
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8fac6794-3fcc-45b3-a38f-71460e3f8b6a",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.3113812-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 136764,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 676,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5829166666666666E-07,
            "TotalHours": 3.799E-06,
            "TotalMilliseconds": 13.6764,
            "TotalMicroseconds": 13676.4,
            "TotalNanoseconds": 13676400.0,
            "TotalMinutes": 0.00022794,
            "TotalSeconds": 0.0136764
          },
          "UserDuration": {
            "Ticks": 888343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 834,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0281747685185185E-06,
            "TotalHours": 2.4676194444444445E-05,
            "TotalMilliseconds": 88.8343,
            "TotalMicroseconds": 88834.3,
            "TotalNanoseconds": 88834300.0,
            "TotalMinutes": 0.0014805716666666667,
            "TotalSeconds": 0.0888343
          },
          "OwnDuration": {
            "Ticks": 556043,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 604,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.435682870370371E-07,
            "TotalHours": 1.5445638888888888E-05,
            "TotalMilliseconds": 55.6043,
            "TotalMicroseconds": 55604.3,
            "TotalNanoseconds": 55604300.0,
            "TotalMinutes": 0.0009267383333333334,
            "TotalSeconds": 0.0556043
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7a168d61-e698-4c98-9d41-65aa63a1b190",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 711,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.4046726-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3732,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 373,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.319444444444445E-09,
          "TotalHours": 1.0366666666666667E-07,
          "TotalMilliseconds": 0.3732,
          "TotalMicroseconds": 373.2,
          "TotalNanoseconds": 373200.0,
          "TotalMinutes": 6.22E-06,
          "TotalSeconds": 0.0003732
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3448,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 344,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9907407407407404E-09,
          "TotalHours": 9.577777777777778E-08,
          "TotalMilliseconds": 0.3448,
          "TotalMicroseconds": 344.8,
          "TotalNanoseconds": 344800.0,
          "TotalMinutes": 5.746666666666667E-06,
          "TotalSeconds": 0.0003448
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 34757,
            "Length": 1070,
            "StartLine": 737,
            "StartColumn": 130,
            "EndLine": 757,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e140c90d-c424-40d0-bae7-2a2b3348fec2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1068903,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 106,
            "Microseconds": 890,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.23715625E-06,
            "TotalHours": 2.969175E-05,
            "TotalMilliseconds": 106.8903,
            "TotalMicroseconds": 106890.3,
            "TotalNanoseconds": 106890300.0,
            "TotalMinutes": 0.001781505,
            "TotalSeconds": 0.1068903
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.5437479",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.0513489-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1012029",
            "FrameworkDuration": "00:00:00.2661949",
            "UserDuration": "00:00:00.1763501",
            "OwnDuration": "-00:00:00.0167126",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.3021569",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:33.2391781-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1289247",
            "UserDuration": "00:00:00.1732322",
            "OwnDuration": "00:00:00.0875062",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "79bcd28f-e66b-4cfe-9c04-ba2a88d3f2ff",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:33.4086402-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 179432,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 943,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0767592592592592E-07,
            "TotalHours": 4.9842222222222225E-06,
            "TotalMilliseconds": 17.9432,
            "TotalMicroseconds": 17943.2,
            "TotalNanoseconds": 17943200.0,
            "TotalMinutes": 0.00029905333333333335,
            "TotalSeconds": 0.0179432
          },
          "UserDuration": {
            "Ticks": 889471,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 88,
            "Microseconds": 947,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0294803240740741E-06,
            "TotalHours": 2.470752777777778E-05,
            "TotalMilliseconds": 88.9471,
            "TotalMicroseconds": 88947.1,
            "TotalNanoseconds": 88947100.0,
            "TotalMinutes": 0.0014824516666666666,
            "TotalSeconds": 0.0889471
          },
          "OwnDuration": {
            "Ticks": 1065455,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 106,
            "Microseconds": 545,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2331655092592592E-06,
            "TotalHours": 2.9595972222222224E-05,
            "TotalMilliseconds": 106.5455,
            "TotalMicroseconds": 106545.5,
            "TotalNanoseconds": 106545500.0,
            "TotalMinutes": 0.0017757583333333333,
            "TotalSeconds": 0.1065455
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "894a0d10-4025-49c3-a93c-76379ab889be",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 730,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 737,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:33.4092557-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3448,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 344,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9907407407407404E-09,
          "TotalHours": 9.577777777777778E-08,
          "TotalMilliseconds": 0.3448,
          "TotalMicroseconds": 344.8,
          "TotalNanoseconds": 344800.0,
          "TotalMinutes": 5.746666666666667E-06,
          "TotalSeconds": 0.0003448
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  }
}
