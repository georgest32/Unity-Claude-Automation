{
  "FailedTests": [
    {
      "Name": "Should create thread-safe CPG wrapper",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should create thread-safe CPG wrapper"
      ],
      "Data": null,
      "ExpandedName": "Should create thread-safe CPG wrapper",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
          "Type": 19,
          "Start": 17420,
          "Length": 619,
          "StartLine": 354,
          "StartColumn": 125,
          "EndLine": 361,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "1ea4bcc9-aa0e-4a3b-b9fa-d3e97e0c6958",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow $cpg = New-ThreadSafeCPG $cpg | Should -Not -BeNullOrEmpty $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Traps": null,
            "Extent": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 354,
            "StartColumnNumber": 125,
            "EndLineNumber": 361,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StartOffset": 17420,
            "EndOffset": 18039
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 354,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle concurrent operations safely",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should handle concurrent operations safely"
      ],
      "Data": null,
      "ExpandedName": "Should handle concurrent operations safely",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
          "Type": 19,
          "Start": 18184,
          "Length": 737,
          "StartLine": 363,
          "StartColumn": 130,
          "EndLine": 381,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "b2e451b3-8dc2-4d4f-a0b6-8517fec9a4f8",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cpg = New-ThreadSafeCPG $results = @() $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                } $results = $jobs | Wait-Job | Receive-Job $jobs | Remove-Job $results.Count | Should -Be 10 $results | Should -Match \"Success-\"",
            "Traps": null,
            "Extent": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 363,
            "StartColumnNumber": 130,
            "EndLineNumber": 381,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StartOffset": 18184,
            "EndOffset": 18921
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 363,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide thread safety statistics",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should provide thread safety statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide thread safety statistics",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
          "Type": 19,
          "Start": 19063,
          "Length": 311,
          "StartLine": 383,
          "StartColumn": 127,
          "EndLine": 389,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "4e2ce8c4-c28e-48f9-8c53-08bfc85b8b27",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$stats = Get-ThreadSafetyStats $stats | Should -Not -BeNullOrEmpty $stats.TotalOperations | Should -BeOfType [int] $stats.ReadOperations | Should -BeOfType [int] $stats.WriteOperations | Should -BeOfType [int]",
            "Traps": null,
            "Extent": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 383,
            "StartColumnNumber": 127,
            "EndLineNumber": 389,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StartOffset": 19063,
            "EndOffset": 19374
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 383,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should build call graphs from source code",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should build call graphs from source code"
      ],
      "Data": null,
      "ExpandedName": "Should build call graphs from source code",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 19811,
          "Length": 665,
          "StartLine": 399,
          "StartColumn": 125,
          "EndLine": 419,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "cd988477-8ab8-4cd3-b1f1-ac12959f4bab",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 399,
            "StartColumnNumber": 125,
            "EndLineNumber": 419,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 19811,
            "EndOffset": 20476
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19459,
            "Length": 212,
            "StartLine": 393,
            "StartColumn": 23,
            "EndLine": 397,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19434,
            "Length": 1770,
            "StartLine": 392,
            "StartColumn": 38,
            "EndLine": 437,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 392,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 399,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect recursive calls",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should detect recursive calls"
      ],
      "Data": null,
      "ExpandedName": "Should detect recursive calls",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 20604,
          "Length": 589,
          "StartLine": 421,
          "StartColumn": 113,
          "EndLine": 436,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "b5da7d63-a03a-4267-baa4-9474d844dc91",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 421,
            "StartColumnNumber": 113,
            "EndLineNumber": 436,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 20604,
            "EndOffset": 21193
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19459,
            "Length": 212,
            "StartLine": 393,
            "StartColumn": 23,
            "EndLine": 397,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19434,
            "Length": 1770,
            "StartLine": 392,
            "StartColumn": 38,
            "EndLine": 437,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 392,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 421,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should track variable definitions and uses",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should track variable definitions and uses"
      ],
      "Data": null,
      "ExpandedName": "Should track variable definitions and uses",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 21627,
          "Length": 475,
          "StartLine": 446,
          "StartColumn": 125,
          "EndLine": 458,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "981d5f59-f19e-4d9d-ba6e-77e9f46bdcc9",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 446,
            "StartColumnNumber": 125,
            "EndLineNumber": 458,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 21627,
            "EndOffset": 22102
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21277,
            "Length": 210,
            "StartLine": 440,
            "StartColumn": 23,
            "EndLine": 444,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21252,
            "Length": 1551,
            "StartLine": 439,
            "StartColumn": 37,
            "EndLine": 473,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e554484a-07ed-43a5-a52f-59c001309166",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 439,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 446,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should perform taint analysis",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should perform taint analysis"
      ],
      "Data": null,
      "ExpandedName": "Should perform taint analysis",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 22229,
          "Length": 563,
          "StartLine": 460,
          "StartColumn": 112,
          "EndLine": 472,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "d2078c1f-8716-4734-81e6-22080440f5e4",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 460,
            "StartColumnNumber": 112,
            "EndLineNumber": 472,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 22229,
            "EndOffset": 22792
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 132064,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 206,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5285185185185186E-07,
            "TotalHours": 3.6684444444444443E-06,
            "TotalMilliseconds": 13.2064,
            "TotalMicroseconds": 13206.4,
            "TotalNanoseconds": 13206400.0,
            "TotalMinutes": 0.00022010666666666666,
            "TotalSeconds": 0.0132064
          },
          "UserDuration": {
            "Ticks": 713051,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 305,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.252905092592593E-07,
            "TotalHours": 1.9806972222222223E-05,
            "TotalMilliseconds": 71.3051,
            "TotalMicroseconds": 71305.1,
            "TotalNanoseconds": 71305100.0,
            "TotalMinutes": 0.0011884183333333333,
            "TotalSeconds": 0.0713051
          },
          "OwnDuration": {
            "Ticks": 845115,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 511,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.78142361111111E-07,
            "TotalHours": 2.3475416666666666E-05,
            "TotalMilliseconds": 84.5115,
            "TotalMicroseconds": 84511.5,
            "TotalNanoseconds": 84511500.0,
            "TotalMinutes": 0.001408525,
            "TotalSeconds": 0.0845115
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21277,
            "Length": 210,
            "StartLine": 440,
            "StartColumn": 23,
            "EndLine": 444,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21252,
            "Length": 1551,
            "StartLine": 439,
            "StartColumn": 37,
            "EndLine": 473,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e554484a-07ed-43a5-a52f-59c001309166",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 439,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 460,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should connect to Ollama service",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should connect to Ollama service"
      ],
      "Data": null,
      "ExpandedName": "Should connect to Ollama service",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
          "Type": 19,
          "Start": 25513,
          "Length": 222,
          "StartLine": 526,
          "StartColumn": 88,
          "EndLine": 531,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bb405550-8017-409d-b189-37c3395415d8",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 526,
            "StartColumnNumber": 88,
            "EndLineNumber": 531,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "StartOffset": 25513,
            "EndOffset": 25735
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 526,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should list available models",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should list available models"
      ],
      "Data": null,
      "ExpandedName": "Should list available models",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
          "Type": 19,
          "Start": 25834,
          "Length": 279,
          "StartLine": 533,
          "StartColumn": 84,
          "EndLine": 539,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "1c97cd9e-7450-44c3-99f2-2a1a833f27c5",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 533,
            "StartColumnNumber": 84,
            "EndLineNumber": 539,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "StartOffset": 25834,
            "EndOffset": 26113
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 533,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate responses for code analysis",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should generate responses for code analysis"
      ],
      "Data": null,
      "ExpandedName": "Should generate responses for code analysis",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
          "Type": 19,
          "Start": 26227,
          "Length": 545,
          "StartLine": 541,
          "StartColumn": 99,
          "EndLine": 550,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "693a97a4-64c9-409c-9c15-3a702bea11a8",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 541,
            "StartColumnNumber": 99,
            "EndLineNumber": 550,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "StartOffset": 26227,
            "EndOffset": 26772
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 541,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create function documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create function documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create function documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 27207,
          "Length": 427,
          "StartLine": 560,
          "StartColumn": 127,
          "EndLine": 567,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "205c5fc6-6dd5-4578-ba9f-e4136a72c19e",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 560,
            "StartColumnNumber": 127,
            "EndLineNumber": 567,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StartOffset": 27207,
            "EndOffset": 27634
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 560,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create module documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create module documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create module documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 27774,
          "Length": 411,
          "StartLine": 569,
          "StartColumn": 125,
          "EndLine": 576,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "5611bf2e-3b4d-4eea-b394-066536ea6bbf",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 569,
            "StartColumnNumber": 125,
            "EndLineNumber": 576,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StartOffset": 27774,
            "EndOffset": 28185
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 569,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should support variable substitution",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should support variable substitution"
      ],
      "Data": null,
      "ExpandedName": "Should support variable substitution",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 28319,
          "Length": 542,
          "StartLine": 578,
          "StartColumn": 119,
          "EndLine": 588,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "b97782af-ba2a-4543-8f41-7fa6c1c7f830",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 578,
            "StartColumnNumber": 119,
            "EndLineNumber": 588,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StartOffset": 28319,
            "EndOffset": 28861
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 578,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should cache and retrieve responses",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should cache and retrieve responses"
      ],
      "Data": null,
      "ExpandedName": "Should cache and retrieve responses",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
          "Type": 19,
          "Start": 29279,
          "Length": 485,
          "StartLine": 598,
          "StartColumn": 116,
          "EndLine": 608,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "2e7c8607-20bb-46f3-b053-e217ed0fbe85",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 598,
            "StartColumnNumber": 116,
            "EndLineNumber": 608,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StartOffset": 29279,
            "EndOffset": 29764
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 598,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle TTL expiration",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should handle TTL expiration"
      ],
      "Data": null,
      "ExpandedName": "Should handle TTL expiration",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 29888,
          "Length": 522,
          "StartLine": 610,
          "StartColumn": 109,
          "EndLine": 621,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "fe78c6ff-8ed6-47a8-9e87-d98fd22e87f4",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 610,
            "StartColumnNumber": 109,
            "EndLineNumber": 621,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 29888,
            "EndOffset": 30410
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 610,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide cache statistics",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should provide cache statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide cache statistics",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
          "Type": 19,
          "Start": 30537,
          "Length": 402,
          "StartLine": 623,
          "StartColumn": 112,
          "EndLine": 631,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "a19ee621-fa68-4a5b-b361-545ce041bdcb",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 623,
            "StartColumnNumber": 112,
            "EndLineNumber": 631,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StartOffset": 30537,
            "EndOffset": 30939
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 190892,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 89,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.209398148148148E-07,
            "TotalHours": 5.302555555555556E-06,
            "TotalMilliseconds": 19.0892,
            "TotalMicroseconds": 19089.2,
            "TotalNanoseconds": 19089200.0,
            "TotalMinutes": 0.0003181533333333333,
            "TotalSeconds": 0.0190892
          },
          "UserDuration": {
            "Ticks": 23964946,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 396,
            "Microseconds": 494,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7737206018518518E-05,
            "TotalHours": 0.0006656929444444445,
            "TotalMilliseconds": 2396.4946,
            "TotalMicroseconds": 2396494.6,
            "TotalNanoseconds": 2396494600.0,
            "TotalMinutes": 0.039941576666666666,
            "TotalSeconds": 2.3964946
          },
          "OwnDuration": {
            "Ticks": 24155838,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 415,
            "Microseconds": 583,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.7958145833333333E-05,
            "TotalHours": 0.0006709955,
            "TotalMilliseconds": 2415.5838,
            "TotalMicroseconds": 2415583.8,
            "TotalNanoseconds": 2415583800.0,
            "TotalMinutes": 0.04025973,
            "TotalSeconds": 2.4155838
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 623,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate PowerShell documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate PowerShell documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate PowerShell documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
          "Type": 19,
          "Start": 33364,
          "Length": 396,
          "StartLine": 674,
          "StartColumn": 140,
          "EndLine": 680,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "5e3c248b-722b-4764-b6dc-7c5d6d94fd45",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"\\.SYNOPSIS\" $template | Should -Match \"Test function\" $template | Should -Match \"\\.PARAMETER Param1\"",
            "Traps": null,
            "Extent": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 674,
            "StartColumnNumber": 140,
            "EndLineNumber": 680,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "StartOffset": 33364,
            "EndOffset": 33760
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4c651756-78d5-4153-9794-0c07e1998511",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 674,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate Python documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate Python documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate Python documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
          "Type": 19,
          "Start": 33911,
          "Length": 385,
          "StartLine": 682,
          "StartColumn": 136,
          "EndLine": 688,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "7e646184-97d4-4781-85d1-eba6d0927625",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"Args:\" $template | Should -Match \"Returns:\" $template | Should -Match \"param1\"",
            "Traps": null,
            "Extent": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 682,
            "StartColumnNumber": 136,
            "EndLineNumber": 688,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "StartOffset": 33911,
            "EndOffset": 34296
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4c651756-78d5-4153-9794-0c07e1998511",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 682,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate C# documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate C# documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate C# documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
          "Type": 19,
          "Start": 34443,
          "Length": 400,
          "StartLine": 690,
          "StartColumn": 132,
          "EndLine": 696,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "55b9e403-4bc6-48ca-a85f-ad842ebbbda2",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"<summary>\" $template | Should -Match \"Test method summary\" $template | Should -Match '<param name=\"param1\">'",
            "Traps": null,
            "Extent": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 690,
            "StartColumnNumber": 132,
            "EndLineNumber": 696,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "StartOffset": 34443,
            "EndOffset": 34843
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4c651756-78d5-4153-9794-0c07e1998511",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 690,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate JavaScript documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate JavaScript documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate JavaScript documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
          "Type": 19,
          "Start": 34998,
          "Length": 437,
          "StartLine": 698,
          "StartColumn": 140,
          "EndLine": 705,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "93021d88-7913-42f9-845e-876851975396",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"/\\*\\*\" $template | Should -Match \"@param\" $template | Should -Match \"@returns\" $template | Should -Match \"\\*/\"",
            "Traps": null,
            "Extent": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 698,
            "StartColumnNumber": 140,
            "EndLineNumber": 705,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "StartOffset": 34998,
            "EndOffset": 35435
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4c651756-78d5-4153-9794-0c07e1998511",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 698,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect language from file extensions",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should detect language from file extensions"
      ],
      "Data": null,
      "ExpandedName": "Should detect language from file extensions",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
          "Type": 19,
          "Start": 35583,
          "Length": 455,
          "StartLine": 707,
          "StartColumn": 133,
          "EndLine": 713,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "a3e2319d-8722-491d-93fd-d429a594a28f",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\" Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\" Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\" Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "Traps": null,
            "Extent": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 707,
            "StartColumnNumber": 133,
            "EndLineNumber": 713,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "StartOffset": 35583,
            "EndOffset": 36038
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4c651756-78d5-4153-9794-0c07e1998511",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 707,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should initialize documentation triggers",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should initialize documentation triggers"
      ],
      "Data": null,
      "ExpandedName": "Should initialize documentation triggers",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
          "Type": 19,
          "Start": 36246,
          "Length": 120,
          "StartLine": 718,
          "StartColumn": 131,
          "EndLine": 721,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "1135f628-533c-47da-89db-387529261967",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$result = Initialize-DocumentationTriggers $result | Should -Be $true",
            "Traps": null,
            "Extent": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 718,
            "StartColumnNumber": 131,
            "EndLineNumber": 721,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "StartOffset": 36246,
            "EndOffset": 36366
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Type": 19,
            "Start": 36099,
            "Length": 968,
            "StartLine": 716,
            "StartColumn": 39,
            "EndLine": 737,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          }
        },
        "StartLine": 716,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 718,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should log trigger activity",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should log trigger activity"
      ],
      "Data": null,
      "ExpandedName": "Should log trigger activity",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
          "Type": 19,
          "Start": 36499,
          "Length": 557,
          "StartLine": 723,
          "StartColumn": 118,
          "EndLine": 736,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "6a3760c7-0a46-4b6e-bcb4-8dc04e776a9c",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                } Add-TriggerActivity -LogEntry $logEntry $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual' $activities | Should -Not -BeNullOrEmpty $activities[0].Trigger | Should -Be 'Manual'",
            "Traps": null,
            "Extent": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 723,
            "StartColumnNumber": 118,
            "EndLineNumber": 736,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "StartOffset": 36499,
            "EndOffset": 37056
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0f9982f2-9016-4c52-8936-901323b90570",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 249379,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 24,
            "Microseconds": 937,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.8863310185185186E-07,
            "TotalHours": 6.927194444444444E-06,
            "TotalMilliseconds": 24.9379,
            "TotalMicroseconds": 24937.9,
            "TotalNanoseconds": 24937900.0,
            "TotalMinutes": 0.00041563166666666666,
            "TotalSeconds": 0.0249379
          },
          "UserDuration": {
            "Ticks": 24307761,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 430,
            "Microseconds": 776,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8133982638888888E-05,
            "TotalHours": 0.0006752155833333333,
            "TotalMilliseconds": 2430.7761,
            "TotalMicroseconds": 2430776.1,
            "TotalNanoseconds": 2430776100.0,
            "TotalMinutes": 0.040512935,
            "TotalSeconds": 2.4307761
          },
          "OwnDuration": {
            "Ticks": 24557140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 455,
            "Microseconds": 714,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.842261574074074E-05,
            "TotalHours": 0.0006821427777777778,
            "TotalMilliseconds": 2455.714,
            "TotalMicroseconds": 2455714.0,
            "TotalNanoseconds": 2455714000.0,
            "TotalMinutes": 0.040928566666666666,
            "TotalSeconds": 2.455714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Type": 19,
            "Start": 36099,
            "Length": 968,
            "StartLine": 716,
            "StartColumn": 39,
            "EndLine": 737,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          }
        },
        "StartLine": 716,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 723,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should meet cache performance benchmarks",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should meet cache performance benchmarks"
      ],
      "Data": null,
      "ExpandedName": "Should meet cache performance benchmarks",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 789,
            "OffsetInLine": 26,
            "HistoryId": 32,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 1000\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:789 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 1000\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 410362,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 41,
        "Microseconds": 36,
        "Nanoseconds": 200,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.7495601851851854E-07,
        "TotalHours": 1.1398944444444444E-05,
        "TotalMilliseconds": 41.0362,
        "TotalMicroseconds": 41036.2,
        "TotalNanoseconds": 41036200.0,
        "TotalMinutes": 0.0006839366666666666,
        "TotalSeconds": 0.0410362
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
          "Type": 19,
          "Start": 39944,
          "Length": 841,
          "StartLine": 788,
          "StartColumn": 122,
          "EndLine": 808,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "ff7dd6be-f23c-4853-b979-b96fdcab6dd1",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 1000 $operations = 100 $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() 1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                } 1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                } $stopwatch.Stop() $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2) $avgTimePerOp | Should -BeLessThan 1.0",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 788,
            "StartColumnNumber": 122,
            "EndLineNumber": 808,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StartOffset": 39944,
            "EndOffset": 40785
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0410362",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0373051",
            "FrameworkDuration": "00:00:00.0037311",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0393011",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0354683",
            "FrameworkDuration": "00:00:00.0038328",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 847026,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 84,
          "Microseconds": 702,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 9.803541666666667E-07,
          "TotalHours": 2.35285E-05,
          "TotalMilliseconds": 84.7026,
          "TotalMicroseconds": 84702.6,
          "TotalNanoseconds": 84702600.0,
          "TotalMinutes": 0.00141171,
          "TotalSeconds": 0.0847026
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43620112,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 362,
            "Microseconds": 11,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.048624074074074E-05,
            "TotalHours": 0.0012116697777777778,
            "TotalMilliseconds": 4362.0112,
            "TotalMicroseconds": 4362011.2,
            "TotalNanoseconds": 4362011200.0,
            "TotalMinutes": 0.07270018666666667,
            "TotalSeconds": 4.3620112
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "caa70264-c0ed-42a4-b556-42f91946cc2e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "056de72e-bfa8-4549-b67c-01432f2c80a6",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 548869,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 886,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.352650462962963E-07,
            "TotalHours": 1.524636111111111E-05,
            "TotalMilliseconds": 54.8869,
            "TotalMicroseconds": 54886.9,
            "TotalNanoseconds": 54886900.0,
            "TotalMinutes": 0.0009147816666666667,
            "TotalSeconds": 0.0548869
          },
          "UserDuration": {
            "Ticks": 43071243,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 124,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.985097569444445E-05,
            "TotalHours": 0.0011964234166666667,
            "TotalMilliseconds": 4307.1243,
            "TotalMicroseconds": 4307124.3,
            "TotalNanoseconds": 4307124300.0,
            "TotalMinutes": 0.071785405,
            "TotalSeconds": 4.3071243
          },
          "OwnDuration": {
            "Ticks": 22671462,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 267,
            "Microseconds": 146,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.6240118055555555E-05,
            "TotalHours": 0.0006297628333333333,
            "TotalMilliseconds": 2267.1462,
            "TotalMicroseconds": 2267146.2,
            "TotalNanoseconds": 2267146200.0,
            "TotalMinutes": 0.03778577,
            "TotalSeconds": 2.2671462
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a904aaa4-2cbc-416a-ac18-40232f68cfd9",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0410362",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0373051",
            "FrameworkDuration": "00:00:00.0037311",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0393011",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0354683",
            "FrameworkDuration": "00:00:00.0038328",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 118426,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 11,
          "Microseconds": 842,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.3706712962962962E-07,
          "TotalHours": 3.2896111111111112E-06,
          "TotalMilliseconds": 11.8426,
          "TotalMicroseconds": 11842.6,
          "TotalNanoseconds": 11842600.0,
          "TotalMinutes": 0.00019737666666666667,
          "TotalSeconds": 0.0118426
        },
        "UserDuration": {
          "Ticks": 728600,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 72,
          "Microseconds": 860,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.432870370370371E-07,
          "TotalHours": 2.0238888888888888E-05,
          "TotalMilliseconds": 72.86,
          "TotalMicroseconds": 72860.0,
          "TotalNanoseconds": 72860000.0,
          "TotalMinutes": 0.0012143333333333333,
          "TotalSeconds": 0.07286
        },
        "OwnDuration": {
          "Ticks": 43653,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 365,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.0524305555555554E-08,
          "TotalHours": 1.2125833333333333E-06,
          "TotalMilliseconds": 4.3653,
          "TotalMicroseconds": 4365.3,
          "TotalNanoseconds": 4365300.0,
          "TotalMinutes": 7.2755E-05,
          "TotalSeconds": 0.0043653
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 39806,
            "Length": 1766,
            "StartLine": 786,
            "StartColumn": 37,
            "EndLine": 822,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "3a314215-421b-428c-9131-5f854d30ecff",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 786,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 788,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 373051,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 37,
        "Microseconds": 305,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.317719907407407E-07,
        "TotalHours": 1.0362527777777778E-05,
        "TotalMilliseconds": 37.3051,
        "TotalMicroseconds": 37305.1,
        "TotalNanoseconds": 37305100.0,
        "TotalMinutes": 0.0006217516666666667,
        "TotalSeconds": 0.0373051
      },
      "FrameworkDuration": {
        "Ticks": 37311,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 3,
        "Microseconds": 731,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.3184027777777777E-08,
        "TotalHours": 1.0364166666666666E-06,
        "TotalMilliseconds": 3.7311,
        "TotalMicroseconds": 3731.1,
        "TotalNanoseconds": 3731100.0,
        "TotalMinutes": 6.2185E-05,
        "TotalSeconds": 0.0037311
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle cache warming efficiently",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should handle cache warming efficiently"
      ],
      "Data": null,
      "ExpandedName": "Should handle cache warming efficiently",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 811,
            "OffsetInLine": 26,
            "HistoryId": 32,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 500\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:811 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 500\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 393011,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 39,
        "Microseconds": 301,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.5487384259259257E-07,
        "TotalHours": 1.0916972222222222E-05,
        "TotalMilliseconds": 39.3011,
        "TotalMicroseconds": 39301.1,
        "TotalNanoseconds": 39301100.0,
        "TotalMinutes": 0.0006550183333333333,
        "TotalSeconds": 0.0393011
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
          "Type": 19,
          "Start": 40921,
          "Length": 640,
          "StartLine": 810,
          "StartColumn": 121,
          "EndLine": 821,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "06e7b801-2d85-4c0f-8371-9d1bbdf0ede1",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 500 $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } } $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() Start-CacheWarming -Cache $cache -Data $warmingData $stopwatch.Stop() $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100 Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 810,
            "StartColumnNumber": 121,
            "EndLineNumber": 821,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StartOffset": 40921,
            "EndOffset": 41561
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0410362",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0373051",
            "FrameworkDuration": "00:00:00.0037311",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0393011",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0354683",
            "FrameworkDuration": "00:00:00.0038328",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 847026,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 84,
          "Microseconds": 702,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 9.803541666666667E-07,
          "TotalHours": 2.35285E-05,
          "TotalMilliseconds": 84.7026,
          "TotalMicroseconds": 84702.6,
          "TotalNanoseconds": 84702600.0,
          "TotalMinutes": 0.00141171,
          "TotalSeconds": 0.0847026
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43620112,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 362,
            "Microseconds": 11,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.048624074074074E-05,
            "TotalHours": 0.0012116697777777778,
            "TotalMilliseconds": 4362.0112,
            "TotalMicroseconds": 4362011.2,
            "TotalNanoseconds": 4362011200.0,
            "TotalMinutes": 0.07270018666666667,
            "TotalSeconds": 4.3620112
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "caa70264-c0ed-42a4-b556-42f91946cc2e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "056de72e-bfa8-4549-b67c-01432f2c80a6",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 548869,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 886,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.352650462962963E-07,
            "TotalHours": 1.524636111111111E-05,
            "TotalMilliseconds": 54.8869,
            "TotalMicroseconds": 54886.9,
            "TotalNanoseconds": 54886900.0,
            "TotalMinutes": 0.0009147816666666667,
            "TotalSeconds": 0.0548869
          },
          "UserDuration": {
            "Ticks": 43071243,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 124,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.985097569444445E-05,
            "TotalHours": 0.0011964234166666667,
            "TotalMilliseconds": 4307.1243,
            "TotalMicroseconds": 4307124.3,
            "TotalNanoseconds": 4307124300.0,
            "TotalMinutes": 0.071785405,
            "TotalSeconds": 4.3071243
          },
          "OwnDuration": {
            "Ticks": 22671462,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 267,
            "Microseconds": 146,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.6240118055555555E-05,
            "TotalHours": 0.0006297628333333333,
            "TotalMilliseconds": 2267.1462,
            "TotalMicroseconds": 2267146.2,
            "TotalNanoseconds": 2267146200.0,
            "TotalMinutes": 0.03778577,
            "TotalSeconds": 2.2671462
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a904aaa4-2cbc-416a-ac18-40232f68cfd9",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0410362",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0373051",
            "FrameworkDuration": "00:00:00.0037311",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0393011",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0354683",
            "FrameworkDuration": "00:00:00.0038328",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 118426,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 11,
          "Microseconds": 842,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.3706712962962962E-07,
          "TotalHours": 3.2896111111111112E-06,
          "TotalMilliseconds": 11.8426,
          "TotalMicroseconds": 11842.6,
          "TotalNanoseconds": 11842600.0,
          "TotalMinutes": 0.00019737666666666667,
          "TotalSeconds": 0.0118426
        },
        "UserDuration": {
          "Ticks": 728600,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 72,
          "Microseconds": 860,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.432870370370371E-07,
          "TotalHours": 2.0238888888888888E-05,
          "TotalMilliseconds": 72.86,
          "TotalMicroseconds": 72860.0,
          "TotalNanoseconds": 72860000.0,
          "TotalMinutes": 0.0012143333333333333,
          "TotalSeconds": 0.07286
        },
        "OwnDuration": {
          "Ticks": 43653,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 365,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.0524305555555554E-08,
          "TotalHours": 1.2125833333333333E-06,
          "TotalMilliseconds": 4.3653,
          "TotalMicroseconds": 4365.3,
          "TotalNanoseconds": 4365300.0,
          "TotalMinutes": 7.2755E-05,
          "TotalSeconds": 0.0043653
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 39806,
            "Length": 1766,
            "StartLine": 786,
            "StartColumn": 37,
            "EndLine": 822,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "3a314215-421b-428c-9131-5f854d30ecff",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 786,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 810,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 354683,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 35,
        "Microseconds": 468,
        "Nanoseconds": 300,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.105127314814815E-07,
        "TotalHours": 9.852305555555555E-06,
        "TotalMilliseconds": 35.4683,
        "TotalMicroseconds": 35468.3,
        "TotalNanoseconds": 35468300.0,
        "TotalMinutes": 0.0005911383333333333,
        "TotalSeconds": 0.0354683
      },
      "FrameworkDuration": {
        "Ticks": 38328,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 3,
        "Microseconds": 832,
        "Nanoseconds": 800,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.436111111111111E-08,
        "TotalHours": 1.0646666666666668E-06,
        "TotalMilliseconds": 3.8328,
        "TotalMicroseconds": 3832.8,
        "TotalNanoseconds": 3832800.0,
        "TotalMinutes": 6.388E-05,
        "TotalSeconds": 0.0038328
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should demonstrate parallel processing benefits",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Parallel Processing Performance",
        "Should demonstrate parallel processing benefits"
      ],
      "Data": null,
      "ExpandedName": "Should demonstrate parallel processing benefits",
      "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected the actual value to be less than 412.57735, but got 718.2539.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected the actual value to be less than 412.57735, but got 718.2539.",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "929",
            "LineText": "                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Terminating": true,
            "ShouldResult": "Pester.ShouldResult"
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8250,
            "OffsetInLine": 13,
            "HistoryId": 32,
            "ScriptName": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1:8250 char:13\r\n+             throw $errorRecord\r\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1",
            "PSCommandPath": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 15687828,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 568,
        "Microseconds": 782,
        "Nanoseconds": 800,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.8157208333333335E-05,
        "TotalHours": 0.000435773,
        "TotalMilliseconds": 1568.7828,
        "TotalMicroseconds": 1568782.8,
        "TotalNanoseconds": 1568782800.0,
        "TotalMinutes": 0.02614638,
        "TotalSeconds": 1.5687828
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
          "Type": 19,
          "Start": 45589,
          "Length": 1070,
          "StartLine": 910,
          "StartColumn": 130,
          "EndLine": 930,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "37c27cdc-ab83-483d-ac5e-fe50507d3c48",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                } $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                } Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Traps": null,
            "Extent": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 910,
            "StartColumnNumber": 130,
            "EndLineNumber": 930,
            "EndColumnNumber": 14,
            "Text": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StartOffset": 45589,
            "EndOffset": 46659
          },
          "Parent": {
            "ScriptBlock": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Parallel Processing Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance"
        ],
        "Data": null,
        "ExpandedName": "Parallel Processing Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 412.57735, but got 718.2539.",
            "StandardOutput": null,
            "Duration": "00:00:01.5687828",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 910,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.9346337-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5642814",
            "FrameworkDuration": "00:00:00.0045014",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 1,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 1,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 17916637,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 791,
          "Microseconds": 663,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 2.073684837962963E-05,
          "TotalHours": 0.0004976843611111111,
          "TotalMilliseconds": 1791.6637,
          "TotalMicroseconds": 1791663.7,
          "TotalNanoseconds": 1791663700.0,
          "TotalMinutes": 0.029861061666666668,
          "TotalSeconds": 1.7916637
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43620112,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 362,
            "Microseconds": 11,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.048624074074074E-05,
            "TotalHours": 0.0012116697777777778,
            "TotalMilliseconds": 4362.0112,
            "TotalMicroseconds": 4362011.2,
            "TotalNanoseconds": 4362011200.0,
            "TotalMinutes": 0.07270018666666667,
            "TotalSeconds": 4.3620112
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "caa70264-c0ed-42a4-b556-42f91946cc2e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "056de72e-bfa8-4549-b67c-01432f2c80a6",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 548869,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 886,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.352650462962963E-07,
            "TotalHours": 1.524636111111111E-05,
            "TotalMilliseconds": 54.8869,
            "TotalMicroseconds": 54886.9,
            "TotalNanoseconds": 54886900.0,
            "TotalMinutes": 0.0009147816666666667,
            "TotalSeconds": 0.0548869
          },
          "UserDuration": {
            "Ticks": 43071243,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 124,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.985097569444445E-05,
            "TotalHours": 0.0011964234166666667,
            "TotalMilliseconds": 4307.1243,
            "TotalMicroseconds": 4307124.3,
            "TotalNanoseconds": 4307124300.0,
            "TotalMinutes": 0.071785405,
            "TotalSeconds": 4.3071243
          },
          "OwnDuration": {
            "Ticks": 22671462,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 267,
            "Microseconds": 146,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.6240118055555555E-05,
            "TotalHours": 0.0006297628333333333,
            "TotalMilliseconds": 2267.1462,
            "TotalMicroseconds": 2267146.2,
            "TotalNanoseconds": 2267146200.0,
            "TotalMinutes": 0.03778577,
            "TotalSeconds": 2.2671462
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a904aaa4-2cbc-416a-ac18-40232f68cfd9",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 412.57735, but got 718.2539.",
            "StandardOutput": null,
            "Duration": "00:00:01.5687828",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 910,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.9346337-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5642814",
            "FrameworkDuration": "00:00:00.0045014",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.9340835-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 258024,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 25,
          "Microseconds": 802,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.986388888888889E-07,
          "TotalHours": 7.167333333333333E-06,
          "TotalMilliseconds": 25.8024,
          "TotalMicroseconds": 25802.4,
          "TotalNanoseconds": 25802400.0,
          "TotalMinutes": 0.00043004,
          "TotalSeconds": 0.0258024
        },
        "UserDuration": {
          "Ticks": 17658613,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 765,
          "Microseconds": 861,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 2.043820949074074E-05,
          "TotalHours": 0.0004905170277777778,
          "TotalMilliseconds": 1765.8613,
          "TotalMicroseconds": 1765861.3,
          "TotalNanoseconds": 1765861300.0,
          "TotalMinutes": 0.029431021666666668,
          "TotalSeconds": 1.7658613
        },
        "OwnDuration": {
          "Ticks": 2228809,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 222,
          "Microseconds": 880,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.5796400462962964E-06,
          "TotalHours": 6.191136111111112E-05,
          "TotalMilliseconds": 222.8809,
          "TotalMicroseconds": 222880.9,
          "TotalNanoseconds": 222880900.0,
          "TotalMinutes": 0.003714681666666667,
          "TotalSeconds": 0.2228809
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Type": 19,
            "Start": 45443,
            "Length": 1227,
            "StartLine": 908,
            "StartColumn": 51,
            "EndLine": 931,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "60ae4e86-8a7e-459f-8062-5fac345a8b2b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          }
        },
        "StartLine": 908,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 1,
        "OwnPassedCount": 0,
        "OwnFailedCount": 1,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 910,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:06.9346337-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 15642814,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 564,
        "Microseconds": 281,
        "Nanoseconds": 400,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.8105108796296296E-05,
        "TotalHours": 0.0004345226111111111,
        "TotalMilliseconds": 1564.2814,
        "TotalMicroseconds": 1564281.4,
        "TotalNanoseconds": 1564281400.0,
        "TotalMinutes": 0.026071356666666667,
        "TotalSeconds": 1.5642814
      },
      "FrameworkDuration": {
        "Ticks": 45014,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 4,
        "Microseconds": 501,
        "Nanoseconds": 400,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 5.2099537037037036E-08,
        "TotalHours": 1.250388888888889E-06,
        "TotalMilliseconds": 4.5014,
        "TotalMicroseconds": 4501.4,
        "TotalNanoseconds": 4501400.0,
        "TotalMinutes": 7.502333333333334E-05,
        "TotalSeconds": 0.0045014
      },
      "PluginData": null,
      "FrameworkData": null
    }
  ],
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 46988,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T21:12:08.5568228-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:08.5568228Z",
            "LastWriteTime": "2025-08-28T21:11:26.8722739-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8722739Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
          "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
          "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
          "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
          "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
          "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Failed",
        "Duration": {
          "Ticks": 54441537,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 444,
          "Microseconds": 153,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 5,
          "TotalDays": 6.301103819444444E-05,
          "TotalHours": 0.0015122649166666668,
          "TotalMilliseconds": 5444.1537,
          "TotalMicroseconds": 5444153.7,
          "TotalNanoseconds": 5444153700.0,
          "TotalMinutes": 0.090735895,
          "TotalSeconds": 5.4441537
        },
        "FailedCount": 26,
        "PassedCount": 2,
        "SkippedCount": 0,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": false,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
        "DiscoveryDuration": {
          "Ticks": 10599289,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 59,
          "Microseconds": 928,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.2267695601851852E-05,
          "TotalHours": 0.00029442469444444444,
          "TotalMilliseconds": 1059.9289,
          "TotalMicroseconds": 1059928.9,
          "TotalNanoseconds": 1059928900.0,
          "TotalMinutes": 0.017665481666666667,
          "TotalSeconds": 1.0599289
        },
        "UserDuration": {
          "Ticks": 43072301,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 307,
          "Microseconds": 230,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 4,
          "TotalDays": 4.9852200231481484E-05,
          "TotalHours": 0.0011964528055555556,
          "TotalMilliseconds": 4307.2301,
          "TotalMicroseconds": 4307230.1,
          "TotalNanoseconds": 4307230100.0,
          "TotalMinutes": 0.07178716833333333,
          "TotalSeconds": 4.3072301
        },
        "FrameworkDuration": {
          "Ticks": 769947,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 76,
          "Microseconds": 994,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.911423611111111E-07,
          "TotalHours": 2.1387416666666668E-05,
          "TotalMilliseconds": 76.9947,
          "TotalMicroseconds": 76994.7,
          "TotalNanoseconds": 76994700.0,
          "TotalMinutes": 0.001283245,
          "TotalSeconds": 0.0769947
        },
        "StandardOutput": null
      }
    ],
    "Result": "Failed",
    "FailedCount": 26,
    "FailedBlocksCount": 3,
    "FailedContainersCount": 0,
    "PassedCount": 2,
    "SkippedCount": 0,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 54441537,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 444,
      "Microseconds": 153,
      "Nanoseconds": 700,
      "Minutes": 0,
      "Seconds": 5,
      "TotalDays": 6.301103819444444E-05,
      "TotalHours": 0.0015122649166666668,
      "TotalMilliseconds": 5444.1537,
      "TotalMicroseconds": 5444153.7,
      "TotalNanoseconds": 5444153700.0,
      "TotalMinutes": 0.090735895,
      "TotalSeconds": 5.4441537
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T21:12:03.091653-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-211203.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-211203.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 10599289,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 59,
      "Microseconds": 928,
      "Nanoseconds": 900,
      "Minutes": 0,
      "Seconds": 1,
      "TotalDays": 1.2267695601851852E-05,
      "TotalHours": 0.00029442469444444444,
      "TotalMilliseconds": 1059.9289,
      "TotalMicroseconds": 1059928.9,
      "TotalNanoseconds": 1059928900.0,
      "TotalMinutes": 0.017665481666666667,
      "TotalSeconds": 1.0599289
    },
    "UserDuration": {
      "Ticks": 43072301,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 307,
      "Microseconds": 230,
      "Nanoseconds": 100,
      "Minutes": 0,
      "Seconds": 4,
      "TotalDays": 4.9852200231481484E-05,
      "TotalHours": 0.0011964528055555556,
      "TotalMilliseconds": 4307.2301,
      "TotalMicroseconds": 4307230.1,
      "TotalNanoseconds": 4307230100.0,
      "TotalMinutes": 0.07178716833333333,
      "TotalSeconds": 4.3072301
    },
    "FrameworkDuration": {
      "Ticks": 769947,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 76,
      "Microseconds": 994,
      "Nanoseconds": 700,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 8.911423611111111E-07,
      "TotalHours": 2.1387416666666668E-05,
      "TotalMilliseconds": 76.9947,
      "TotalMicroseconds": 76994.7,
      "TotalNanoseconds": 76994700.0,
      "TotalMinutes": 0.001283245,
      "TotalSeconds": 0.0769947
    },
    "Failed": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17420,
            "Length": 619,
            "StartLine": 354,
            "StartColumn": 125,
            "EndLine": 361,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1ea4bcc9-aa0e-4a3b-b9fa-d3e97e0c6958",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 354,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18184,
            "Length": 737,
            "StartLine": 363,
            "StartColumn": 130,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b2e451b3-8dc2-4d4f-a0b6-8517fec9a4f8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 363,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 19063,
            "Length": 311,
            "StartLine": 383,
            "StartColumn": 127,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4e2ce8c4-c28e-48f9-8c53-08bfc85b8b27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 383,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19811,
            "Length": 665,
            "StartLine": 399,
            "StartColumn": 125,
            "EndLine": 419,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "cd988477-8ab8-4cd3-b1f1-ac12959f4bab",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 399,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20604,
            "Length": 589,
            "StartLine": 421,
            "StartColumn": 113,
            "EndLine": 436,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b5da7d63-a03a-4267-baa4-9474d844dc91",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 421,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21627,
            "Length": 475,
            "StartLine": 446,
            "StartColumn": 125,
            "EndLine": 458,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "981d5f59-f19e-4d9d-ba6e-77e9f46bdcc9",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e554484a-07ed-43a5-a52f-59c001309166",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 446,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22229,
            "Length": 563,
            "StartLine": 460,
            "StartColumn": 112,
            "EndLine": 472,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d2078c1f-8716-4734-81e6-22080440f5e4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e554484a-07ed-43a5-a52f-59c001309166",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 460,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25513,
            "Length": 222,
            "StartLine": 526,
            "StartColumn": 88,
            "EndLine": 531,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bb405550-8017-409d-b189-37c3395415d8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 526,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25834,
            "Length": 279,
            "StartLine": 533,
            "StartColumn": 84,
            "EndLine": 539,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c97cd9e-7450-44c3-99f2-2a1a833f27c5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 533,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26227,
            "Length": 545,
            "StartLine": 541,
            "StartColumn": 99,
            "EndLine": 550,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "693a97a4-64c9-409c-9c15-3a702bea11a8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 541,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27207,
            "Length": 427,
            "StartLine": 560,
            "StartColumn": 127,
            "EndLine": 567,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "205c5fc6-6dd5-4578-ba9f-e4136a72c19e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 560,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27774,
            "Length": 411,
            "StartLine": 569,
            "StartColumn": 125,
            "EndLine": 576,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5611bf2e-3b4d-4eea-b394-066536ea6bbf",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 569,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28319,
            "Length": 542,
            "StartLine": 578,
            "StartColumn": 119,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b97782af-ba2a-4543-8f41-7fa6c1c7f830",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 578,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29279,
            "Length": 485,
            "StartLine": 598,
            "StartColumn": 116,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e7c8607-20bb-46f3-b053-e217ed0fbe85",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 598,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29888,
            "Length": 522,
            "StartLine": 610,
            "StartColumn": 109,
            "EndLine": 621,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "fe78c6ff-8ed6-47a8-9e87-d98fd22e87f4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30537,
            "Length": 402,
            "StartLine": 623,
            "StartColumn": 112,
            "EndLine": 631,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a19ee621-fa68-4a5b-b361-545ce041bdcb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 623,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Type": 19,
            "Start": 33364,
            "Length": 396,
            "StartLine": 674,
            "StartColumn": 140,
            "EndLine": 680,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5e3c248b-722b-4764-b6dc-7c5d6d94fd45",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 674,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Type": 19,
            "Start": 33911,
            "Length": 385,
            "StartLine": 682,
            "StartColumn": 136,
            "EndLine": 688,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7e646184-97d4-4781-85d1-eba6d0927625",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 682,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Type": 19,
            "Start": 34443,
            "Length": 400,
            "StartLine": 690,
            "StartColumn": 132,
            "EndLine": 696,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "55b9e403-4bc6-48ca-a85f-ad842ebbbda2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Type": 19,
            "Start": 34998,
            "Length": 437,
            "StartLine": 698,
            "StartColumn": 140,
            "EndLine": 705,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "93021d88-7913-42f9-845e-876851975396",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 698,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Type": 19,
            "Start": 35583,
            "Length": 455,
            "StartLine": 707,
            "StartColumn": 133,
            "EndLine": 713,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a3e2319d-8722-491d-93fd-d429a594a28f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 707,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Type": 19,
            "Start": 36246,
            "Length": 120,
            "StartLine": 718,
            "StartColumn": 131,
            "EndLine": 721,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1135f628-533c-47da-89db-387529261967",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 718,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Type": 19,
            "Start": 36499,
            "Length": 557,
            "StartLine": 723,
            "StartColumn": 118,
            "EndLine": 736,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6a3760c7-0a46-4b6e-bcb4-8dc04e776a9c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 723,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 410362,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 41,
          "Microseconds": 36,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.7495601851851854E-07,
          "TotalHours": 1.1398944444444444E-05,
          "TotalMilliseconds": 41.0362,
          "TotalMicroseconds": 41036.2,
          "TotalNanoseconds": 41036200.0,
          "TotalMinutes": 0.0006839366666666666,
          "TotalSeconds": 0.0410362
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 39944,
            "Length": 841,
            "StartLine": 788,
            "StartColumn": 122,
            "EndLine": 808,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ff7dd6be-f23c-4853-b979-b96fdcab6dd1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 847026,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 702,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.803541666666667E-07,
            "TotalHours": 2.35285E-05,
            "TotalMilliseconds": 84.7026,
            "TotalMicroseconds": 84702.6,
            "TotalNanoseconds": 84702600.0,
            "TotalMinutes": 0.00141171,
            "TotalSeconds": 0.0847026
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 118426,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 842,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3706712962962962E-07,
            "TotalHours": 3.2896111111111112E-06,
            "TotalMilliseconds": 11.8426,
            "TotalMicroseconds": 11842.6,
            "TotalNanoseconds": 11842600.0,
            "TotalMinutes": 0.00019737666666666667,
            "TotalSeconds": 0.0118426
          },
          "UserDuration": {
            "Ticks": 728600,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 860,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.432870370370371E-07,
            "TotalHours": 2.0238888888888888E-05,
            "TotalMilliseconds": 72.86,
            "TotalMicroseconds": 72860.0,
            "TotalNanoseconds": 72860000.0,
            "TotalMinutes": 0.0012143333333333333,
            "TotalSeconds": 0.07286
          },
          "OwnDuration": {
            "Ticks": 43653,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 365,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.0524305555555554E-08,
            "TotalHours": 1.2125833333333333E-06,
            "TotalMilliseconds": 4.3653,
            "TotalMicroseconds": 4365.3,
            "TotalNanoseconds": 4365300.0,
            "TotalMinutes": 7.2755E-05,
            "TotalSeconds": 0.0043653
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3a314215-421b-428c-9131-5f854d30ecff",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 788,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 373051,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 37,
          "Microseconds": 305,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.317719907407407E-07,
          "TotalHours": 1.0362527777777778E-05,
          "TotalMilliseconds": 37.3051,
          "TotalMicroseconds": 37305.1,
          "TotalNanoseconds": 37305100.0,
          "TotalMinutes": 0.0006217516666666667,
          "TotalSeconds": 0.0373051
        },
        "FrameworkDuration": {
          "Ticks": 37311,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 731,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.3184027777777777E-08,
          "TotalHours": 1.0364166666666666E-06,
          "TotalMilliseconds": 3.7311,
          "TotalMicroseconds": 3731.1,
          "TotalNanoseconds": 3731100.0,
          "TotalMinutes": 6.2185E-05,
          "TotalSeconds": 0.0037311
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 393011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 39,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.5487384259259257E-07,
          "TotalHours": 1.0916972222222222E-05,
          "TotalMilliseconds": 39.3011,
          "TotalMicroseconds": 39301.1,
          "TotalNanoseconds": 39301100.0,
          "TotalMinutes": 0.0006550183333333333,
          "TotalSeconds": 0.0393011
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 40921,
            "Length": 640,
            "StartLine": 810,
            "StartColumn": 121,
            "EndLine": 821,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "06e7b801-2d85-4c0f-8371-9d1bbdf0ede1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 847026,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 702,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.803541666666667E-07,
            "TotalHours": 2.35285E-05,
            "TotalMilliseconds": 84.7026,
            "TotalMicroseconds": 84702.6,
            "TotalNanoseconds": 84702600.0,
            "TotalMinutes": 0.00141171,
            "TotalSeconds": 0.0847026
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 118426,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 842,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3706712962962962E-07,
            "TotalHours": 3.2896111111111112E-06,
            "TotalMilliseconds": 11.8426,
            "TotalMicroseconds": 11842.6,
            "TotalNanoseconds": 11842600.0,
            "TotalMinutes": 0.00019737666666666667,
            "TotalSeconds": 0.0118426
          },
          "UserDuration": {
            "Ticks": 728600,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 860,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.432870370370371E-07,
            "TotalHours": 2.0238888888888888E-05,
            "TotalMilliseconds": 72.86,
            "TotalMicroseconds": 72860.0,
            "TotalNanoseconds": 72860000.0,
            "TotalMinutes": 0.0012143333333333333,
            "TotalSeconds": 0.07286
          },
          "OwnDuration": {
            "Ticks": 43653,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 365,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.0524305555555554E-08,
            "TotalHours": 1.2125833333333333E-06,
            "TotalMilliseconds": 4.3653,
            "TotalMicroseconds": 4365.3,
            "TotalNanoseconds": 4365300.0,
            "TotalMinutes": 7.2755E-05,
            "TotalSeconds": 0.0043653
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3a314215-421b-428c-9131-5f854d30ecff",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 810,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 354683,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 35,
          "Microseconds": 468,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.105127314814815E-07,
          "TotalHours": 9.852305555555555E-06,
          "TotalMilliseconds": 35.4683,
          "TotalMicroseconds": 35468.3,
          "TotalNanoseconds": 35468300.0,
          "TotalMinutes": 0.0005911383333333333,
          "TotalSeconds": 0.0354683
        },
        "FrameworkDuration": {
          "Ticks": 38328,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 832,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.436111111111111E-08,
          "TotalHours": 1.0646666666666668E-06,
          "TotalMilliseconds": 3.8328,
          "TotalMicroseconds": 3832.8,
          "TotalNanoseconds": 3832800.0,
          "TotalMinutes": 6.388E-05,
          "TotalSeconds": 0.0038328
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 412.57735, but got 718.2539.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15687828,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 568,
          "Microseconds": 782,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8157208333333335E-05,
          "TotalHours": 0.000435773,
          "TotalMilliseconds": 1568.7828,
          "TotalMicroseconds": 1568782.8,
          "TotalNanoseconds": 1568782800.0,
          "TotalMinutes": 0.02614638,
          "TotalSeconds": 1.5687828
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 45589,
            "Length": 1070,
            "StartLine": 910,
            "StartColumn": 130,
            "EndLine": 930,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "37c27cdc-ab83-483d-ac5e-fe50507d3c48",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 17916637,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 791,
            "Microseconds": 663,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.073684837962963E-05,
            "TotalHours": 0.0004976843611111111,
            "TotalMilliseconds": 1791.6637,
            "TotalMicroseconds": 1791663.7,
            "TotalNanoseconds": 1791663700.0,
            "TotalMinutes": 0.029861061666666668,
            "TotalSeconds": 1.7916637
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.9340835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 258024,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 802,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.986388888888889E-07,
            "TotalHours": 7.167333333333333E-06,
            "TotalMilliseconds": 25.8024,
            "TotalMicroseconds": 25802.4,
            "TotalNanoseconds": 25802400.0,
            "TotalMinutes": 0.00043004,
            "TotalSeconds": 0.0258024
          },
          "UserDuration": {
            "Ticks": 17658613,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 765,
            "Microseconds": 861,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.043820949074074E-05,
            "TotalHours": 0.0004905170277777778,
            "TotalMilliseconds": 1765.8613,
            "TotalMicroseconds": 1765861.3,
            "TotalNanoseconds": 1765861300.0,
            "TotalMinutes": 0.029431021666666668,
            "TotalSeconds": 1.7658613
          },
          "OwnDuration": {
            "Ticks": 2228809,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 222,
            "Microseconds": 880,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5796400462962964E-06,
            "TotalHours": 6.191136111111112E-05,
            "TotalMilliseconds": 222.8809,
            "TotalMicroseconds": 222880.9,
            "TotalNanoseconds": 222880900.0,
            "TotalMinutes": 0.003714681666666667,
            "TotalSeconds": 0.2228809
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "60ae4e86-8a7e-459f-8062-5fac345a8b2b",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 908,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 910,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.9346337-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15642814,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 564,
          "Microseconds": 281,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8105108796296296E-05,
          "TotalHours": 0.0004345226111111111,
          "TotalMilliseconds": 1564.2814,
          "TotalMicroseconds": 1564281.4,
          "TotalNanoseconds": 1564281400.0,
          "TotalMinutes": 0.026071356666666667,
          "TotalSeconds": 1.5642814
        },
        "FrameworkDuration": {
          "Ticks": 45014,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 501,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.2099537037037036E-08,
          "TotalHours": 1.250388888888889E-06,
          "TotalMilliseconds": 4.5014,
          "TotalMicroseconds": 4501.4,
          "TotalNanoseconds": 4501400.0,
          "TotalMinutes": 7.502333333333334E-05,
          "TotalSeconds": 0.0045014
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "FailedBlocks": [
      {
        "Name": "Enhanced Documentation System - CPG Components",
        "Path": [
          "Enhanced Documentation System - CPG Components"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - CPG Components",
        "ExpandedPath": "Enhanced Documentation System - CPG Components",
        "Blocks": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 352,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 392,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 439,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 7,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 7,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at Invoke-ScriptBlock(Closure, FunctionContext)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 325\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 845115,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 84,
          "Microseconds": 511,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 9.78142361111111E-07,
          "TotalHours": 2.3475416666666666E-05,
          "TotalMilliseconds": 84.5115,
          "TotalMicroseconds": 84511.5,
          "TotalNanoseconds": 84511500.0,
          "TotalMinutes": 0.001408525,
          "TotalSeconds": 0.0845115
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "CPG",
          "Core"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Type": 19,
            "Start": 13313,
            "Length": 3913,
            "StartLine": 293,
            "StartColumn": 19,
            "EndLine": 350,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "4d89aa24-1391-49e8-8e5c-22b29c34adad",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 352,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 392,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 439,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 132064,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 206,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5285185185185186E-07,
          "TotalHours": 3.6684444444444443E-06,
          "TotalMilliseconds": 13.2064,
          "TotalMicroseconds": 13206.4,
          "TotalNanoseconds": 13206400.0,
          "TotalMinutes": 0.00022010666666666666,
          "TotalSeconds": 0.0132064
        },
        "UserDuration": {
          "Ticks": 713051,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 71,
          "Microseconds": 305,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.252905092592593E-07,
          "TotalHours": 1.9806972222222223E-05,
          "TotalMilliseconds": 71.3051,
          "TotalMicroseconds": 71305.1,
          "TotalNanoseconds": 71305100.0,
          "TotalMinutes": 0.0011884183333333333,
          "TotalSeconds": 0.0713051
        },
        "OwnDuration": {
          "Ticks": 845115,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 84,
          "Microseconds": 511,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 9.78142361111111E-07,
          "TotalHours": 2.3475416666666666E-05,
          "TotalMilliseconds": 84.5115,
          "TotalMicroseconds": 84511.5,
          "TotalNanoseconds": 84511500.0,
          "TotalMinutes": 0.001408525,
          "TotalSeconds": 0.0845115
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 13179,
            "Length": 9631,
            "StartLine": 290,
            "StartColumn": 78,
            "EndLine": 474,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "2c4d36d1-2e37-4d07-ab54-a55da0225a31",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 290,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Enhanced Documentation System - LLM Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - LLM Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration",
        "Blocks": [
          {
            "Name": "Ollama API Integration",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration",
            "Data": null,
            "ExpandedName": "Ollama API Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
            "Blocks": "",
            "Tests": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Result": "Skipped",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        ",
            "StartLine": 525,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Prompt Templates",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates",
            "Data": null,
            "ExpandedName": "Prompt Templates",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
            "Blocks": "",
            "Tests": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        ",
            "StartLine": 553,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Response Cache",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache",
            "Data": null,
            "ExpandedName": "Response Cache",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
            "Blocks": "",
            "Tests": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        ",
            "StartLine": 591,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 9,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 9,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at Invoke-ScriptBlock(Closure, FunctionContext)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 510\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 24155838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 415,
          "Microseconds": 583,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.7958145833333333E-05,
          "TotalHours": 0.0006709955,
          "TotalMilliseconds": 2415.5838,
          "TotalMicroseconds": 2415583.8,
          "TotalNanoseconds": 2415583800.0,
          "TotalMinutes": 0.04025973,
          "TotalSeconds": 2.4155838
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "LLM",
          "Integration"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 23080,
            "Length": 2290,
            "StartLine": 483,
            "StartColumn": 19,
            "EndLine": 523,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "fbec0ecc-be64-4adf-80e4-b059855d0bde",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Ollama API Integration",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration",
            "Data": null,
            "ExpandedName": "Ollama API Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
            "Blocks": "",
            "Tests": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Result": "Skipped",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        ",
            "StartLine": 525,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Prompt Templates",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates",
            "Data": null,
            "ExpandedName": "Prompt Templates",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
            "Blocks": "",
            "Tests": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        ",
            "StartLine": 553,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Response Cache",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache",
            "Data": null,
            "ExpandedName": "Response Cache",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
            "Blocks": "",
            "Tests": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        ",
            "StartLine": 591,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 190892,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 19,
          "Microseconds": 89,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.209398148148148E-07,
          "TotalHours": 5.302555555555556E-06,
          "TotalMilliseconds": 19.0892,
          "TotalMicroseconds": 19089.2,
          "TotalNanoseconds": 19089200.0,
          "TotalMinutes": 0.0003181533333333333,
          "TotalSeconds": 0.0190892
        },
        "UserDuration": {
          "Ticks": 23964946,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 396,
          "Microseconds": 494,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.7737206018518518E-05,
          "TotalHours": 0.0006656929444444445,
          "TotalMilliseconds": 2396.4946,
          "TotalMicroseconds": 2396494.6,
          "TotalNanoseconds": 2396494600.0,
          "TotalMinutes": 0.039941576666666666,
          "TotalSeconds": 2.3964946
        },
        "OwnDuration": {
          "Ticks": 24155838,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 415,
          "Microseconds": 583,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.7958145833333333E-05,
          "TotalHours": 0.0006709955,
          "TotalMilliseconds": 2415.5838,
          "TotalMicroseconds": 2415583.8,
          "TotalNanoseconds": 2415583800.0,
          "TotalMinutes": 0.04025973,
          "TotalSeconds": 2.4155838
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 22946,
            "Length": 8011,
            "StartLine": 480,
            "StartColumn": 86,
            "EndLine": 633,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "cc5ddda7-d861-4775-b57c-64272a4512e7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 480,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Enhanced Documentation System - Templates & Automation",
        "Path": [
          "Enhanced Documentation System - Templates & Automation"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - Templates & Automation",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
        "Blocks": [
          {
            "Name": "Language-Specific Templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates",
            "Data": null,
            "ExpandedName": "Language-Specific Templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
            "Blocks": "",
            "Tests": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Result": "Failed",
            "FailedCount": 5,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        ",
            "StartLine": 672,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 5,
            "OwnPassedCount": 0,
            "OwnFailedCount": 5,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Automation Triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers",
            "Data": null,
            "ExpandedName": "Automation Triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
            "Blocks": "",
            "Tests": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        ",
            "StartLine": 716,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 7,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 7,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at Invoke-ScriptBlock(Closure, FunctionContext)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 657\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 24557140,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 455,
          "Microseconds": 714,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.842261574074074E-05,
          "TotalHours": 0.0006821427777777778,
          "TotalMilliseconds": 2455.714,
          "TotalMicroseconds": 2455714.0,
          "TotalNanoseconds": 2455714000.0,
          "TotalMinutes": 0.040928566666666666,
          "TotalSeconds": 2.455714
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "Templates",
          "Automation"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:11:27.0763688-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:11:27.0763688Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 54390277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 439,
            "Microseconds": 27,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 5,
            "TotalDays": 6.295170949074074E-05,
            "TotalHours": 0.0015108410277777779,
            "TotalMilliseconds": 5439.0277,
            "TotalMicroseconds": 5439027.7,
            "TotalNanoseconds": 5439027700.0,
            "TotalMinutes": 0.09065046166666667,
            "TotalSeconds": 5.4390277
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_f47771eb-ba49-47d1-8537-0f60cef9d8f3",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fa1e0ad6-c5a1-482a-9425-48d6dab7135f",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 10599289,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 928,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.2267695601851852E-05,
            "TotalHours": 0.00029442469444444444,
            "TotalMilliseconds": 1059.9289,
            "TotalMicroseconds": 1059928.9,
            "TotalNanoseconds": 1059928900.0,
            "TotalMinutes": 0.017665481666666667,
            "TotalSeconds": 1.0599289
          },
          "FrameworkDuration": {
            "Ticks": 718687,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 71,
            "Microseconds": 868,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.318136574074074E-07,
            "TotalHours": 1.996352777777778E-05,
            "TotalMilliseconds": 71.8687,
            "TotalMicroseconds": 71868.7,
            "TotalNanoseconds": 71868700.0,
            "TotalMinutes": 0.0011978116666666668,
            "TotalSeconds": 0.0718687
          },
          "UserDuration": {
            "Ticks": 43072301,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 307,
            "Microseconds": 230,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.9852200231481484E-05,
            "TotalHours": 0.0011964528055555556,
            "TotalMilliseconds": 4307.2301,
            "TotalMicroseconds": 4307230.1,
            "TotalNanoseconds": 4307230100.0,
            "TotalMinutes": 0.07178716833333333,
            "TotalSeconds": 4.3072301
          },
          "OwnDuration": {
            "Ticks": -38787928,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -878,
            "Microseconds": -792,
            "Nanoseconds": -800,
            "Minutes": 0,
            "Seconds": -3,
            "TotalDays": -4.489343518518518E-05,
            "TotalHours": -0.0010774424444444444,
            "TotalMilliseconds": -3878.7928,
            "TotalMicroseconds": -3878792.8,
            "TotalNanoseconds": -3878792800.0,
            "TotalMinutes": -0.06464654666666667,
            "TotalSeconds": -3.8787928
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a062173f-b24c-4124-9bd9-97b97ea2fad2",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 31260,
            "Length": 1890,
            "StartLine": 642,
            "StartColumn": 19,
            "EndLine": 670,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0f9982f2-9016-4c52-8936-901323b90570",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Language-Specific Templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates",
            "Data": null,
            "ExpandedName": "Language-Specific Templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
            "Blocks": "",
            "Tests": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Result": "Failed",
            "FailedCount": 5,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        ",
            "StartLine": 672,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 5,
            "OwnPassedCount": 0,
            "OwnFailedCount": 5,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Automation Triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers",
            "Data": null,
            "ExpandedName": "Automation Triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
            "Blocks": "",
            "Tests": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        ",
            "StartLine": 716,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 249379,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 24,
          "Microseconds": 937,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.8863310185185186E-07,
          "TotalHours": 6.927194444444444E-06,
          "TotalMilliseconds": 24.9379,
          "TotalMicroseconds": 24937.9,
          "TotalNanoseconds": 24937900.0,
          "TotalMinutes": 0.00041563166666666666,
          "TotalSeconds": 0.0249379
        },
        "UserDuration": {
          "Ticks": 24307761,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 430,
          "Microseconds": 776,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.8133982638888888E-05,
          "TotalHours": 0.0006752155833333333,
          "TotalMilliseconds": 2430.7761,
          "TotalMicroseconds": 2430776.1,
          "TotalNanoseconds": 2430776100.0,
          "TotalMinutes": 0.040512935,
          "TotalSeconds": 2.4307761
        },
        "OwnDuration": {
          "Ticks": 24557140,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 455,
          "Microseconds": 714,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.842261574074074E-05,
          "TotalHours": 0.0006821427777777778,
          "TotalMilliseconds": 2455.714,
          "TotalMicroseconds": 2455714.0,
          "TotalNanoseconds": 2455714000.0,
          "TotalMinutes": 0.040928566666666666,
          "TotalSeconds": 2.455714
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 31114,
            "Length": 5960,
            "StartLine": 639,
            "StartColumn": 98,
            "EndLine": 738,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "12237905-9f3b-4c85-9380-59ab50782ffc",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 639,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      }
    ],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 390441,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 39,
          "Microseconds": 44,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.5189930555555555E-07,
          "TotalHours": 1.0845583333333333E-05,
          "TotalMilliseconds": 39.0441,
          "TotalMicroseconds": 39044.1,
          "TotalNanoseconds": 39044100.0,
          "TotalMinutes": 0.000650735,
          "TotalSeconds": 0.0390441
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 42906,
            "Length": 1371,
            "StartLine": 857,
            "StartColumn": 64,
            "EndLine": 882,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5767dd75-474a-42ed-80bb-bc1890d9abe8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2184987,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 498,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5289201388888887E-06,
            "TotalHours": 6.0694083333333336E-05,
            "TotalMilliseconds": 218.4987,
            "TotalMicroseconds": 218498.7,
            "TotalNanoseconds": 218498700.0,
            "TotalMinutes": 0.003641645,
            "TotalSeconds": 0.2184987
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47109899-f284-4177-ac80-4920bb44b1ed",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.8002859-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 170156,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 15,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.969398148148148E-07,
            "TotalHours": 4.726555555555556E-06,
            "TotalMilliseconds": 17.0156,
            "TotalMicroseconds": 17015.6,
            "TotalNanoseconds": 17015600.0,
            "TotalMinutes": 0.00028359333333333333,
            "TotalSeconds": 0.0170156
          },
          "UserDuration": {
            "Ticks": 2014831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 201,
            "Microseconds": 483,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.331980324074074E-06,
            "TotalHours": 5.5967527777777775E-05,
            "TotalMilliseconds": 201.4831,
            "TotalMicroseconds": 201483.1,
            "TotalNanoseconds": 201483100.0,
            "TotalMinutes": 0.0033580516666666667,
            "TotalSeconds": 0.2014831
          },
          "OwnDuration": {
            "Ticks": 1493082,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 149,
            "Microseconds": 308,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7281041666666667E-06,
            "TotalHours": 4.14745E-05,
            "TotalMilliseconds": 149.3082,
            "TotalMicroseconds": 149308.2,
            "TotalNanoseconds": 149308200.0,
            "TotalMinutes": 0.00248847,
            "TotalSeconds": 0.1493082
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dffc3cab-4c13-47ea-9429-0cb0c226cc69",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 857,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.8610304-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 385679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4638773148148147E-07,
          "TotalHours": 1.0713305555555556E-05,
          "TotalMilliseconds": 38.5679,
          "TotalMicroseconds": 38567.9,
          "TotalNanoseconds": 38567900.0,
          "TotalMinutes": 0.0006427983333333334,
          "TotalSeconds": 0.0385679
        },
        "FrameworkDuration": {
          "Ticks": 4762,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 476,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.511574074074074E-09,
          "TotalHours": 1.3227777777777779E-07,
          "TotalMilliseconds": 0.4762,
          "TotalMicroseconds": 476.2,
          "TotalNanoseconds": 476200.0,
          "TotalMinutes": 7.936666666666666E-06,
          "TotalSeconds": 0.0004762
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 301464,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 146,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4891666666666666E-07,
          "TotalHours": 8.374E-06,
          "TotalMilliseconds": 30.1464,
          "TotalMicroseconds": 30146.4,
          "TotalNanoseconds": 30146400.0,
          "TotalMinutes": 0.00050244,
          "TotalSeconds": 0.0301464
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 44432,
            "Length": 938,
            "StartLine": 884,
            "StartColumn": 140,
            "EndLine": 905,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "98d045f8-136c-42fc-86ad-46f4a1403d98",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2184987,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 498,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5289201388888887E-06,
            "TotalHours": 6.0694083333333336E-05,
            "TotalMilliseconds": 218.4987,
            "TotalMicroseconds": 218498.7,
            "TotalNanoseconds": 218498700.0,
            "TotalMinutes": 0.003641645,
            "TotalSeconds": 0.2184987
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47109899-f284-4177-ac80-4920bb44b1ed",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.8002859-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 170156,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 15,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.969398148148148E-07,
            "TotalHours": 4.726555555555556E-06,
            "TotalMilliseconds": 17.0156,
            "TotalMicroseconds": 17015.6,
            "TotalNanoseconds": 17015600.0,
            "TotalMinutes": 0.00028359333333333333,
            "TotalSeconds": 0.0170156
          },
          "UserDuration": {
            "Ticks": 2014831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 201,
            "Microseconds": 483,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.331980324074074E-06,
            "TotalHours": 5.5967527777777775E-05,
            "TotalMilliseconds": 201.4831,
            "TotalMicroseconds": 201483.1,
            "TotalNanoseconds": 201483100.0,
            "TotalMinutes": 0.0033580516666666667,
            "TotalSeconds": 0.2014831
          },
          "OwnDuration": {
            "Ticks": 1493082,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 149,
            "Microseconds": 308,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7281041666666667E-06,
            "TotalHours": 4.14745E-05,
            "TotalMilliseconds": 149.3082,
            "TotalMicroseconds": 149308.2,
            "TotalNanoseconds": 149308200.0,
            "TotalMinutes": 0.00248847,
            "TotalSeconds": 0.1493082
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dffc3cab-4c13-47ea-9429-0cb0c226cc69",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 884,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.9000954-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 297438,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 29,
          "Microseconds": 743,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4425694444444445E-07,
          "TotalHours": 8.262166666666667E-06,
          "TotalMilliseconds": 29.7438,
          "TotalMicroseconds": 29743.8,
          "TotalNanoseconds": 29743800.0,
          "TotalMinutes": 0.00049573,
          "TotalSeconds": 0.0297438
        },
        "FrameworkDuration": {
          "Ticks": 4026,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.659722222222222E-09,
          "TotalHours": 1.1183333333333334E-07,
          "TotalMilliseconds": 0.4026,
          "TotalMicroseconds": 402.6,
          "TotalNanoseconds": 402600.0,
          "TotalMinutes": 6.71E-06,
          "TotalSeconds": 0.0004026
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17420,
            "Length": 619,
            "StartLine": 354,
            "StartColumn": 125,
            "EndLine": 361,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1ea4bcc9-aa0e-4a3b-b9fa-d3e97e0c6958",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 354,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18184,
            "Length": 737,
            "StartLine": 363,
            "StartColumn": 130,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b2e451b3-8dc2-4d4f-a0b6-8517fec9a4f8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 363,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 19063,
            "Length": 311,
            "StartLine": 383,
            "StartColumn": 127,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4e2ce8c4-c28e-48f9-8c53-08bfc85b8b27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "655f3f40-9ebf-41a5-9662-93ced3aa68e6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 383,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19811,
            "Length": 665,
            "StartLine": 399,
            "StartColumn": 125,
            "EndLine": 419,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "cd988477-8ab8-4cd3-b1f1-ac12959f4bab",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 399,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20604,
            "Length": 589,
            "StartLine": 421,
            "StartColumn": 113,
            "EndLine": 436,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b5da7d63-a03a-4267-baa4-9474d844dc91",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "95e3b60b-8263-4fa8-92a8-002dbcf8c395",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0d0e5d02-a343-448e-9fd6-6a9405ae48a8",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 421,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21627,
            "Length": 475,
            "StartLine": 446,
            "StartColumn": 125,
            "EndLine": 458,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "981d5f59-f19e-4d9d-ba6e-77e9f46bdcc9",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e554484a-07ed-43a5-a52f-59c001309166",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 446,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22229,
            "Length": 563,
            "StartLine": 460,
            "StartColumn": 112,
            "EndLine": 472,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d2078c1f-8716-4734-81e6-22080440f5e4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0845115",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1775298-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0132064",
            "UserDuration": "00:00:00.0713051",
            "OwnDuration": "00:00:00.0845115",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5fe73eb6-b153-44c1-a939-353c75d2ef16",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e554484a-07ed-43a5-a52f-59c001309166",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 460,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25513,
            "Length": 222,
            "StartLine": 526,
            "StartColumn": 88,
            "EndLine": 531,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bb405550-8017-409d-b189-37c3395415d8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 526,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25834,
            "Length": 279,
            "StartLine": 533,
            "StartColumn": 84,
            "EndLine": 539,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1c97cd9e-7450-44c3-99f2-2a1a833f27c5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 533,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26227,
            "Length": 545,
            "StartLine": 541,
            "StartColumn": 99,
            "EndLine": 550,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "693a97a4-64c9-409c-9c15-3a702bea11a8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "091e4541-0530-4f2e-949b-ddb668483b42",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 541,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27207,
            "Length": 427,
            "StartLine": 560,
            "StartColumn": 127,
            "EndLine": 567,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "205c5fc6-6dd5-4578-ba9f-e4136a72c19e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 560,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27774,
            "Length": 411,
            "StartLine": 569,
            "StartColumn": 125,
            "EndLine": 576,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5611bf2e-3b4d-4eea-b394-066536ea6bbf",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 569,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28319,
            "Length": 542,
            "StartLine": 578,
            "StartColumn": 119,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b97782af-ba2a-4543-8f41-7fa6c1c7f830",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1c17ef53-52b0-4240-a3f1-ebc779e72580",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "978af5fa-af24-46cd-aa3e-3e03a3046e98",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 578,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29279,
            "Length": 485,
            "StartLine": 598,
            "StartColumn": 116,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e7c8607-20bb-46f3-b053-e217ed0fbe85",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 598,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29888,
            "Length": 522,
            "StartLine": 610,
            "StartColumn": 109,
            "EndLine": 621,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "fe78c6ff-8ed6-47a8-9e87-d98fd22e87f4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30537,
            "Length": 402,
            "StartLine": 623,
            "StartColumn": 112,
            "EndLine": 631,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a19ee621-fa68-4a5b-b361-545ce041bdcb",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4155838",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.2620401-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0190892",
            "UserDuration": "00:00:02.3964946",
            "OwnDuration": "00:00:02.4155838",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "92a9ee87-faba-43c2-8f5b-8e30e5af2bc4",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a79d643c-2016-4189-bba7-0d7f97bc4e27",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 623,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Type": 19,
            "Start": 33364,
            "Length": 396,
            "StartLine": 674,
            "StartColumn": 140,
            "EndLine": 680,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5e3c248b-722b-4764-b6dc-7c5d6d94fd45",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 674,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Type": 19,
            "Start": 33911,
            "Length": 385,
            "StartLine": 682,
            "StartColumn": 136,
            "EndLine": 688,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7e646184-97d4-4781-85d1-eba6d0927625",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 682,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Type": 19,
            "Start": 34443,
            "Length": 400,
            "StartLine": 690,
            "StartColumn": 132,
            "EndLine": 696,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "55b9e403-4bc6-48ca-a85f-ad842ebbbda2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Type": 19,
            "Start": 34998,
            "Length": 437,
            "StartLine": 698,
            "StartColumn": 140,
            "EndLine": 705,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "93021d88-7913-42f9-845e-876851975396",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 698,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Type": 19,
            "Start": 35583,
            "Length": 455,
            "StartLine": 707,
            "StartColumn": 133,
            "EndLine": 713,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a3e2319d-8722-491d-93fd-d429a594a28f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4c651756-78d5-4153-9794-0c07e1998511",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 707,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Type": 19,
            "Start": 36246,
            "Length": 120,
            "StartLine": 718,
            "StartColumn": 131,
            "EndLine": 721,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1135f628-533c-47da-89db-387529261967",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 718,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Type": 19,
            "Start": 36499,
            "Length": 557,
            "StartLine": 723,
            "StartColumn": 118,
            "EndLine": 736,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6a3760c7-0a46-4b6e-bcb4-8dc04e776a9c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.4557140",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.5931145-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0249379",
            "UserDuration": "00:00:02.4307761",
            "OwnDuration": "00:00:02.4557140",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47a4e4fd-bc3d-4f34-b3fa-0b8aee27becc",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 723,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 410362,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 41,
          "Microseconds": 36,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.7495601851851854E-07,
          "TotalHours": 1.1398944444444444E-05,
          "TotalMilliseconds": 41.0362,
          "TotalMicroseconds": 41036.2,
          "TotalNanoseconds": 41036200.0,
          "TotalMinutes": 0.0006839366666666666,
          "TotalSeconds": 0.0410362
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 39944,
            "Length": 841,
            "StartLine": 788,
            "StartColumn": 122,
            "EndLine": 808,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ff7dd6be-f23c-4853-b979-b96fdcab6dd1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 847026,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 702,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.803541666666667E-07,
            "TotalHours": 2.35285E-05,
            "TotalMilliseconds": 84.7026,
            "TotalMicroseconds": 84702.6,
            "TotalNanoseconds": 84702600.0,
            "TotalMinutes": 0.00141171,
            "TotalSeconds": 0.0847026
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 118426,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 842,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3706712962962962E-07,
            "TotalHours": 3.2896111111111112E-06,
            "TotalMilliseconds": 11.8426,
            "TotalMicroseconds": 11842.6,
            "TotalNanoseconds": 11842600.0,
            "TotalMinutes": 0.00019737666666666667,
            "TotalSeconds": 0.0118426
          },
          "UserDuration": {
            "Ticks": 728600,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 860,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.432870370370371E-07,
            "TotalHours": 2.0238888888888888E-05,
            "TotalMilliseconds": 72.86,
            "TotalMicroseconds": 72860.0,
            "TotalNanoseconds": 72860000.0,
            "TotalMinutes": 0.0012143333333333333,
            "TotalSeconds": 0.07286
          },
          "OwnDuration": {
            "Ticks": 43653,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 365,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.0524305555555554E-08,
            "TotalHours": 1.2125833333333333E-06,
            "TotalMilliseconds": 4.3653,
            "TotalMicroseconds": 4365.3,
            "TotalNanoseconds": 4365300.0,
            "TotalMinutes": 7.2755E-05,
            "TotalSeconds": 0.0043653
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3a314215-421b-428c-9131-5f854d30ecff",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 788,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7162276-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 373051,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 37,
          "Microseconds": 305,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.317719907407407E-07,
          "TotalHours": 1.0362527777777778E-05,
          "TotalMilliseconds": 37.3051,
          "TotalMicroseconds": 37305.1,
          "TotalNanoseconds": 37305100.0,
          "TotalMinutes": 0.0006217516666666667,
          "TotalSeconds": 0.0373051
        },
        "FrameworkDuration": {
          "Ticks": 37311,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 731,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.3184027777777777E-08,
          "TotalHours": 1.0364166666666666E-06,
          "TotalMilliseconds": 3.7311,
          "TotalMicroseconds": 3731.1,
          "TotalNanoseconds": 3731100.0,
          "TotalMinutes": 6.2185E-05,
          "TotalSeconds": 0.0037311
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 393011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 39,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.5487384259259257E-07,
          "TotalHours": 1.0916972222222222E-05,
          "TotalMilliseconds": 39.3011,
          "TotalMicroseconds": 39301.1,
          "TotalNanoseconds": 39301100.0,
          "TotalMinutes": 0.0006550183333333333,
          "TotalSeconds": 0.0393011
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 40921,
            "Length": 640,
            "StartLine": 810,
            "StartColumn": 121,
            "EndLine": 821,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "06e7b801-2d85-4c0f-8371-9d1bbdf0ede1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 847026,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 84,
            "Microseconds": 702,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 9.803541666666667E-07,
            "TotalHours": 2.35285E-05,
            "TotalMilliseconds": 84.7026,
            "TotalMicroseconds": 84702.6,
            "TotalNanoseconds": 84702600.0,
            "TotalMinutes": 0.00141171,
            "TotalSeconds": 0.0847026
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.7155835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 118426,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 11,
            "Microseconds": 842,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3706712962962962E-07,
            "TotalHours": 3.2896111111111112E-06,
            "TotalMilliseconds": 11.8426,
            "TotalMicroseconds": 11842.6,
            "TotalNanoseconds": 11842600.0,
            "TotalMinutes": 0.00019737666666666667,
            "TotalSeconds": 0.0118426
          },
          "UserDuration": {
            "Ticks": 728600,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 860,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.432870370370371E-07,
            "TotalHours": 2.0238888888888888E-05,
            "TotalMilliseconds": 72.86,
            "TotalMicroseconds": 72860.0,
            "TotalNanoseconds": 72860000.0,
            "TotalMinutes": 0.0012143333333333333,
            "TotalSeconds": 0.07286
          },
          "OwnDuration": {
            "Ticks": 43653,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 365,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.0524305555555554E-08,
            "TotalHours": 1.2125833333333333E-06,
            "TotalMilliseconds": 4.3653,
            "TotalMicroseconds": 4365.3,
            "TotalNanoseconds": 4365300.0,
            "TotalMinutes": 7.2755E-05,
            "TotalSeconds": 0.0043653
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3a314215-421b-428c-9131-5f854d30ecff",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 810,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.7572871-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 354683,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 35,
          "Microseconds": 468,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.105127314814815E-07,
          "TotalHours": 9.852305555555555E-06,
          "TotalMilliseconds": 35.4683,
          "TotalMicroseconds": 35468.3,
          "TotalNanoseconds": 35468300.0,
          "TotalMinutes": 0.0005911383333333333,
          "TotalSeconds": 0.0354683
        },
        "FrameworkDuration": {
          "Ticks": 38328,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 832,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.436111111111111E-08,
          "TotalHours": 1.0646666666666668E-06,
          "TotalMilliseconds": 3.8328,
          "TotalMicroseconds": 3832.8,
          "TotalNanoseconds": 3832800.0,
          "TotalMinutes": 6.388E-05,
          "TotalSeconds": 0.0038328
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 390441,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 39,
          "Microseconds": 44,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.5189930555555555E-07,
          "TotalHours": 1.0845583333333333E-05,
          "TotalMilliseconds": 39.0441,
          "TotalMicroseconds": 39044.1,
          "TotalNanoseconds": 39044100.0,
          "TotalMinutes": 0.000650735,
          "TotalSeconds": 0.0390441
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 42906,
            "Length": 1371,
            "StartLine": 857,
            "StartColumn": 64,
            "EndLine": 882,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "5767dd75-474a-42ed-80bb-bc1890d9abe8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2184987,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 498,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5289201388888887E-06,
            "TotalHours": 6.0694083333333336E-05,
            "TotalMilliseconds": 218.4987,
            "TotalMicroseconds": 218498.7,
            "TotalNanoseconds": 218498700.0,
            "TotalMinutes": 0.003641645,
            "TotalSeconds": 0.2184987
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47109899-f284-4177-ac80-4920bb44b1ed",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.8002859-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 170156,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 15,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.969398148148148E-07,
            "TotalHours": 4.726555555555556E-06,
            "TotalMilliseconds": 17.0156,
            "TotalMicroseconds": 17015.6,
            "TotalNanoseconds": 17015600.0,
            "TotalMinutes": 0.00028359333333333333,
            "TotalSeconds": 0.0170156
          },
          "UserDuration": {
            "Ticks": 2014831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 201,
            "Microseconds": 483,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.331980324074074E-06,
            "TotalHours": 5.5967527777777775E-05,
            "TotalMilliseconds": 201.4831,
            "TotalMicroseconds": 201483.1,
            "TotalNanoseconds": 201483100.0,
            "TotalMinutes": 0.0033580516666666667,
            "TotalSeconds": 0.2014831
          },
          "OwnDuration": {
            "Ticks": 1493082,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 149,
            "Microseconds": 308,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7281041666666667E-06,
            "TotalHours": 4.14745E-05,
            "TotalMilliseconds": 149.3082,
            "TotalMicroseconds": 149308.2,
            "TotalNanoseconds": 149308200.0,
            "TotalMinutes": 0.00248847,
            "TotalSeconds": 0.1493082
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dffc3cab-4c13-47ea-9429-0cb0c226cc69",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 857,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.8610304-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 385679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4638773148148147E-07,
          "TotalHours": 1.0713305555555556E-05,
          "TotalMilliseconds": 38.5679,
          "TotalMicroseconds": 38567.9,
          "TotalNanoseconds": 38567900.0,
          "TotalMinutes": 0.0006427983333333334,
          "TotalSeconds": 0.0385679
        },
        "FrameworkDuration": {
          "Ticks": 4762,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 476,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.511574074074074E-09,
          "TotalHours": 1.3227777777777779E-07,
          "TotalMilliseconds": 0.4762,
          "TotalMicroseconds": 476.2,
          "TotalNanoseconds": 476200.0,
          "TotalMinutes": 7.936666666666666E-06,
          "TotalSeconds": 0.0004762
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 301464,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 146,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4891666666666666E-07,
          "TotalHours": 8.374E-06,
          "TotalMilliseconds": 30.1464,
          "TotalMicroseconds": 30146.4,
          "TotalNanoseconds": 30146400.0,
          "TotalMinutes": 0.00050244,
          "TotalSeconds": 0.0301464
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 44432,
            "Length": 938,
            "StartLine": 884,
            "StartColumn": 140,
            "EndLine": 905,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "98d045f8-136c-42fc-86ad-46f4a1403d98",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2184987,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 498,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5289201388888887E-06,
            "TotalHours": 6.0694083333333336E-05,
            "TotalMilliseconds": 218.4987,
            "TotalMicroseconds": 218498.7,
            "TotalNanoseconds": 218498700.0,
            "TotalMinutes": 0.003641645,
            "TotalSeconds": 0.2184987
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "47109899-f284-4177-ac80-4920bb44b1ed",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.8002859-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 170156,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 17,
            "Microseconds": 15,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.969398148148148E-07,
            "TotalHours": 4.726555555555556E-06,
            "TotalMilliseconds": 17.0156,
            "TotalMicroseconds": 17015.6,
            "TotalNanoseconds": 17015600.0,
            "TotalMinutes": 0.00028359333333333333,
            "TotalSeconds": 0.0170156
          },
          "UserDuration": {
            "Ticks": 2014831,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 201,
            "Microseconds": 483,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.331980324074074E-06,
            "TotalHours": 5.5967527777777775E-05,
            "TotalMilliseconds": 201.4831,
            "TotalMicroseconds": 201483.1,
            "TotalNanoseconds": 201483100.0,
            "TotalMinutes": 0.0033580516666666667,
            "TotalSeconds": 0.2014831
          },
          "OwnDuration": {
            "Ticks": 1493082,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 149,
            "Microseconds": 308,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7281041666666667E-06,
            "TotalHours": 4.14745E-05,
            "TotalMilliseconds": 149.3082,
            "TotalMicroseconds": 149308.2,
            "TotalNanoseconds": 149308200.0,
            "TotalMinutes": 0.00248847,
            "TotalSeconds": 0.1493082
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dffc3cab-4c13-47ea-9429-0cb0c226cc69",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 884,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.9000954-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 297438,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 29,
          "Microseconds": 743,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4425694444444445E-07,
          "TotalHours": 8.262166666666667E-06,
          "TotalMilliseconds": 29.7438,
          "TotalMicroseconds": 29743.8,
          "TotalNanoseconds": 29743800.0,
          "TotalMinutes": 0.00049573,
          "TotalSeconds": 0.0297438
        },
        "FrameworkDuration": {
          "Ticks": 4026,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 402,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.659722222222222E-09,
          "TotalHours": 1.1183333333333334E-07,
          "TotalMilliseconds": 0.4026,
          "TotalMicroseconds": 402.6,
          "TotalNanoseconds": 402600.0,
          "TotalMinutes": 6.71E-06,
          "TotalSeconds": 0.0004026
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 412.57735, but got 718.2539.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60\r\nat <ScriptBlock>, <No file>: line 1",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15687828,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 568,
          "Microseconds": 782,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8157208333333335E-05,
          "TotalHours": 0.000435773,
          "TotalMilliseconds": 1568.7828,
          "TotalMicroseconds": 1568782.8,
          "TotalNanoseconds": 1568782800.0,
          "TotalMinutes": 0.02614638,
          "TotalSeconds": 1.5687828
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 45589,
            "Length": 1070,
            "StartLine": 910,
            "StartColumn": 130,
            "EndLine": 930,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "37c27cdc-ab83-483d-ac5e-fe50507d3c48",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 17916637,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 791,
            "Microseconds": 663,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.073684837962963E-05,
            "TotalHours": 0.0004976843611111111,
            "TotalMilliseconds": 1791.6637,
            "TotalMicroseconds": 1791663.7,
            "TotalNanoseconds": 1791663700.0,
            "TotalMinutes": 0.029861061666666668,
            "TotalSeconds": 1.7916637
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:05.4390277",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:04.1681109-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:01.0599289",
            "FrameworkDuration": "00:00:00.0718687",
            "UserDuration": "00:00:04.3072301",
            "OwnDuration": "-00:00:03.8787928",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.3620112",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:06.6332446-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0548869",
            "UserDuration": "00:00:04.3071243",
            "OwnDuration": "00:00:02.2671462",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:06.9340835-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 258024,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 802,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.986388888888889E-07,
            "TotalHours": 7.167333333333333E-06,
            "TotalMilliseconds": 25.8024,
            "TotalMicroseconds": 25802.4,
            "TotalNanoseconds": 25802400.0,
            "TotalMinutes": 0.00043004,
            "TotalSeconds": 0.0258024
          },
          "UserDuration": {
            "Ticks": 17658613,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 765,
            "Microseconds": 861,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.043820949074074E-05,
            "TotalHours": 0.0004905170277777778,
            "TotalMilliseconds": 1765.8613,
            "TotalMicroseconds": 1765861.3,
            "TotalNanoseconds": 1765861300.0,
            "TotalMinutes": 0.029431021666666668,
            "TotalSeconds": 1.7658613
          },
          "OwnDuration": {
            "Ticks": 2228809,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 222,
            "Microseconds": 880,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5796400462962964E-06,
            "TotalHours": 6.191136111111112E-05,
            "TotalMilliseconds": 222.8809,
            "TotalMicroseconds": 222880.9,
            "TotalNanoseconds": 222880900.0,
            "TotalMinutes": 0.003714681666666667,
            "TotalSeconds": 0.2228809
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "60ae4e86-8a7e-459f-8062-5fac345a8b2b",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 908,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 910,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:06.9346337-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15642814,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 564,
          "Microseconds": 281,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8105108796296296E-05,
          "TotalHours": 0.0004345226111111111,
          "TotalMilliseconds": 1564.2814,
          "TotalMicroseconds": 1564281.4,
          "TotalNanoseconds": 1564281400.0,
          "TotalMinutes": 0.026071356666666667,
          "TotalSeconds": 1.5642814
        },
        "FrameworkDuration": {
          "Ticks": 45014,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 4,
          "Microseconds": 501,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.2099537037037036E-08,
          "TotalHours": 1.250388888888889E-06,
          "TotalMilliseconds": 4.5014,
          "TotalMicroseconds": 4501.4,
          "TotalNanoseconds": 4501400.0,
          "TotalMinutes": 7.502333333333334E-05,
          "TotalSeconds": 0.0045014
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  },
  "Summary": {
    "TestScript": "Test-EnhancedDocumentationSystem.ps1",
    "SuccessRate": 7.1,
    "TestScope": "All",
    "TotalTests": 28,
    "StartTime": "2025-08-28T21:12:08.9068097-04:00",
    "Failed": 26,
    "Passed": 2,
    "Duration": 5.4441537,
    "Skipped": 0
  }
}
