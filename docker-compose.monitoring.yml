# Monitoring Stack for Unity-Claude Automation
# Includes: Prometheus, Grafana, Loki, Alertmanager, cAdvisor, Node Exporter
# Version: 2025-08-24

version: '3.9'

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: unity-claude-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=prometheus"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: unity-claude-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=grafana"

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:3.4.1
    container_name: unity-claude-loki
    command: -config.file=/etc/loki/loki-config-fixed.yml
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=loki"

  # Fluent Bit - Log Collector
  fluent-bit:
    image: fluent/fluent-bit:3.0
    container_name: unity-claude-fluent-bit
    volumes:
      - ./monitoring/fluent-bit:/fluent-bit/etc
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/powershell:/var/log/powershell:rw
      - ./logs/apps:/var/log/apps:rw
    networks:
      - monitoring
    depends_on:
      - loki
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=fluent-bit"

  # Alertmanager - Alert Routing
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: unity-claude-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager-simple.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=alertmanager"

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: unity-claude-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8082:8080"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=cadvisor"

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.8.0
    container_name: unity-claude-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)'
      - '--collector.netclass.ignored-devices=^(veth.*)$'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=node-exporter"

  # Health Check Service - API Health Monitoring
  health-check:
    build:
      context: ./monitoring
      dockerfile_inline: |
        FROM python:3.12-slim
        WORKDIR /app
        COPY health_check_server.py .
        RUN pip install fastapi uvicorn httpx
        EXPOSE 9999
        CMD ["python", "-m", "uvicorn", "health_check_server:app", "--host", "0.0.0.0", "--port", "9999"]
    container_name: unity-claude-health-check
    ports:
      - "9999:9999"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - grafana
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9999/health/live || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=health-check"

  # Grafana Alloy - Unified Telemetry Collection (Optional - Modern Approach)
  alloy:
    image: grafana/alloy:latest
    container_name: unity-claude-alloy
    volumes:
      - ./monitoring/alloy:/etc/alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command:
      - run
      - /etc/alloy/config.alloy
      - --storage.path=/var/lib/alloy/data
      - --server.http.listen-addr=0.0.0.0:12345
    ports:
      - "12345:12345"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=alloy"