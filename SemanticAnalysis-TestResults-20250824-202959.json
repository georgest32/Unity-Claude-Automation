{
  "EndTime": "2025-08-24T20:29:59.5172288-04:00",
  "Duration": {
    "Ticks": 2799816,
    "Days": 0,
    "Hours": 0,
    "Milliseconds": 279,
    "Microseconds": 981,
    "Nanoseconds": 600,
    "Minutes": 0,
    "Seconds": 0,
    "TotalDays": 3.240527777777778E-06,
    "TotalHours": 7.777266666666667E-05,
    "TotalMilliseconds": 279.9816,
    "TotalMicroseconds": 279981.6,
    "TotalNanoseconds": 279981600.0,
    "TotalMinutes": 0.00466636,
    "TotalSeconds": 0.2799816
  },
  "FailedTests": 7,
  "TotalTests": 19,
  "StartTime": "2025-08-24T20:29:59.2372472-04:00",
  "Details": [
    {
      "Name": "Module Manifest Validation",
      "Details": "Version: 1.0.0, Functions: 10",
      "Timestamp": "2025-08-24T20:29:59.3289179-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Module Import",
      "Details": "Successfully imported Unity-Claude-SemanticAnalysis",
      "Timestamp": "2025-08-24T20:29:59.4335843-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Find-DesignPatterns",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4384762-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Get-CodePurpose",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4391408-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Get-CohesionMetrics",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4397652-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Extract-BusinessLogic",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.44053-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Recover-Architecture",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4412165-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Test-DocumentationCompleteness",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4418659-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Test-NamingConventions",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4424289-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Test-CommentCodeAlignment",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4432182-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: Get-TechnicalDebt",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4438365-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Function Export: New-QualityReport",
      "Details": "Function available for use",
      "Timestamp": "2025-08-24T20:29:59.4444333-04:00",
      "Error": "",
      "Status": "Passed"
    },
    {
      "Name": "Pattern Recognition Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4536203-04:00",
      "Error": "Exception calling \"Create\" with \"1\" argument(s): \"At line:25 char:32\r\n+             'Circle' { return [Circle]::new() }\r\n+                                ~~~~~~\r\nUnable to find type [Circle].\r\n\r\nAt line:26 char:32\r\n+             'Square' { return [Square]::new() }\r\n+                                ~~~~~~\r\nUnable to find type [Square].\r\n\r\nAt line:23 char:21\r\n+     static [object] CreateShape([string] $shapeType) {\r\n+                     ~~~~~~~~~~~\r\nNot all code path returns value within method.\"",
      "Status": "Failed"
    },
    {
      "Name": "Code Purpose Classification Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4571004-04:00",
      "Error": "Exception calling \"Create\" with \"1\" argument(s): \"At line:1 char:36\r\n+ function Get-UserById { param([int])\r\n+                                    ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:1 char:36\r\n+ function Get-UserById { param([int])\r\n+                                    ~\r\nMissing ')' in function parameter list.\r\n\r\nAt line:1 char:23\r\n+ function Get-UserById { param([int])\r\n+                       ~\r\nMissing closing '}' in statement block or type definition.\"",
      "Status": "Failed"
    },
    {
      "Name": "Cohesion Metrics Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4716567-04:00",
      "Error": "The term 'Convert-ASTtoCPG' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
      "Status": "Failed"
    },
    {
      "Name": "Business Logic Extraction Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4850671-04:00",
      "Error": "The term 'Convert-ASTtoCPG' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
      "Status": "Failed"
    },
    {
      "Name": "Quality Analysis Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4968989-04:00",
      "Error": "The term 'Convert-ASTtoCPG' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
      "Status": "Failed"
    },
    {
      "Name": "Report Generation Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.4988214-04:00",
      "Error": "Exception calling \"Create\" with \"1\" argument(s): \"At line:1 char:40\r\n+ function Test-Function { param([string]) return  }\r\n+                                        ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:1 char:40\r\n+ function Test-Function { param([string]) return  }\r\n+                                        ~\r\nMissing ')' in function parameter list.\"",
      "Status": "Failed"
    },
    {
      "Name": "Performance Test",
      "Details": "",
      "Timestamp": "2025-08-24T20:29:59.5171612-04:00",
      "Error": "Exception calling \"Create\" with \"1\" argument(s): \"At line:1 char:41\r\n+ function Test-Function1 { param([string]1) return $Test1 }\r\n+                                         ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:1 char:41\r\n+ function Test-Function1 { param([string]1) return $Test1 }\r\n+                                         ~\r\nMissing ')' in function parameter list.\r\n\r\nAt line:2 char:41\r\n+ function Test-Function2 { param([string]2) return $Test2 }\r\n+                                         ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:2 char:41\r\n+ function Test-Function2 { param([string]2) return $Test2 }\r\n+                                         ~\r\nMissing ')' in function parameter list.\r\n\r\nAt line:3 char:41\r\n+ function Test-Function3 { param([string]3) return $Test3 }\r\n+                                         ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:3 char:41\r\n+ function Test-Function3 { param([string]3) return $Test3 }\r\n+                                         ~\r\nMissing ')' in function parameter list.\r\n\r\nAt line:4 char:41\r\n+ function Test-Function4 { param([string]4) return $Test4 }\r\n+                                         ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:4 char:41\r\n+ function Test-Function4 { param([string]4) return $Test4 }\r\n+                                         ~\r\nMissing ')' in function parameter list.\r\n\r\nAt line:5 char:41\r\n+ function Test-Function5 { param([string]5) return $Test5 }\r\n+                                         ~\r\nParameter declarations are a comma-separated list of variable names with optional initializer expressions.\r\n\r\nAt line:5 char:41\r\n+ function Test-Function5 { param([string]5) return $Test5 }\r\n+                                         ~\r\nMissing ')' in function parameter list.\r\n\r\nNot all parse errors were reported.  Correct the reported errors and try again.\"",
      "Status": "Failed"
    }
  ],
  "PassRate": 63.16,
  "PassedTests": 12
}
