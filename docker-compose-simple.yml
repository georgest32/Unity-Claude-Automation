version: '3.8'

networks:
  docs-net:
    driver: bridge

services:
  # Simple Documentation Web Server
  docs-web:
    image: nginx:alpine
    container_name: docs-web
    networks:
      - docs-net
    volumes:
      - ./Enhanced_Documentation_System_User_Guide.md:/usr/share/nginx/html/index.html:ro
      - ./Enhanced_Documentation_System_Release_Notes_v2.0.0.md:/usr/share/nginx/html/release-notes.html:ro
    ports:
      - "8080:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PowerShell Documentation Service  
  powershell-service:
    image: mcr.microsoft.com/dotnet/sdk:9.0
    container_name: powershell-service
    networks:
      - docs-net
    volumes:
      - ./Modules:/opt/modules:ro
    environment:
      - POWERSHELL_TELEMETRY_OPTOUT=1
      - PSModulePath=/opt/modules
    working_dir: /opt/modules
    command: >
      pwsh -c "
      Write-Host '🚀 Enhanced Documentation System PowerShell Service';
      Write-Host 'Loading Week 4 Predictive Analysis modules...';
      try {
        Import-Module '/opt/modules/Unity-Claude-CPG/Core/Predictive-Evolution.psm1' -Force;
        Write-Host '✅ Code Evolution Analysis module loaded';
        Import-Module '/opt/modules/Unity-Claude-CPG/Core/Predictive-Maintenance.psm1' -Force;
        Write-Host '✅ Maintenance Prediction module loaded';
        Write-Host '📊 Available functions:';
        Get-Command Get-GitCommitHistory, Get-TechnicalDebt, Get-MaintenancePrediction -ErrorAction SilentlyContinue | Format-Table Name, ModuleName;
      } catch {
        Write-Host '⚠️ Week 4 module loading: ' + $_.Exception.Message;
      }
      Write-Host '🌐 PowerShell service ready on container network';
      while ($true) { Start-Sleep 60; Write-Host '💓 Service heartbeat - $(Get-Date)' }
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pwsh", "-Command", "Get-Date"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Simple API Service
  api-service:
    image: python:3.12-slim
    container_name: api-service
    networks:
      - docs-net
    environment:
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - PORT=8091
    ports:
      - "8091:8091"
    depends_on:
      - powershell-service
    command: >
      sh -c "
      pip install flask requests;
      python -c \"
      from flask import Flask, jsonify
      app = Flask(__name__)
      
      @app.route('/health')
      def health():
          return jsonify({'status': 'healthy', 'service': 'Enhanced Documentation API v2.0.0', 'features': ['Week4-Predictive', 'AI-Ready']})
          
      @app.route('/api/status')  
      def status():
          return jsonify({
              'service': 'Enhanced Documentation System API',
              'version': '2.0.0',
              'environment': '$Environment',
              'features': {
                  'code_evolution': True,
                  'maintenance_prediction': True, 
                  'ai_integration': True,
                  'production_ready': True
              }
          })
          
      @app.route('/')
      def index():
          return jsonify({
              'service': 'Enhanced Documentation System',
              'version': '2.0.0', 
              'status': 'operational',
              'endpoints': ['/health', '/api/status'],
              'week4_features': ['predictive-analysis', 'maintenance-forecasting']
          })
          
      print('🔌 Enhanced Documentation API starting on 0.0.0.0:8091')
      app.run(host='0.0.0.0', port=8091, debug=False)
      \"
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
