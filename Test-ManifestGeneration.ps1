# Test-ManifestGeneration.ps1
# Quick test of the fixed manifest generation logic
# Date: 2025-08-22

# Test configuration
$testConfig = @{
    Name = "TestSubsystem"
    Version = "1.0.0"
    StartScript = ".\Test-Script.ps1"
    Dependencies = @("SystemStatus", "CLISubmission")
    HealthCheckFunction = "Test-Health"
    HealthCheckInterval = 30
    RestartPolicy = "OnFailure"
    MaxRestarts = 3
    RestartDelay = 5
    MaxMemoryMB = 500
    MaxCpuPercent = 25
    MutexName = "Global\TestSubsystem"
}

# Generate dependencies array string properly
$dependenciesString = if ($testConfig.Dependencies -and $testConfig.Dependencies.Count -gt 0) {
    '@("' + ($testConfig.Dependencies -join '", "') + '")'
} else {
    '@()'
}

# Generate health check function string
$healthCheckString = if ($testConfig.HealthCheckFunction) {
    '"' + $testConfig.HealthCheckFunction + '"'
} else {
    '$null'
}

# Generate manifest content with proper PowerShell data file syntax
$manifestContent = @"
# $($testConfig.Name) Subsystem Manifest
# Generated by Test-ManifestGeneration.ps1 on $(Get-Date)
# Bootstrap Orchestrator Configuration

@{
    # Required fields
    Name = "$($testConfig.Name)"
    Version = "$($testConfig.Version)"
    StartScript = "$($testConfig.StartScript)"
    
    # Dependencies
    Dependencies = $dependenciesString
    
    # Health monitoring
    HealthCheckFunction = $healthCheckString
    HealthCheckInterval = $($testConfig.HealthCheckInterval)  # seconds
    
    # Recovery policy
    RestartPolicy = "$($testConfig.RestartPolicy)"  # OnFailure, Always, Never
    MaxRestarts = $($testConfig.MaxRestarts)
    RestartDelay = $($testConfig.RestartDelay)  # seconds
    
    # Resource limits
    MaxMemoryMB = $($testConfig.MaxMemoryMB)
    MaxCpuPercent = $($testConfig.MaxCpuPercent)
    
    # Mutex for singleton enforcement
    MutexName = "$($testConfig.MutexName)"
    
    # Migration metadata
    MigratedFrom = "Legacy configuration"
    MigrationDate = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    GeneratedBy = "Test-ManifestGeneration.ps1"
}
"@

Write-Host "Generated manifest content:" -ForegroundColor Cyan
Write-Host $manifestContent

# Test writing and reading back
$testPath = ".\TestManifest.psd1"
try {
    $manifestContent | Out-File -FilePath $testPath -Encoding UTF8
    Write-Host "`nManifest written successfully" -ForegroundColor Green
    
    # Test reading it back
    $loaded = Import-PowerShellDataFile -Path $testPath
    Write-Host "Manifest loaded successfully" -ForegroundColor Green
    Write-Host "Name: $($loaded.Name)" -ForegroundColor White
    Write-Host "Dependencies: $($loaded.Dependencies -join ', ')" -ForegroundColor White
    Write-Host "HealthCheckFunction: $($loaded.HealthCheckFunction)" -ForegroundColor White
    
    # Clean up
    Remove-Item $testPath -Force
    Write-Host "Test completed successfully!" -ForegroundColor Green
    
} catch {
    Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
    if (Test-Path $testPath) {
        Remove-Item $testPath -Force
    }
}
# SIG # Begin signature block
# MIIFqQYJKoZIhvcNAQcCoIIFmjCCBZYCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUpwgUbBANuECq6XosOLCeAqAr
# SYagggMwMIIDLDCCAhSgAwIBAgIQdR0W2SKoK5VE8JId4ZxrRTANBgkqhkiG9w0B
# AQsFADAuMSwwKgYDVQQDDCNVbml0eS1DbGF1ZGUtQXV0b21hdGlvbi1EZXZlbG9w
# bWVudDAeFw0yNTA4MjAyMTE1MTdaFw0yNjA4MjAyMTM1MTdaMC4xLDAqBgNVBAMM
# I1VuaXR5LUNsYXVkZS1BdXRvbWF0aW9uLURldmVsb3BtZW50MIIBIjANBgkqhkiG
# 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAseH3qinVEOhrn2OLpjc5TNT4vGh1BkfB5X4S
# FhY7K0QMQsYYnkZVmx3tB8PqVQXl++l+e3uT7uCscc7vjMTK8tDSWH98ji0U34WL
# JBwXC62l1ArazMKp4Tyr7peksei7vL4pZOtOVgAyTYn5d1hbnsVQmCSTPRtpn7mC
# Azfq2ec5qZ9Kgl7puPW5utvYfh8idtOWa5/WgYSKwOIvyZawIdZKLFpwqOtqbJe4
# sWzVahasFhLfoAKkniKOAocJDkJexh5pO/EOSKEZ3mOCU1ZSs4XWRGISRhV3qGZp
# f+Y3JlHKMeFDWKynaJBO8/GU5sqMATlDUvrByBtU2OQ2Um/L3QIDAQABo0YwRDAO
# BgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFHw5
# rOy6xlW6B45sJUsiI2A/yS0MMA0GCSqGSIb3DQEBCwUAA4IBAQAUTLH0+w8ysvmh
# YuBw4NDKcZm40MTh9Zc1M2p2hAkYsgNLJ+/rAP+I74rNfqguTYwxpCyjkwrg8yF5
# wViwggboLpF2yDu4N/dgDainR4wR8NVpS7zFZOFkpmNPepc6bw3d4yQKa/wJXKeC
# pkRjS50N77/hfVI+fFKNao7POb7en5fcXuZaN6xWoTRy+J4I4MhfHpjZuxSLSXjb
# VXtPD4RZ9HGjl9BU8162cRhjujr/Lc3/dY/6ikHQYnxuxcdxRew4nzaqAQaOeWu6
# tGp899JPKfldM5Zay5IBl3zs15gNS9+0Jrd0ARQnSVYoI0DLh3KybFnfK4POezoN
# Lp/dbX2SMYIB4zCCAd8CAQEwQjAuMSwwKgYDVQQDDCNVbml0eS1DbGF1ZGUtQXV0
# b21hdGlvbi1EZXZlbG9wbWVudAIQdR0W2SKoK5VE8JId4ZxrRTAJBgUrDgMCGgUA
# oHgwGAYKKwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYB
# BAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0B
# CQQxFgQUgFH7o0K+a1Y/X1dhWBpw2KuJL0gwDQYJKoZIhvcNAQEBBQAEggEArFD5
# 2f16tGu+ZRtvohQagugGBsfiZpYv3lmZ+bbDvj8Qe2RbOOkVF9vAi+SofkKRjbus
# 2bKXd1vUJHYN4N9kTOJL7ud2IaSd6e1338YWEw47Sz5pjPgKJZFJe6xycm6YzeUb
# b4vPAedfz+31Fndxz57GeU0P4ZqOJJ+OcHM7gpA62jOXDd0i17kkE7+elxv9fu1g
# RI37Kob6L5TGWbZAUToHZnm00+vsdp+fhxMYvv42bl4hbJBVn6e3kCZKylxUZt8D
# jG6ZhvRVN5dE3xkwNw7pfq111CES99Vofps8SpvTOgqPijoVFz9g1WFHhydo4aII
# mpts/0U1reJRIwttZw==
# SIG # End signature block
