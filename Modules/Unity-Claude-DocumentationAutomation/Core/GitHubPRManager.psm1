#region Module Header
<#
.SYNOPSIS
    GitHub Pull Request Management Component
    
.DESCRIPTION
    Handles GitHub PR creation, updates, and management for documentation changes
    with automated branching, commits, and PR tracking.
    
.VERSION
    2.0.0
    
.AUTHOR
    Unity-Claude-Automation
#>
#endregion

#region GitHub PR Functions

function New-DocumentationPR {
    <#
    .SYNOPSIS
        Creates a new documentation update PR
    .DESCRIPTION
        Creates GitHub PR with documentation changes and proper metadata
    .PARAMETER Title
        PR title
    .PARAMETER Changes
        Array of changes to include
    .PARAMETER Branch
        Source branch name (auto-generated if not specified)
    .EXAMPLE
        New-DocumentationPR -Title "Update API documentation" -Changes $changes
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$Title,
        [Parameter(Mandatory)]
        [array]$Changes,
        [string]$Branch,
        [string]$BaseBranch = 'main',
        [string]$Body,
        [string[]]$Labels = @('documentation', 'auto-generated'),
        [switch]$Draft
    )
    
    try {
        # Auto-generate branch name if not provided
        if (-not $Branch) {
            $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
            $Branch = "docs-update-$timestamp"
        }
        
        Write-Host "Creating documentation PR: $Title" -ForegroundColor Cyan
        
        # Create branch
        git checkout -b $Branch 2>$null
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to create branch: $Branch"
        }
        
        # Apply changes
        foreach ($change in $Changes) {
            switch ($change.Type) {
                'Create' {
                    Write-Verbose "Creating file: $($change.Path)"
                    New-Item -Path $change.Path -ItemType File -Force | Out-Null
                    Set-Content -Path $change.Path -Value $change.Content
                }
                'Update' {
                    Write-Verbose "Updating file: $($change.Path)"
                    Set-Content -Path $change.Path -Value $change.Content
                }
                'Delete' {
                    Write-Verbose "Deleting file: $($change.Path)"
                    Remove-Item -Path $change.Path -Force
                }
            }
        }
        
        # Commit changes
        git add .
        $commitMsg = "docs: $Title`n`nAuto-generated documentation update"
        git commit -m $commitMsg
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to commit changes"
        }
        
        # Push branch
        git push origin $Branch
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to push branch: $Branch"
        }
        
        # Create PR using GitHub CLI or API
        $prBody = if ($Body) { $Body } else {
            @"
## Documentation Update

This PR contains automated documentation updates based on code changes.

### Changes:
$($Changes | ForEach-Object { "- $($_.Type): $($_.Path)" } | Out-String)

### Generated by:
Unity-Claude Documentation Automation System

---
*This is an automated PR. Please review the changes before merging.*
"@
        }
        
        # Try to create PR via gh CLI first
        $prCreated = $false
        try {
            $ghArgs = @(
                'pr', 'create'
                '--title', $Title
                '--body', $prBody
                '--base', $BaseBranch
                '--head', $Branch
            )
            
            if ($Draft) { $ghArgs += '--draft' }
            if ($Labels) { $ghArgs += '--label'; $ghArgs += ($Labels -join ',') }
            
            $prUrl = gh @ghArgs 2>$null
            if ($LASTEXITCODE -eq 0) {
                $prCreated = $true
                Write-Host "PR created successfully: $prUrl" -ForegroundColor Green
            }
        } catch {
            Write-Verbose "GitHub CLI not available or failed: $_"
        }
        
        # Fallback to direct API call if gh CLI failed
        if (-not $prCreated) {
            Write-Warning "GitHub CLI not available, using direct API"
            # Here we would use New-GitHubPullRequest from Unity-Claude-GitHub module
            # For now, just log the action
            Write-Host "Would create PR via API: $Title" -ForegroundColor Yellow
        }
        
        # Record PR in history
        $prRecord = @{
            Title = $Title
            Branch = $Branch
            BaseBranch = $BaseBranch
            Changes = $Changes
            CreatedAt = Get-Date
            Status = 'Open'
        }
        $script:DocumentationAutomationConfig.PRHistory += $prRecord
        
        # Switch back to main branch
        git checkout $BaseBranch 2>$null
        
        return $prRecord
        
    } catch {
        Write-Error "Failed to create documentation PR: $_"
        # Cleanup on failure
        git checkout $BaseBranch 2>$null
        git branch -D $Branch 2>$null
        throw
    }
}

function Update-DocumentationPR {
    <#
    .SYNOPSIS
        Updates an existing documentation PR
    .DESCRIPTION
        Adds additional changes to an existing PR
    .PARAMETER PRNumber
        PR number to update
    .PARAMETER Changes
        Additional changes to apply
    .EXAMPLE
        Update-DocumentationPR -PRNumber 123 -Changes $newChanges
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [int]$PRNumber,
        [Parameter(Mandatory)]
        [array]$Changes,
        [string]$UpdateMessage
    )
    
    try {
        Write-Host "Updating documentation PR #$PRNumber" -ForegroundColor Cyan
        
        # Find PR in history
        $pr = $script:DocumentationAutomationConfig.PRHistory | Where-Object { $_.Number -eq $PRNumber }
        if (-not $pr) {
            throw "PR #$PRNumber not found in history"
        }
        
        # Checkout PR branch
        git checkout $pr.Branch
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to checkout branch: $($pr.Branch)"
        }
        
        # Apply additional changes
        foreach ($change in $Changes) {
            switch ($change.Type) {
                'Create' { 
                    New-Item -Path $change.Path -ItemType File -Force | Out-Null
                    Set-Content -Path $change.Path -Value $change.Content
                }
                'Update' { 
                    Set-Content -Path $change.Path -Value $change.Content 
                }
                'Delete' { 
                    Remove-Item -Path $change.Path -Force 
                }
            }
        }
        
        # Commit and push updates
        git add .
        $commitMsg = if ($UpdateMessage) { "docs: $UpdateMessage" } else { "docs: Additional updates to PR #$PRNumber" }
        git commit -m $commitMsg
        git push origin $pr.Branch
        
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to push updates"
        }
        
        # Update PR record
        $pr.Changes += $Changes
        $pr.UpdatedAt = Get-Date
        
        Write-Host "PR #$PRNumber updated successfully" -ForegroundColor Green
        
        # Switch back to main branch
        git checkout main 2>$null
        
        return $pr
        
    } catch {
        Write-Error "Failed to update documentation PR: $_"
        git checkout main 2>$null
        throw
    }
}

function Get-DocumentationPRs {
    <#
    .SYNOPSIS
        Gets documentation PRs
    .DESCRIPTION
        Returns list of documentation PRs with status information
    .PARAMETER Status
        Filter by status (Open, Merged, Closed)
    .EXAMPLE
        Get-DocumentationPRs -Status Open
    #>
    [CmdletBinding()]
    param(
        [ValidateSet('Open', 'Merged', 'Closed', 'All')]
        [string]$Status = 'All',
        [int]$Limit = 50
    )
    
    try {
        $prs = $script:DocumentationAutomationConfig.PRHistory
        
        if ($Status -ne 'All') {
            $prs = $prs | Where-Object { $_.Status -eq $Status }
        }
        
        return $prs | Select-Object -First $Limit | Sort-Object CreatedAt -Descending
        
    } catch {
        Write-Error "Error getting documentation PRs: $_"
        throw
    }
}

function Merge-DocumentationPR {
    <#
    .SYNOPSIS
        Merges a documentation PR
    .DESCRIPTION
        Merges an approved documentation PR and cleans up branches
    .PARAMETER PRNumber
        PR number to merge
    .EXAMPLE
        Merge-DocumentationPR -PRNumber 123
    #>
    [CmdletBinding(SupportsShouldProcess)]
    param(
        [Parameter(Mandatory)]
        [int]$PRNumber,
        [ValidateSet('merge', 'squash', 'rebase')]
        [string]$MergeMethod = 'squash',
        [switch]$DeleteBranch = $true
    )
    
    try {
        # Find PR in history
        $pr = $script:DocumentationAutomationConfig.PRHistory | Where-Object { $_.Number -eq $PRNumber }
        if (-not $pr) {
            throw "PR #$PRNumber not found in history"
        }
        
        if ($PSCmdlet.ShouldProcess("PR #$PRNumber", "Merge documentation PR")) {
            Write-Host "Merging documentation PR #$PRNumber" -ForegroundColor Cyan
            
            # Use GitHub CLI to merge if available
            try {
                $ghArgs = @('pr', 'merge', $PRNumber, "--$MergeMethod")
                if ($DeleteBranch) { $ghArgs += '--delete-branch' }
                
                gh @ghArgs
                if ($LASTEXITCODE -eq 0) {
                    $pr.Status = 'Merged'
                    $pr.MergedAt = Get-Date
                    Write-Host "PR #$PRNumber merged successfully" -ForegroundColor Green
                } else {
                    throw "GitHub CLI merge failed"
                }
            } catch {
                Write-Warning "GitHub CLI not available, manual merge required"
                $pr.Status = 'PendingMerge'
            }
        }
        
        return $pr
        
    } catch {
        Write-Error "Failed to merge documentation PR: $_"
        throw
    }
}

function Test-PRDocumentationChanges {
    <#
    .SYNOPSIS
        Tests documentation changes in a PR
    .DESCRIPTION
        Validates that PR documentation changes are properly formatted and complete
    .PARAMETER PRNumber
        PR number to test
    .EXAMPLE
        Test-PRDocumentationChanges -PRNumber 123
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [int]$PRNumber
    )
    
    try {
        Write-Host "Testing documentation changes in PR #$PRNumber" -ForegroundColor Cyan
        
        $results = @{
            Valid = $true
            Issues = @()
            Warnings = @()
            FilesTested = 0
            PassedTests = 0
        }
        
        # Find PR in history
        $pr = $script:DocumentationAutomationConfig.PRHistory | Where-Object { $_.Number -eq $PRNumber }
        if (-not $pr) {
            throw "PR #$PRNumber not found in history"
        }
        
        # Test each changed file
        foreach ($change in $pr.Changes) {
            $results.FilesTested++
            
            # Basic validation tests
            if ($change.Path -like '*.md') {
                # Test markdown validity
                if ($change.Content -match '^#\s+\w+') {
                    $results.PassedTests++
                } else {
                    $results.Issues += "Missing proper heading in $($change.Path)"
                    $results.Valid = $false
                }
                
                # Test for broken links (basic)
                if ($change.Content -match '\[.*?\]\(.*?\)') {
                    $results.PassedTests++
                } else {
                    $results.Warnings += "No links found in $($change.Path) - may be intentional"
                }
            }
        }
        
        Write-Host "Documentation testing completed" -ForegroundColor Green
        Write-Host "  Files tested: $($results.FilesTested)" -ForegroundColor Gray
        Write-Host "  Tests passed: $($results.PassedTests)" -ForegroundColor Gray
        Write-Host "  Issues: $($results.Issues.Count)" -ForegroundColor Gray
        Write-Host "  Warnings: $($results.Warnings.Count)" -ForegroundColor Gray
        
        return $results
        
    } catch {
        Write-Error "Failed to test PR documentation changes: $_"
        throw
    }
}

#endregion

Export-ModuleMember -Function @(
    'New-DocumentationPR',
    'Update-DocumentationPR',
    'Get-DocumentationPRs',
    'Merge-DocumentationPR',
    'Test-PRDocumentationChanges'
)
# SIG # Begin signature block
# MIIFzgYJKoZIhvcNAQcCoIIFvzCCBbsCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCjP+bEsKw7q5bu
# 5mUJBkcHijhDO4v2T0MFU7XTvJvFWKCCAzAwggMsMIICFKADAgECAhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCSqGSIb3DQEBCwUAMC4xLDAqBgNVBAMMI1VuaXR5LUNsYXVk
# ZS1BdXRvbWF0aW9uLURldmVsb3BtZW50MB4XDTI1MDgyMDIxMTUxN1oXDTI2MDgy
# MDIxMzUxN1owLjEsMCoGA1UEAwwjVW5pdHktQ2xhdWRlLUF1dG9tYXRpb24tRGV2
# ZWxvcG1lbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx4feqKdUQ
# 6GufY4umNzlM1Pi8aHUGR8HlfhIWFjsrRAxCxhieRlWbHe0Hw+pVBeX76X57e5Pu
# 4Kxxzu+MxMry0NJYf3yOLRTfhYskHBcLraXUCtrMwqnhPKvul6Sx6Lu8vilk605W
# ADJNifl3WFuexVCYJJM9G2mfuYIDN+rZ5zmpn0qCXum49bm629h+HyJ205Zrn9aB
# hIrA4i/JlrAh1kosWnCo62psl7ixbNVqFqwWEt+gAqSeIo4ChwkOQl7GHmk78Q5I
# oRneY4JTVlKzhdZEYhJGFXeoZml/5jcmUcox4UNYrKdokE7z8ZTmyowBOUNS+sHI
# G1TY5DZSb8vdAgMBAAGjRjBEMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggr
# BgEFBQcDAzAdBgNVHQ4EFgQUfDms7LrGVboHjmwlSyIjYD/JLQwwDQYJKoZIhvcN
# AQELBQADggEBABRMsfT7DzKy+aFi4HDg0MpxmbjQxOH1lzUzanaECRiyA0sn7+sA
# /4jvis1+qC5NjDGkLKOTCuDzIXnBWLCCBugukXbIO7g392ANqKdHjBHw1WlLvMVk
# 4WSmY096lzpvDd3jJApr/Alcp4KmRGNLnQ3vv+F9Uj58Uo1qjs85vt6fl9xe5lo3
# rFahNHL4ngjgyF8emNm7FItJeNtVe08PhFn0caOX0FTzXrZxGGO6Ov8tzf91j/qK
# QdBifG7Fx3FF7DifNqoBBo55a7q0anz30k8p+V0zllrLkgGXfOzXmA1L37Qmt3QB
# FCdJVigjQMuHcrJsWd8rg857Og0un91tfZIxggH0MIIB8AIBATBCMC4xLDAqBgNV
# BAMMI1VuaXR5LUNsYXVkZS1BdXRvbWF0aW9uLURldmVsb3BtZW50AhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCWCGSAFlAwQCAQUAoIGEMBgGCisGAQQBgjcCAQwxCjAIoAKA
# AKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIFiS3EjlB7Sui0FTaPFGMqq0
# qX9pzt7uNXEp5wC+pL9FMA0GCSqGSIb3DQEBAQUABIIBAALrtWXyrlZ2daxScNs+
# 4oE7qiZvvqwL/ee3bBP2Isa6rxaLOt4gtnjix42HokDFo+rQyPgRoXeo5htB0gHX
# jq6hsno51fb+B1mDFUgOAoEF5WGuUlL5LzhEiZTdcuF5HEMjHJCG4kbc7tQOihEh
# BJYPVQpYOF1uLnX2Rj00XYQXRxSHUkl/aPnUjsq8iXYEEKVHwowiml3Im1xOrqPV
# R+jIJgZ0aNdPVnCEvbnA+W41SurAs+nBhQ4zb+6z4cZpYVNpN+ZkAWJFM687mQwK
# Nmka4AXcauNAQwC238JnFusSwUsXxD3jKEUq7udBfU+V/Bdh1XnvAes32XfepEdL
# llA=
# SIG # End signature block
