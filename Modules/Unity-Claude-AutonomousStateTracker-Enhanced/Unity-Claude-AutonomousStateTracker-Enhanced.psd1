#
# Module manifest for module 'Unity-Claude-AutonomousStateTracker-Enhanced-Refactored'
#
# Generated by: Unity-Claude-Automation Framework
#
# Generated on: 8/25/2025
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'Unity-Claude-AutonomousStateTracker-Enhanced.psm1'

# Version number of this module.
ModuleVersion = '2.0.0'

# Supported PSEditions
CompatiblePSEditions = @('Desktop', 'Core')

# ID used to uniquely identify this module
GUID = '87654321-4321-8765-4321-876543218765'

# Author of this module
Author = 'Unity-Claude-Automation Framework'

# Company or vendor of this module
CompanyName = 'Unity-Claude'

# Copyright statement for this module
Copyright = '(c) 2025 Unity-Claude-Automation. All rights reserved.'

# Description of the functionality provided by this module
Description = 'Refactored Unity Claude Autonomous State Tracker Enhanced Module v2.0.0

ARCHITECTURE: Component-Based Modular Design
COMPONENTS: 6 specialized components under 800 lines each
MIGRATION: From monolithic 1,465-line module to maintainable architecture

Components:
- StateConfiguration: Configuration and state definitions (220 lines)
- CoreUtilities: Core utilities and helper functions (220 lines)
- StateMachineCore: State machine core functions (400 lines)
- StatePersistence: State persistence and recovery (200 lines)
- HumanIntervention: Human intervention system (240 lines)
- HealthMonitoring: Performance and health monitoring (115 lines)

Features:
- Enhanced autonomous operation state tracking for Phase 3 Day 15
- Comprehensive state machine with 12 operational states
- Persistent state storage with JSON serialization and backup rotation
- Checkpoint creation and recovery system with incremental backups
- Human intervention system with multiple notification methods
- Performance monitoring using Get-Counter with configurable thresholds
- Circuit breaker pattern for autonomous failure handling
- Background job-based health monitoring with real-time alerts
- Enhanced logging with multiple output methods and performance tracking
- Comprehensive error handling and recovery mechanisms

State Management:
- 12 operational states: Idle, Initializing, Active, Monitoring, Processing, Generating, Submitting, Paused, HumanApprovalRequired, Error, Recovering, CircuitBreakerOpen, Stopped
- State transition validation with allowed transitions matrix
- State history tracking with configurable retention (default 2000 entries)
- Automatic checkpoint creation for critical state changes
- Circuit breaker activation based on consecutive failure thresholds

Performance & Health:
- Real-time system performance monitoring (CPU, Memory, Disk, Process Count)
- PowerShell-specific metrics (Memory usage, CPU time)
- Configurable warning and critical thresholds
- Background job monitoring with health assessments
- Human intervention triggers based on performance thresholds
- Comprehensive health testing and component validation

Human Intervention:
- Priority-based intervention requests (Low, Medium, High, Critical)
- Multiple notification methods (Console, File, Event Log)
- Configurable response timeouts and escalation
- Intervention history tracking and cleanup
- Approval/denial workflow with state transition management

Enhanced v2.0.0 Features:
- Component health monitoring with Get-AutonomousStateTrackerComponents
- Comprehensive system health testing with Test-AutonomousStateTrackerHealth
- Advanced analysis and action plan generation with Invoke-ComprehensiveAutonomousAnalysis
- Modular import system with graceful degradation
- Enhanced error handling and component validation
- Integration testing between components
- Prioritized action plan generation for system maintenance

This refactored version provides the same functionality as the original module
while offering dramatically improved maintainability, testability, and extensibility.'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.1'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
DotNetFrameworkVersion = '4.7.2'

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
NestedModules = @(
    'Core\StateConfiguration.psm1',
    'Core\CoreUtilities.psm1',
    'Core\StateMachineCore.psm1',
    'Core\StatePersistence.psm1',
    'Core\HumanIntervention.psm1',
    'Core\HealthMonitoring.psm1'
)

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @(
    # Core state management (from StateMachineCore)
    'Initialize-EnhancedAutonomousStateTracking',
    'Set-EnhancedAutonomousState',
    'Get-EnhancedAutonomousState',
    'Get-AgentState',
    'Save-AgentState',
    
    # State persistence and recovery (from StatePersistence)
    'New-StateCheckpoint',
    'Restore-AgentStateFromCheckpoint',
    'Get-CheckpointHistory',
    'Remove-OldCheckpoints',
    'Test-CheckpointIntegrity',
    
    # Human intervention (from HumanIntervention)
    'Request-HumanIntervention',
    'Approve-AgentIntervention',
    'Deny-AgentIntervention',
    'Get-PendingInterventions',
    'Clear-ResolvedInterventions',
    
    # Health and performance monitoring (from HealthMonitoring)
    'Start-EnhancedHealthMonitoring',
    'Stop-EnhancedHealthMonitoring',
    'Get-HealthMonitoringStatus',
    'Test-AgentHealth',
    
    # Utilities and compatibility (from CoreUtilities)
    'Write-EnhancedStateLog',
    'ConvertTo-HashTable',
    'Get-SafeDateTime',
    'Get-UptimeMinutes',
    'Get-SystemPerformanceMetrics',
    'Test-SystemHealthThresholds',
    
    # Configuration access (from StateConfiguration)
    'Get-EnhancedStateConfig',
    'Initialize-StateDirectories',
    'Get-EnhancedAutonomousStates',
    'Get-PerformanceCounters',
    
    # Enhanced orchestration functions (new in v2.0.0)
    'Get-AutonomousStateTrackerComponents',
    'Test-AutonomousStateTrackerHealth',
    'Invoke-ComprehensiveAutonomousAnalysis'
)

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @()

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
FileList = @(
    'Unity-Claude-AutonomousStateTracker-Enhanced-Refactored.psm1',
    'Unity-Claude-AutonomousStateTracker-Enhanced-Refactored.psd1',
    'Core\StateConfiguration.psm1',
    'Core\CoreUtilities.psm1',
    'Core\StateMachineCore.psm1',
    'Core\StatePersistence.psm1',
    'Core\HumanIntervention.psm1',
    'Core\HealthMonitoring.psm1'
)

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @(
            'Unity-Claude', 'AutonomousStateTracker', 'StateManagement', 'StateMachine', 
            'Persistence', 'Recovery', 'HumanIntervention', 'PerformanceMonitoring', 
            'HealthMonitoring', 'CircuitBreaker', 'CheckpointRestore', 'Refactoring', 
            'Component-Based', 'Modular', 'PowerShell', 'Automation', 'Phase3', 
            'EnhancedStateTracking', 'BackgroundJobs', 'Thresholds', 'Notifications',
            'JSON-Persistence', 'Counter-Monitoring', 'Error-Recovery', 'Maintainability'
        )

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/Unity-Claude-Automation/LICENSE'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/Unity-Claude-Automation'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = 'Unity Claude Autonomous State Tracker Enhanced v2.0.0 - Refactored Modular Architecture

MAJOR REFACTORING RELEASE
========================

Migration Summary:
- Original: Unity-Claude-AutonomousStateTracker-Enhanced.psm1 (1,465 lines, monolithic)
- Refactored: 6 focused components (115-400 lines each, all under 800-line limit)
- Architecture: Component-based modular design with orchestration layer
- Maintainability: Dramatically improved with focused responsibilities
- Testing: Individual component testing with comprehensive health monitoring
- Extensibility: Easy to add new components or modify existing ones

Component Breakdown:
1. StateConfiguration.psm1 (220 lines): Configuration and state definitions with 12 operational states
2. CoreUtilities.psm1 (220 lines): Core utilities including safe DateTime handling and logging  
3. StateMachineCore.psm1 (400 lines): State machine core functions with transition validation
4. StatePersistence.psm1 (200 lines): Checkpoint creation, recovery, and backup management
5. HumanIntervention.psm1 (240 lines): Priority-based intervention system with notifications
6. HealthMonitoring.psm1 (115 lines): Background job monitoring with performance thresholds

New Features in v2.0.0:
- Component health monitoring with Get-AutonomousStateTrackerComponents
- Comprehensive system health testing with Test-AutonomousStateTrackerHealth
- Advanced analysis and action plan generation with Invoke-ComprehensiveAutonomousAnalysis
- Enhanced error handling and component validation
- Modular import system with graceful degradation
- Integration testing between components
- Prioritized action plan generation for system maintenance
- Component-specific health checks and validation

Technical Improvements:
- Each component follows PowerShell best practices and stays under 800-line limit
- Comprehensive parameter validation and error handling in all components
- Verbose logging for troubleshooting and monitoring across components
- Component isolation for better testing and maintenance
- Consistent API design across all components with cross-component integration
- Enhanced documentation with detailed examples and component descriptions
- Performance optimizations through component specialization
- Advanced orchestration functions for system-wide analysis and monitoring

State Management Enhancements:
- 12 operational states with comprehensive transition matrix validation
- Enhanced checkpoint system with integrity testing and cleanup
- Circuit breaker pattern with configurable failure thresholds
- Background job-based health monitoring with real-time performance tracking
- Human intervention system with priority-based notifications and workflow

Performance & Monitoring:
- Real-time system performance monitoring using Get-Counter
- Configurable warning and critical thresholds for all metrics
- PowerShell-specific metrics tracking (memory, CPU usage)
- Background job monitoring with health assessments and alerts
- Component health validation and integration testing

Backward Compatibility:
- All original functions maintained with same signatures
- Seamless drop-in replacement for existing installations
- Enhanced functionality without breaking changes
- Migration path documented for custom implementations

Migration Benefits:
- Reduced cognitive load for maintenance and development (components under 800 lines)
- Individual component testing and validation capabilities
- Easier troubleshooting with component isolation and health checks
- Better performance through specialized component implementations
- Enhanced extensibility for future enhancements and modifications  
- Improved code quality and maintainability metrics
- Advanced orchestration and analysis capabilities

This refactored version represents a significant improvement in code quality,
maintainability, and extensibility while preserving all original functionality
and adding comprehensive system analysis and health monitoring capabilities.'

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

# SIG # Begin signature block
# MIIFzgYJKoZIhvcNAQcCoIIFvzCCBbsCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAOvCQPFDqPTq9L
# vrjKLSJrRsJ+s5Dk5b5hRnEFsEbFMqCCAzAwggMsMIICFKADAgECAhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCSqGSIb3DQEBCwUAMC4xLDAqBgNVBAMMI1VuaXR5LUNsYXVk
# ZS1BdXRvbWF0aW9uLURldmVsb3BtZW50MB4XDTI1MDgyMDIxMTUxN1oXDTI2MDgy
# MDIxMzUxN1owLjEsMCoGA1UEAwwjVW5pdHktQ2xhdWRlLUF1dG9tYXRpb24tRGV2
# ZWxvcG1lbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx4feqKdUQ
# 6GufY4umNzlM1Pi8aHUGR8HlfhIWFjsrRAxCxhieRlWbHe0Hw+pVBeX76X57e5Pu
# 4Kxxzu+MxMry0NJYf3yOLRTfhYskHBcLraXUCtrMwqnhPKvul6Sx6Lu8vilk605W
# ADJNifl3WFuexVCYJJM9G2mfuYIDN+rZ5zmpn0qCXum49bm629h+HyJ205Zrn9aB
# hIrA4i/JlrAh1kosWnCo62psl7ixbNVqFqwWEt+gAqSeIo4ChwkOQl7GHmk78Q5I
# oRneY4JTVlKzhdZEYhJGFXeoZml/5jcmUcox4UNYrKdokE7z8ZTmyowBOUNS+sHI
# G1TY5DZSb8vdAgMBAAGjRjBEMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggr
# BgEFBQcDAzAdBgNVHQ4EFgQUfDms7LrGVboHjmwlSyIjYD/JLQwwDQYJKoZIhvcN
# AQELBQADggEBABRMsfT7DzKy+aFi4HDg0MpxmbjQxOH1lzUzanaECRiyA0sn7+sA
# /4jvis1+qC5NjDGkLKOTCuDzIXnBWLCCBugukXbIO7g392ANqKdHjBHw1WlLvMVk
# 4WSmY096lzpvDd3jJApr/Alcp4KmRGNLnQ3vv+F9Uj58Uo1qjs85vt6fl9xe5lo3
# rFahNHL4ngjgyF8emNm7FItJeNtVe08PhFn0caOX0FTzXrZxGGO6Ov8tzf91j/qK
# QdBifG7Fx3FF7DifNqoBBo55a7q0anz30k8p+V0zllrLkgGXfOzXmA1L37Qmt3QB
# FCdJVigjQMuHcrJsWd8rg857Og0un91tfZIxggH0MIIB8AIBATBCMC4xLDAqBgNV
# BAMMI1VuaXR5LUNsYXVkZS1BdXRvbWF0aW9uLURldmVsb3BtZW50AhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCWCGSAFlAwQCAQUAoIGEMBgGCisGAQQBgjcCAQwxCjAIoAKA
# AKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIB4kk4CusHm+ovg6H72qC3PH
# c3k9fILeZ5nVZHURUYBlMA0GCSqGSIb3DQEBAQUABIIBAC67tkf54/2l+6Z8zO0g
# +wQY6ar6/0ZZsqc/CWnB5ykL70s52Hk5+jSGgOVHY4NLYrPtK5Lod8zaf9b7yFXJ
# oMAQt/2PfGw8tnX4mB7ZboCfTAjUs4siKnmo/Jwt1k/I/v12ETBKMN3O9t0tc0BT
# GWDFsYob6KNLZ/GvD3bHUYa+guqAHHZrOarY04RxdBpCZtGia9RLhk4w4eBw6FX7
# buB3ADbPkDZVdbILO5vJGdxy8dhSAuc5dgkAkEpkLdQVtuKRQYW8VafVeYH4YJWD
# PLYI5m3/vdWb24tqjRzcDMT92Jls5/4wv7/lO1GqjZ3rSTSb3zOmDsQX4hIiQue2
# Q3Q=
# SIG # End signature block
