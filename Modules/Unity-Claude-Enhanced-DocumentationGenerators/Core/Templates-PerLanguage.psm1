# Templates-PerLanguage.psm1
# Language-specific documentation templates for automated documentation generation
# Part of Unity-Claude-Enhanced-DocumentationGenerators system

using namespace System.Collections.Generic

# PowerShell comment-based help template
function Get-PowerShellDocTemplate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$FunctionName,
        
        [Parameter(Mandatory = $false)]
        [string[]]$Parameters = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Synopsis = "Brief description of the function",
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Detailed description of what the function does",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterDescriptions = @{},
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnType = "Returns output based on function logic",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Examples = @()
    )
    
    $template = @"
<#
.SYNOPSIS
$Synopsis

.DESCRIPTION
$Description

"@
    
    # Add parameter documentation
    foreach ($param in $Parameters) {
        $paramDesc = if ($ParameterDescriptions.ContainsKey($param)) { 
            $ParameterDescriptions[$param] 
        } else { 
            "Description for parameter $param" 
        }
        $template += ".PARAMETER $param`n$paramDesc`n`n"
    }
    
    # Add examples
    if ($Examples.Count -gt 0) {
        for ($i = 0; $i -lt $Examples.Count; $i++) {
            $template += ".EXAMPLE`n$($Examples[$i])`n`n"
        }
    } else {
        $template += ".EXAMPLE`n$FunctionName`nBasic usage example`n`n"
    }
    
    $template += @"
.OUTPUTS
$ReturnType

.NOTES
Generated by Unity-Claude-Enhanced-DocumentationGenerators
Date: $(Get-Date -Format 'yyyy-MM-dd')
#>
"@
    
    return $template
}

# Python docstring template (Google style)
function Get-PythonDocTemplate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$FunctionName,
        
        [Parameter(Mandatory = $false)]
        [string[]]$Parameters = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Brief description of the function.",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterTypes = @{},
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterDescriptions = @{},
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnType = "Any",
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnDescription = "Function return value",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Raises = @(),
        
        [Parameter(Mandatory = $false)]
        [string[]]$Examples = @()
    )
    
    $template = @"
    """$Description
    
"@
    
    # Add parameters section
    if ($Parameters.Count -gt 0) {
        $template += "    Args:`n"
        foreach ($param in $Parameters) {
            $paramType = if ($ParameterTypes.ContainsKey($param)) { 
                $ParameterTypes[$param] 
            } else { 
                "Any" 
            }
            $paramDesc = if ($ParameterDescriptions.ContainsKey($param)) { 
                $ParameterDescriptions[$param] 
            } else { 
                "Description for parameter $param" 
            }
            $template += "        $param ($paramType): $paramDesc`n"
        }
        $template += "`n"
    }
    
    # Add returns section
    $template += "    Returns:`n"
    $template += "        $ReturnType`: $ReturnDescription`n`n"
    
    # Add raises section
    if ($Raises.Count -gt 0) {
        $template += "    Raises:`n"
        foreach ($exception in $Raises) {
            $template += "        $exception`: Description of when this exception is raised`n"
        }
        $template += "`n"
    }
    
    # Add examples section
    if ($Examples.Count -gt 0) {
        $template += "    Examples:`n"
        foreach ($example in $Examples) {
            $template += "        >>> $example`n"
        }
    } else {
        $template += "    Examples:`n"
        $template += "        >>> $FunctionName()`n"
        $template += "        Basic usage example`n"
    }
    
    $template += '    """'
    
    return $template
}

# C# XML documentation template
function Get-CSharpDocTemplate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$MethodName,
        
        [Parameter(Mandatory = $false)]
        [string[]]$Parameters = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Summary = "Brief description of the method",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterDescriptions = @{},
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnDescription = "Description of the return value",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Exceptions = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Remarks = "",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Examples = @()
    )
    
    $template = @"
        /// <summary>
        /// $Summary
        /// </summary>
"@
    
    # Add parameter documentation
    foreach ($param in $Parameters) {
        $paramDesc = if ($ParameterDescriptions.ContainsKey($param)) { 
            $ParameterDescriptions[$param] 
        } else { 
            "Description for parameter $param" 
        }
        $template += "`n        /// <param name=`"$param`">$paramDesc</param>"
    }
    
    # Add return documentation
    if ($ReturnDescription) {
        $template += "`n        /// <returns>$ReturnDescription</returns>"
    }
    
    # Add exceptions
    foreach ($exception in $Exceptions) {
        $template += "`n        /// <exception cref=`"$exception`">Description of when this exception is thrown</exception>"
    }
    
    # Add remarks
    if ($Remarks) {
        $template += "`n        /// <remarks>$Remarks</remarks>"
    }
    
    # Add examples
    if ($Examples.Count -gt 0) {
        $template += "`n        /// <example>"
        $template += "`n        /// <code>"
        foreach ($example in $Examples) {
            $template += "`n        /// $example"
        }
        $template += "`n        /// </code>"
        $template += "`n        /// </example>"
    }
    
    return $template
}

# JavaScript/TypeScript JSDoc template
function Get-JavaScriptDocTemplate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$FunctionName,
        
        [Parameter(Mandatory = $false)]
        [string[]]$Parameters = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Description = "Brief description of the function",
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterTypes = @{},
        
        [Parameter(Mandatory = $false)]
        [hashtable]$ParameterDescriptions = @{},
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnType = "*",
        
        [Parameter(Mandatory = $false)]
        [string]$ReturnDescription = "Function return value",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Throws = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Since = "",
        
        [Parameter(Mandatory = $false)]
        [string[]]$Examples = @(),
        
        [Parameter(Mandatory = $false)]
        [string]$Author = ""
    )
    
    $template = @"
/**
 * $Description
 *
"@
    
    # Add parameters
    foreach ($param in $Parameters) {
        $paramType = if ($ParameterTypes.ContainsKey($param)) { 
            $ParameterTypes[$param] 
        } else { 
            "*" 
        }
        $paramDesc = if ($ParameterDescriptions.ContainsKey($param)) { 
            $ParameterDescriptions[$param] 
        } else { 
            "Description for parameter $param" 
        }
        $template += " * @param {$paramType} $param - $paramDesc`n"
    }
    
    # Add return information
    $template += " * @returns {$ReturnType} $ReturnDescription`n"
    
    # Add throws information
    foreach ($throwsType in $Throws) {
        $template += " * @throws {$throwsType} Description of when this exception is thrown`n"
    }
    
    # Add examples
    if ($Examples.Count -gt 0) {
        $template += " *`n * @example`n"
        foreach ($example in $Examples) {
            $template += " * $example`n"
        }
    } else {
        $template += " *`n * @example`n"
        $template += " * $FunctionName()`n"
        $template += " * // Basic usage example`n"
    }
    
    # Add metadata
    if ($Since) {
        $template += " * @since $Since`n"
    }
    
    if ($Author) {
        $template += " * @author $Author`n"
    }
    
    $template += " */`n"
    
    return $template
}

# Template factory function
function Get-DocumentationTemplate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [ValidateSet('PowerShell', 'Python', 'CSharp', 'JavaScript', 'TypeScript')]
        [string]$Language,
        
        [Parameter(Mandatory = $true)]
        [hashtable]$TemplateData
    )
    
    switch ($Language) {
        'PowerShell' {
            return Get-PowerShellDocTemplate @TemplateData
        }
        'Python' {
            return Get-PythonDocTemplate @TemplateData
        }
        'CSharp' {
            return Get-CSharpDocTemplate @TemplateData
        }
        { $_ -in @('JavaScript', 'TypeScript') } {
            return Get-JavaScriptDocTemplate @TemplateData
        }
        default {
            throw "Unsupported language: $Language"
        }
    }
}

# Language detection from file extension
function Get-LanguageFromExtension {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$FilePath
    )
    
    $extension = [System.IO.Path]::GetExtension($FilePath).ToLower()
    
    switch ($extension) {
        '.ps1' { return 'PowerShell' }
        '.psm1' { return 'PowerShell' }
        '.psd1' { return 'PowerShell' }
        '.py' { return 'Python' }
        '.cs' { return 'CSharp' }
        '.js' { return 'JavaScript' }
        '.ts' { return 'TypeScript' }
        '.jsx' { return 'JavaScript' }
        '.tsx' { return 'TypeScript' }
        default { return 'Unknown' }
    }
}

# Get template configuration for language
function Get-LanguageTemplateConfig {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [ValidateSet('PowerShell', 'Python', 'CSharp', 'JavaScript', 'TypeScript')]
        [string]$Language
    )
    
    $configs = @{
        'PowerShell' = @{
            CommentStyle = 'Block'
            CommentStart = '<#'
            CommentEnd = '#>'
            InlineComment = '#'
            RequiredSections = @('SYNOPSIS', 'DESCRIPTION', 'PARAMETER', 'EXAMPLE')
            OptionalSections = @('OUTPUTS', 'NOTES', 'LINK')
        }
        'Python' = @{
            CommentStyle = 'Docstring'
            CommentStart = '"""'
            CommentEnd = '"""'
            InlineComment = '#'
            RequiredSections = @('Description', 'Args', 'Returns')
            OptionalSections = @('Raises', 'Examples', 'Note')
        }
        'CSharp' = @{
            CommentStyle = 'XML'
            CommentStart = '///'
            CommentEnd = ''
            InlineComment = '//'
            RequiredSections = @('summary', 'param', 'returns')
            OptionalSections = @('remarks', 'example', 'exception')
        }
        'JavaScript' = @{
            CommentStyle = 'JSDoc'
            CommentStart = '/**'
            CommentEnd = '*/'
            InlineComment = '//'
            RequiredSections = @('description', 'param', 'returns')
            OptionalSections = @('example', 'throws', 'since', 'author')
        }
        'TypeScript' = @{
            CommentStyle = 'TSDoc'
            CommentStart = '/**'
            CommentEnd = '*/'
            InlineComment = '//'
            RequiredSections = @('description', 'param', 'returns')
            OptionalSections = @('example', 'throws', 'since', 'author')
        }
    }
    
    return $configs[$Language]
}

# Export module functions
Export-ModuleMember -Function @(
    'Get-PowerShellDocTemplate',
    'Get-PythonDocTemplate',
    'Get-CSharpDocTemplate',
    'Get-JavaScriptDocTemplate',
    'Get-DocumentationTemplate',
    'Get-LanguageFromExtension',
    'Get-LanguageTemplateConfig'
)