#Requires -Version 5.1
<#
.SYNOPSIS
    Installs Git pre-commit hooks for documentation quality.

.DESCRIPTION
    Sets up Git pre-commit hooks that run documentation quality checks
    using Vale and markdownlint before allowing commits.

.PARAMETER Uninstall
    Remove the pre-commit hook

.PARAMETER Force
    Overwrite existing hooks

.EXAMPLE
    .\Install-GitHooks.ps1
#>

param(
    [switch]$Uninstall,
    [switch]$Force
)

$ErrorActionPreference = 'Stop'

Write-Host "================================================" -ForegroundColor Cyan
Write-Host "Git Pre-commit Hook Installation" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

# Check if we're in a Git repository
if (-not (Test-Path ".git")) {
    Write-Host "[X] Not in a Git repository root!" -ForegroundColor Red
    Write-Host "    Please run this script from the repository root" -ForegroundColor Yellow
    exit 1
}

$hookPath = ".git\hooks\pre-commit"
$psScriptPath = "scripts\quality\pre-commit.ps1"

# Check if PowerShell script exists
if (-not (Test-Path $psScriptPath)) {
    Write-Host "[X] Pre-commit PowerShell script not found!" -ForegroundColor Red
    Write-Host "    Expected at: $psScriptPath" -ForegroundColor Yellow
    Write-Host "    Please ensure Install-QualityTools.ps1 has been run" -ForegroundColor Yellow
    exit 1
}

if ($Uninstall) {
    # Uninstall hook
    if (Test-Path $hookPath) {
        Remove-Item $hookPath -Force
        Write-Host "[OK] Pre-commit hook removed" -ForegroundColor Green
    }
    else {
        Write-Host "[!] No pre-commit hook found" -ForegroundColor Yellow
    }
    exit 0
}

# Check if hook already exists
if ((Test-Path $hookPath) -and -not $Force) {
    Write-Host "[!] Pre-commit hook already exists!" -ForegroundColor Yellow
    Write-Host "    Use -Force to overwrite" -ForegroundColor Gray
    
    # Check if it's our hook
    $existingContent = Get-Content $hookPath -Raw
    if ($existingContent -match "pre-commit.ps1") {
        Write-Host "[i] Existing hook appears to be ours" -ForegroundColor Cyan
    }
    else {
        Write-Host "[!] Existing hook is not ours - manual review recommended" -ForegroundColor Yellow
    }
    exit 1
}

# Create the pre-commit hook
Write-Host "Creating pre-commit hook..." -ForegroundColor Yellow

# Determine which PowerShell to use
$pwshPath = "pwsh"
$powershellPath = "powershell"

# Test if PowerShell 7 is available
$usePwsh = $false
try {
    $null = & "C:\Program Files\PowerShell\7\pwsh.exe" -Command '$PSVersionTable.PSVersion' 2>&1
    $pwshPath = "pwsh"
    $usePwsh = $true
    Write-Host "[i] Using PowerShell 7 (pwsh)" -ForegroundColor Cyan
}
catch {
    Write-Host "[i] Using Windows PowerShell" -ForegroundColor Cyan
}

# Create the hook content
if ($usePwsh) {
    $hookContent = @'
#!/bin/sh
# Git pre-commit hook for documentation quality
# Auto-generated by Install-GitHooks.ps1

# Get the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)

# Run the PowerShell pre-commit script
exec pwsh -NoProfile -ExecutionPolicy Bypass -File "$REPO_ROOT/scripts/quality/pre-commit.ps1" "$@"
'@
}
else {
    $hookContent = @'
#!/bin/sh
# Git pre-commit hook for documentation quality
# Auto-generated by Install-GitHooks.ps1

# Get the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)

# Run the PowerShell pre-commit script using Windows PowerShell
exec powershell.exe -NoProfile -ExecutionPolicy Bypass -File "$REPO_ROOT/scripts/quality/pre-commit.ps1" "$@"
'@
}

# Write the hook file
$hookContent | Out-File -FilePath $hookPath -Encoding ASCII -NoNewline
Write-Host "[OK] Pre-commit hook created" -ForegroundColor Green

# Make the hook executable (for Git Bash compatibility)
try {
    # Try using Git to make it executable
    git update-index --chmod=+x $hookPath 2>&1 | Out-Null
}
catch {
    # Fallback - the hook should still work on Windows
}

Write-Host ""
Write-Host "Testing hook setup..." -ForegroundColor Yellow

# Verify the hook is readable
if (Test-Path $hookPath) {
    Write-Host "[OK] Hook file exists" -ForegroundColor Green
    
    # Check if quality tools are available
    $valeAvailable = $false
    $mdlAvailable = $false
    
    try {
        $null = vale --version 2>&1
        $valeAvailable = $true
        Write-Host "[OK] Vale is available" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] Vale not found - prose linting will be skipped" -ForegroundColor Yellow
    }
    
    try {
        $null = npx markdownlint-cli2 --version 2>&1
        $mdlAvailable = $true
        Write-Host "[OK] markdownlint-cli2 is available" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] markdownlint-cli2 not found - markdown linting will be skipped" -ForegroundColor Yellow
    }
    
    if (-not $valeAvailable -and -not $mdlAvailable) {
        Write-Host ""
        Write-Host "[!] No quality tools found!" -ForegroundColor Yellow
        Write-Host "    Run Install-QualityTools.ps1 to install Vale and markdownlint" -ForegroundColor Yellow
    }
}
else {
    Write-Host "[X] Hook file creation failed!" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "================================================" -ForegroundColor Cyan
Write-Host "Installation Complete!" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "The pre-commit hook will now run automatically when you commit." -ForegroundColor Green
Write-Host ""
Write-Host "Hook behavior:" -ForegroundColor Yellow
Write-Host "  - Checks staged .md files with Vale (prose linting)" -ForegroundColor White
Write-Host "  - Checks staged .md files with markdownlint (format validation)" -ForegroundColor White
Write-Host "  - Blocks commit if errors are found" -ForegroundColor White
Write-Host "  - Allows commit with warnings" -ForegroundColor White
Write-Host ""
Write-Host "To bypass the hook (not recommended):" -ForegroundColor Gray
Write-Host "  git commit --no-verify" -ForegroundColor Gray
Write-Host ""
Write-Host "To uninstall the hook:" -ForegroundColor Gray
Write-Host "  .\Install-GitHooks.ps1 -Uninstall" -ForegroundColor Gray
Write-Host ""
# SIG # Begin signature block
# MIIFzgYJKoZIhvcNAQcCoIIFvzCCBbsCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDC4ogMTadGOCHO
# u7oV814NVtov6QsWnuXL4m4HGh1RlKCCAzAwggMsMIICFKADAgECAhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCSqGSIb3DQEBCwUAMC4xLDAqBgNVBAMMI1VuaXR5LUNsYXVk
# ZS1BdXRvbWF0aW9uLURldmVsb3BtZW50MB4XDTI1MDgyMDIxMTUxN1oXDTI2MDgy
# MDIxMzUxN1owLjEsMCoGA1UEAwwjVW5pdHktQ2xhdWRlLUF1dG9tYXRpb24tRGV2
# ZWxvcG1lbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx4feqKdUQ
# 6GufY4umNzlM1Pi8aHUGR8HlfhIWFjsrRAxCxhieRlWbHe0Hw+pVBeX76X57e5Pu
# 4Kxxzu+MxMry0NJYf3yOLRTfhYskHBcLraXUCtrMwqnhPKvul6Sx6Lu8vilk605W
# ADJNifl3WFuexVCYJJM9G2mfuYIDN+rZ5zmpn0qCXum49bm629h+HyJ205Zrn9aB
# hIrA4i/JlrAh1kosWnCo62psl7ixbNVqFqwWEt+gAqSeIo4ChwkOQl7GHmk78Q5I
# oRneY4JTVlKzhdZEYhJGFXeoZml/5jcmUcox4UNYrKdokE7z8ZTmyowBOUNS+sHI
# G1TY5DZSb8vdAgMBAAGjRjBEMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggr
# BgEFBQcDAzAdBgNVHQ4EFgQUfDms7LrGVboHjmwlSyIjYD/JLQwwDQYJKoZIhvcN
# AQELBQADggEBABRMsfT7DzKy+aFi4HDg0MpxmbjQxOH1lzUzanaECRiyA0sn7+sA
# /4jvis1+qC5NjDGkLKOTCuDzIXnBWLCCBugukXbIO7g392ANqKdHjBHw1WlLvMVk
# 4WSmY096lzpvDd3jJApr/Alcp4KmRGNLnQ3vv+F9Uj58Uo1qjs85vt6fl9xe5lo3
# rFahNHL4ngjgyF8emNm7FItJeNtVe08PhFn0caOX0FTzXrZxGGO6Ov8tzf91j/qK
# QdBifG7Fx3FF7DifNqoBBo55a7q0anz30k8p+V0zllrLkgGXfOzXmA1L37Qmt3QB
# FCdJVigjQMuHcrJsWd8rg857Og0un91tfZIxggH0MIIB8AIBATBCMC4xLDAqBgNV
# BAMMI1VuaXR5LUNsYXVkZS1BdXRvbWF0aW9uLURldmVsb3BtZW50AhB1HRbZIqgr
# lUTwkh3hnGtFMA0GCWCGSAFlAwQCAQUAoIGEMBgGCisGAQQBgjcCAQwxCjAIoAKA
# AKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIESYlziU5PRc/7ox35mmhot8
# Of8AfqIKEzdBtCSLeblnMA0GCSqGSIb3DQEBAQUABIIBAEeKr4NNOgLDILm2AE7D
# w3i7Y6oTaeySZMhNBu658YuzylOqbzEQNyNLUcTvpSX4XyHH/2nJsmkmJa3DpHl7
# Pbo+l3AsVyciGh03c9rOBZ+af/qeI9aP84N5yolWvDVbF4bMpsikyfL47UL3J11d
# nDBawa54ok1T6ic0+xIt61rFzdxth61GMOHQjQ7Zs/O5+sIOX3zFuWZsku8CiZtS
# Dmdjb6bO95390JhjFi55y41X2I3Nhj0x4BEqjdrgF9pxgKg1N71aQnExGJTs4iad
# +wjIaqLk9LdQ0aAvAlrdFO+ZijZ/W/g6ErNJWnOYmyTGhypDZwQ5zXCpZcvLe4uC
# nXE=
# SIG # End signature block
